
Work_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ee4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000069c  08008ff0  08008ff0  00018ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800968c  0800968c  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800968c  0800968c  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800968c  0800968c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800968c  0800968c  0001968c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009690  08009690  00019690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004898  20000088  0800971c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004920  0800971c  00024920  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146d2  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f1e  00000000  00000000  00034783  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001388  00000000  00000000  000376a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001200  00000000  00000000  00038a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ae98  00000000  00000000  00039c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011049  00000000  00000000  00054ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000938a3  00000000  00000000  00065b11  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f93b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059dc  00000000  00000000  000f9430  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08008fd8 	.word	0x08008fd8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08008fd8 	.word	0x08008fd8

0800014c <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000156:	4802      	ldr	r0, [pc, #8]	; (8000160 <SELECT+0x14>)
 8000158:	f002 fb52 	bl	8002800 <HAL_GPIO_WritePin>
}
 800015c:	bf00      	nop
 800015e:	bd80      	pop	{r7, pc}
 8000160:	40010c00 	.word	0x40010c00

08000164 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800016e:	4802      	ldr	r0, [pc, #8]	; (8000178 <DESELECT+0x14>)
 8000170:	f002 fb46 	bl	8002800 <HAL_GPIO_WritePin>
}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	40010c00 	.word	0x40010c00

0800017c <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	4603      	mov	r3, r0
 8000184:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8000186:	bf00      	nop
 8000188:	4808      	ldr	r0, [pc, #32]	; (80001ac <SPI_TxByte+0x30>)
 800018a:	f003 fbc1 	bl	8003910 <HAL_SPI_GetState>
 800018e:	4603      	mov	r3, r0
 8000190:	2b01      	cmp	r3, #1
 8000192:	d1f9      	bne.n	8000188 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 8000194:	1df9      	adds	r1, r7, #7
 8000196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800019a:	2201      	movs	r2, #1
 800019c:	4803      	ldr	r0, [pc, #12]	; (80001ac <SPI_TxByte+0x30>)
 800019e:	f003 f8d9 	bl	8003354 <HAL_SPI_Transmit>
}
 80001a2:	bf00      	nop
 80001a4:	3708      	adds	r7, #8
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	200002f0 	.word	0x200002f0

080001b0 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b084      	sub	sp, #16
 80001b4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80001b6:	23ff      	movs	r3, #255	; 0xff
 80001b8:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80001ba:	2300      	movs	r3, #0
 80001bc:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 80001be:	bf00      	nop
 80001c0:	4809      	ldr	r0, [pc, #36]	; (80001e8 <SPI_RxByte+0x38>)
 80001c2:	f003 fba5 	bl	8003910 <HAL_SPI_GetState>
 80001c6:	4603      	mov	r3, r0
 80001c8:	2b01      	cmp	r3, #1
 80001ca:	d1f9      	bne.n	80001c0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 80001cc:	1dba      	adds	r2, r7, #6
 80001ce:	1df9      	adds	r1, r7, #7
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	9300      	str	r3, [sp, #0]
 80001d6:	2301      	movs	r3, #1
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <SPI_RxByte+0x38>)
 80001da:	f003 f9f7 	bl	80035cc <HAL_SPI_TransmitReceive>

  return data;
 80001de:	79bb      	ldrb	r3, [r7, #6]
}
 80001e0:	4618      	mov	r0, r3
 80001e2:	3708      	adds	r7, #8
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	200002f0 	.word	0x200002f0

080001ec <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80001f4:	f7ff ffdc 	bl	80001b0 <SPI_RxByte>
 80001f8:	4603      	mov	r3, r0
 80001fa:	461a      	mov	r2, r3
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	701a      	strb	r2, [r3, #0]
}
 8000200:	bf00      	nop
 8000202:	3708      	adds	r7, #8
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}

08000208 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800020e:	4b0b      	ldr	r3, [pc, #44]	; (800023c <SD_ReadyWait+0x34>)
 8000210:	2232      	movs	r2, #50	; 0x32
 8000212:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000214:	f7ff ffcc 	bl	80001b0 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000218:	f7ff ffca 	bl	80001b0 <SPI_RxByte>
 800021c:	4603      	mov	r3, r0
 800021e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000220:	79fb      	ldrb	r3, [r7, #7]
 8000222:	2bff      	cmp	r3, #255	; 0xff
 8000224:	d004      	beq.n	8000230 <SD_ReadyWait+0x28>
 8000226:	4b05      	ldr	r3, [pc, #20]	; (800023c <SD_ReadyWait+0x34>)
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	b2db      	uxtb	r3, r3
 800022c:	2b00      	cmp	r3, #0
 800022e:	d1f3      	bne.n	8000218 <SD_ReadyWait+0x10>

  return res;
 8000230:	79fb      	ldrb	r3, [r7, #7]
}
 8000232:	4618      	mov	r0, r3
 8000234:	3708      	adds	r7, #8
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	200028b0 	.word	0x200028b0

08000240 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b086      	sub	sp, #24
 8000244:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000246:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800024a:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 800024c:	f7ff ff8a 	bl	8000164 <DESELECT>

  for(int i = 0; i < 10; i++)
 8000250:	2300      	movs	r3, #0
 8000252:	613b      	str	r3, [r7, #16]
 8000254:	e005      	b.n	8000262 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000256:	20ff      	movs	r0, #255	; 0xff
 8000258:	f7ff ff90 	bl	800017c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800025c:	693b      	ldr	r3, [r7, #16]
 800025e:	3301      	adds	r3, #1
 8000260:	613b      	str	r3, [r7, #16]
 8000262:	693b      	ldr	r3, [r7, #16]
 8000264:	2b09      	cmp	r3, #9
 8000266:	ddf6      	ble.n	8000256 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000268:	f7ff ff70 	bl	800014c <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 800026c:	2340      	movs	r3, #64	; 0x40
 800026e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000270:	2300      	movs	r3, #0
 8000272:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000274:	2300      	movs	r3, #0
 8000276:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000278:	2300      	movs	r3, #0
 800027a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 800027c:	2300      	movs	r3, #0
 800027e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000280:	2395      	movs	r3, #149	; 0x95
 8000282:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]
 8000288:	e009      	b.n	800029e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800028a:	1d3a      	adds	r2, r7, #4
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	4413      	add	r3, r2
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	4618      	mov	r0, r3
 8000294:	f7ff ff72 	bl	800017c <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	3301      	adds	r3, #1
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	2b05      	cmp	r3, #5
 80002a2:	ddf2      	ble.n	800028a <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80002a4:	e002      	b.n	80002ac <SD_PowerOn+0x6c>
  {
    Count--;
 80002a6:	697b      	ldr	r3, [r7, #20]
 80002a8:	3b01      	subs	r3, #1
 80002aa:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80002ac:	f7ff ff80 	bl	80001b0 <SPI_RxByte>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b01      	cmp	r3, #1
 80002b4:	d002      	beq.n	80002bc <SD_PowerOn+0x7c>
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d1f4      	bne.n	80002a6 <SD_PowerOn+0x66>
  }

  DESELECT();
 80002bc:	f7ff ff52 	bl	8000164 <DESELECT>
  SPI_TxByte(0XFF);
 80002c0:	20ff      	movs	r0, #255	; 0xff
 80002c2:	f7ff ff5b 	bl	800017c <SPI_TxByte>

  PowerFlag = 1;
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <SD_PowerOn+0x94>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	701a      	strb	r2, [r3, #0]
}
 80002cc:	bf00      	nop
 80002ce:	3718      	adds	r7, #24
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	200000a5 	.word	0x200000a5

080002d8 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80002dc:	4b03      	ldr	r3, [pc, #12]	; (80002ec <SD_PowerOff+0x14>)
 80002de:	2200      	movs	r2, #0
 80002e0:	701a      	strb	r2, [r3, #0]
}
 80002e2:	bf00      	nop
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bc80      	pop	{r7}
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	200000a5 	.word	0x200000a5

080002f0 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80002f4:	4b02      	ldr	r3, [pc, #8]	; (8000300 <SD_CheckPower+0x10>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	200000a5 	.word	0x200000a5

08000304 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800030e:	4b17      	ldr	r3, [pc, #92]	; (800036c <SD_RxDataBlock+0x68>)
 8000310:	220a      	movs	r2, #10
 8000312:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000314:	f7ff ff4c 	bl	80001b0 <SPI_RxByte>
 8000318:	4603      	mov	r3, r0
 800031a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800031c:	7bfb      	ldrb	r3, [r7, #15]
 800031e:	2bff      	cmp	r3, #255	; 0xff
 8000320:	d104      	bne.n	800032c <SD_RxDataBlock+0x28>
 8000322:	4b12      	ldr	r3, [pc, #72]	; (800036c <SD_RxDataBlock+0x68>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	b2db      	uxtb	r3, r3
 8000328:	2b00      	cmp	r3, #0
 800032a:	d1f3      	bne.n	8000314 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 800032c:	7bfb      	ldrb	r3, [r7, #15]
 800032e:	2bfe      	cmp	r3, #254	; 0xfe
 8000330:	d001      	beq.n	8000336 <SD_RxDataBlock+0x32>
    return FALSE;
 8000332:	2300      	movs	r3, #0
 8000334:	e016      	b.n	8000364 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	1c5a      	adds	r2, r3, #1
 800033a:	607a      	str	r2, [r7, #4]
 800033c:	4618      	mov	r0, r3
 800033e:	f7ff ff55 	bl	80001ec <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	1c5a      	adds	r2, r3, #1
 8000346:	607a      	str	r2, [r7, #4]
 8000348:	4618      	mov	r0, r3
 800034a:	f7ff ff4f 	bl	80001ec <SPI_RxBytePtr>
  } while(btr -= 2);
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	3b02      	subs	r3, #2
 8000352:	603b      	str	r3, [r7, #0]
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1ed      	bne.n	8000336 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 800035a:	f7ff ff29 	bl	80001b0 <SPI_RxByte>
  SPI_RxByte();
 800035e:	f7ff ff27 	bl	80001b0 <SPI_RxByte>

  return TRUE;
 8000362:	2301      	movs	r3, #1
}
 8000364:	4618      	mov	r0, r3
 8000366:	3710      	adds	r7, #16
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	200028b1 	.word	0x200028b1

08000370 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b084      	sub	sp, #16
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	460b      	mov	r3, r1
 800037a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 800037c:	2300      	movs	r3, #0
 800037e:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000380:	f7ff ff42 	bl	8000208 <SD_ReadyWait>
 8000384:	4603      	mov	r3, r0
 8000386:	2bff      	cmp	r3, #255	; 0xff
 8000388:	d001      	beq.n	800038e <SD_TxDataBlock+0x1e>
    return FALSE;
 800038a:	2300      	movs	r3, #0
 800038c:	e040      	b.n	8000410 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 800038e:	78fb      	ldrb	r3, [r7, #3]
 8000390:	4618      	mov	r0, r3
 8000392:	f7ff fef3 	bl	800017c <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8000396:	78fb      	ldrb	r3, [r7, #3]
 8000398:	2bfd      	cmp	r3, #253	; 0xfd
 800039a:	d031      	beq.n	8000400 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 800039c:	2300      	movs	r3, #0
 800039e:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	1c5a      	adds	r2, r3, #1
 80003a4:	607a      	str	r2, [r7, #4]
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	4618      	mov	r0, r3
 80003aa:	f7ff fee7 	bl	800017c <SPI_TxByte>
      SPI_TxByte(*buff++);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	1c5a      	adds	r2, r3, #1
 80003b2:	607a      	str	r2, [r7, #4]
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	4618      	mov	r0, r3
 80003b8:	f7ff fee0 	bl	800017c <SPI_TxByte>
    } while (--wc);
 80003bc:	7bbb      	ldrb	r3, [r7, #14]
 80003be:	3b01      	subs	r3, #1
 80003c0:	73bb      	strb	r3, [r7, #14]
 80003c2:	7bbb      	ldrb	r3, [r7, #14]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d1eb      	bne.n	80003a0 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80003c8:	f7ff fef2 	bl	80001b0 <SPI_RxByte>
    SPI_RxByte();
 80003cc:	f7ff fef0 	bl	80001b0 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 80003d0:	e00b      	b.n	80003ea <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 80003d2:	f7ff feed 	bl	80001b0 <SPI_RxByte>
 80003d6:	4603      	mov	r3, r0
 80003d8:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 80003da:	7bfb      	ldrb	r3, [r7, #15]
 80003dc:	f003 031f 	and.w	r3, r3, #31
 80003e0:	2b05      	cmp	r3, #5
 80003e2:	d006      	beq.n	80003f2 <SD_TxDataBlock+0x82>
        break;

      i++;
 80003e4:	7b7b      	ldrb	r3, [r7, #13]
 80003e6:	3301      	adds	r3, #1
 80003e8:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 80003ea:	7b7b      	ldrb	r3, [r7, #13]
 80003ec:	2b40      	cmp	r3, #64	; 0x40
 80003ee:	d9f0      	bls.n	80003d2 <SD_TxDataBlock+0x62>
 80003f0:	e000      	b.n	80003f4 <SD_TxDataBlock+0x84>
        break;
 80003f2:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80003f4:	bf00      	nop
 80003f6:	f7ff fedb 	bl	80001b0 <SPI_RxByte>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d0fa      	beq.n	80003f6 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000400:	7bfb      	ldrb	r3, [r7, #15]
 8000402:	f003 031f 	and.w	r3, r3, #31
 8000406:	2b05      	cmp	r3, #5
 8000408:	d101      	bne.n	800040e <SD_TxDataBlock+0x9e>
    return TRUE;
 800040a:	2301      	movs	r3, #1
 800040c:	e000      	b.n	8000410 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800040e:	2300      	movs	r3, #0
}
 8000410:	4618      	mov	r0, r3
 8000412:	3710      	adds	r7, #16
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}

08000418 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	6039      	str	r1, [r7, #0]
 8000422:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000424:	f7ff fef0 	bl	8000208 <SD_ReadyWait>
 8000428:	4603      	mov	r3, r0
 800042a:	2bff      	cmp	r3, #255	; 0xff
 800042c:	d001      	beq.n	8000432 <SD_SendCmd+0x1a>
    return 0xFF;
 800042e:	23ff      	movs	r3, #255	; 0xff
 8000430:	e040      	b.n	80004b4 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	4618      	mov	r0, r3
 8000436:	f7ff fea1 	bl	800017c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	0e1b      	lsrs	r3, r3, #24
 800043e:	b2db      	uxtb	r3, r3
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff fe9b 	bl	800017c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	0c1b      	lsrs	r3, r3, #16
 800044a:	b2db      	uxtb	r3, r3
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff fe95 	bl	800017c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	0a1b      	lsrs	r3, r3, #8
 8000456:	b2db      	uxtb	r3, r3
 8000458:	4618      	mov	r0, r3
 800045a:	f7ff fe8f 	bl	800017c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	b2db      	uxtb	r3, r3
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff fe8a 	bl	800017c <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000468:	2300      	movs	r3, #0
 800046a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 800046c:	79fb      	ldrb	r3, [r7, #7]
 800046e:	2b40      	cmp	r3, #64	; 0x40
 8000470:	d101      	bne.n	8000476 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000472:	2395      	movs	r3, #149	; 0x95
 8000474:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	2b48      	cmp	r3, #72	; 0x48
 800047a:	d101      	bne.n	8000480 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 800047c:	2387      	movs	r3, #135	; 0x87
 800047e:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8000480:	7bfb      	ldrb	r3, [r7, #15]
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff fe7a 	bl	800017c <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	2b4c      	cmp	r3, #76	; 0x4c
 800048c:	d101      	bne.n	8000492 <SD_SendCmd+0x7a>
    SPI_RxByte();
 800048e:	f7ff fe8f 	bl	80001b0 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8000492:	230a      	movs	r3, #10
 8000494:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000496:	f7ff fe8b 	bl	80001b0 <SPI_RxByte>
 800049a:	4603      	mov	r3, r0
 800049c:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800049e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	da05      	bge.n	80004b2 <SD_SendCmd+0x9a>
 80004a6:	7bbb      	ldrb	r3, [r7, #14]
 80004a8:	3b01      	subs	r3, #1
 80004aa:	73bb      	strb	r3, [r7, #14]
 80004ac:	7bbb      	ldrb	r3, [r7, #14]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d1f1      	bne.n	8000496 <SD_SendCmd+0x7e>

  return res;
 80004b2:	7b7b      	ldrb	r3, [r7, #13]
}
 80004b4:	4618      	mov	r0, r3
 80004b6:	3710      	adds	r7, #16
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}

080004bc <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 80004cc:	2301      	movs	r3, #1
 80004ce:	e0d5      	b.n	800067c <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80004d0:	4b6c      	ldr	r3, [pc, #432]	; (8000684 <SD_disk_initialize+0x1c8>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	f003 0302 	and.w	r3, r3, #2
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d003      	beq.n	80004e6 <SD_disk_initialize+0x2a>
    return Stat;
 80004de:	4b69      	ldr	r3, [pc, #420]	; (8000684 <SD_disk_initialize+0x1c8>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	e0ca      	b.n	800067c <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 80004e6:	f7ff feab 	bl	8000240 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 80004ea:	f7ff fe2f 	bl	800014c <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 80004f2:	2100      	movs	r1, #0
 80004f4:	2040      	movs	r0, #64	; 0x40
 80004f6:	f7ff ff8f 	bl	8000418 <SD_SendCmd>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	f040 80a5 	bne.w	800064c <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000502:	4b61      	ldr	r3, [pc, #388]	; (8000688 <SD_disk_initialize+0x1cc>)
 8000504:	2264      	movs	r2, #100	; 0x64
 8000506:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000508:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800050c:	2048      	movs	r0, #72	; 0x48
 800050e:	f7ff ff83 	bl	8000418 <SD_SendCmd>
 8000512:	4603      	mov	r3, r0
 8000514:	2b01      	cmp	r3, #1
 8000516:	d158      	bne.n	80005ca <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000518:	2300      	movs	r3, #0
 800051a:	73fb      	strb	r3, [r7, #15]
 800051c:	e00c      	b.n	8000538 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800051e:	7bfc      	ldrb	r4, [r7, #15]
 8000520:	f7ff fe46 	bl	80001b0 <SPI_RxByte>
 8000524:	4603      	mov	r3, r0
 8000526:	461a      	mov	r2, r3
 8000528:	f107 0310 	add.w	r3, r7, #16
 800052c:	4423      	add	r3, r4
 800052e:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000532:	7bfb      	ldrb	r3, [r7, #15]
 8000534:	3301      	adds	r3, #1
 8000536:	73fb      	strb	r3, [r7, #15]
 8000538:	7bfb      	ldrb	r3, [r7, #15]
 800053a:	2b03      	cmp	r3, #3
 800053c:	d9ef      	bls.n	800051e <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800053e:	7abb      	ldrb	r3, [r7, #10]
 8000540:	2b01      	cmp	r3, #1
 8000542:	f040 8083 	bne.w	800064c <SD_disk_initialize+0x190>
 8000546:	7afb      	ldrb	r3, [r7, #11]
 8000548:	2baa      	cmp	r3, #170	; 0xaa
 800054a:	d17f      	bne.n	800064c <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 800054c:	2100      	movs	r1, #0
 800054e:	2077      	movs	r0, #119	; 0x77
 8000550:	f7ff ff62 	bl	8000418 <SD_SendCmd>
 8000554:	4603      	mov	r3, r0
 8000556:	2b01      	cmp	r3, #1
 8000558:	d807      	bhi.n	800056a <SD_disk_initialize+0xae>
 800055a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800055e:	2069      	movs	r0, #105	; 0x69
 8000560:	f7ff ff5a 	bl	8000418 <SD_SendCmd>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d005      	beq.n	8000576 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800056a:	4b47      	ldr	r3, [pc, #284]	; (8000688 <SD_disk_initialize+0x1cc>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d1eb      	bne.n	800054c <SD_disk_initialize+0x90>
 8000574:	e000      	b.n	8000578 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000576:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000578:	4b43      	ldr	r3, [pc, #268]	; (8000688 <SD_disk_initialize+0x1cc>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	b2db      	uxtb	r3, r3
 800057e:	2b00      	cmp	r3, #0
 8000580:	d064      	beq.n	800064c <SD_disk_initialize+0x190>
 8000582:	2100      	movs	r1, #0
 8000584:	207a      	movs	r0, #122	; 0x7a
 8000586:	f7ff ff47 	bl	8000418 <SD_SendCmd>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d15d      	bne.n	800064c <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000590:	2300      	movs	r3, #0
 8000592:	73fb      	strb	r3, [r7, #15]
 8000594:	e00c      	b.n	80005b0 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000596:	7bfc      	ldrb	r4, [r7, #15]
 8000598:	f7ff fe0a 	bl	80001b0 <SPI_RxByte>
 800059c:	4603      	mov	r3, r0
 800059e:	461a      	mov	r2, r3
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	4423      	add	r3, r4
 80005a6:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	3301      	adds	r3, #1
 80005ae:	73fb      	strb	r3, [r7, #15]
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	2b03      	cmp	r3, #3
 80005b4:	d9ef      	bls.n	8000596 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 80005b6:	7a3b      	ldrb	r3, [r7, #8]
 80005b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SD_disk_initialize+0x108>
 80005c0:	2306      	movs	r3, #6
 80005c2:	e000      	b.n	80005c6 <SD_disk_initialize+0x10a>
 80005c4:	2302      	movs	r3, #2
 80005c6:	73bb      	strb	r3, [r7, #14]
 80005c8:	e040      	b.n	800064c <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80005ca:	2100      	movs	r1, #0
 80005cc:	2077      	movs	r0, #119	; 0x77
 80005ce:	f7ff ff23 	bl	8000418 <SD_SendCmd>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d808      	bhi.n	80005ea <SD_disk_initialize+0x12e>
 80005d8:	2100      	movs	r1, #0
 80005da:	2069      	movs	r0, #105	; 0x69
 80005dc:	f7ff ff1c 	bl	8000418 <SD_SendCmd>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d801      	bhi.n	80005ea <SD_disk_initialize+0x12e>
 80005e6:	2302      	movs	r3, #2
 80005e8:	e000      	b.n	80005ec <SD_disk_initialize+0x130>
 80005ea:	2301      	movs	r3, #1
 80005ec:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 80005ee:	7bbb      	ldrb	r3, [r7, #14]
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d10e      	bne.n	8000612 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80005f4:	2100      	movs	r1, #0
 80005f6:	2077      	movs	r0, #119	; 0x77
 80005f8:	f7ff ff0e 	bl	8000418 <SD_SendCmd>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d80e      	bhi.n	8000620 <SD_disk_initialize+0x164>
 8000602:	2100      	movs	r1, #0
 8000604:	2069      	movs	r0, #105	; 0x69
 8000606:	f7ff ff07 	bl	8000418 <SD_SendCmd>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d107      	bne.n	8000620 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000610:	e00d      	b.n	800062e <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000612:	2100      	movs	r1, #0
 8000614:	2041      	movs	r0, #65	; 0x41
 8000616:	f7ff feff 	bl	8000418 <SD_SendCmd>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d005      	beq.n	800062c <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000620:	4b19      	ldr	r3, [pc, #100]	; (8000688 <SD_disk_initialize+0x1cc>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b00      	cmp	r3, #0
 8000628:	d1e1      	bne.n	80005ee <SD_disk_initialize+0x132>
 800062a:	e000      	b.n	800062e <SD_disk_initialize+0x172>
            break; /* CMD1 */
 800062c:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 800062e:	4b16      	ldr	r3, [pc, #88]	; (8000688 <SD_disk_initialize+0x1cc>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	2b00      	cmp	r3, #0
 8000636:	d007      	beq.n	8000648 <SD_disk_initialize+0x18c>
 8000638:	f44f 7100 	mov.w	r1, #512	; 0x200
 800063c:	2050      	movs	r0, #80	; 0x50
 800063e:	f7ff feeb 	bl	8000418 <SD_SendCmd>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 800064c:	4a0f      	ldr	r2, [pc, #60]	; (800068c <SD_disk_initialize+0x1d0>)
 800064e:	7bbb      	ldrb	r3, [r7, #14]
 8000650:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8000652:	f7ff fd87 	bl	8000164 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000656:	f7ff fdab 	bl	80001b0 <SPI_RxByte>

  if (type)
 800065a:	7bbb      	ldrb	r3, [r7, #14]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d008      	beq.n	8000672 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <SD_disk_initialize+0x1c8>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	f023 0301 	bic.w	r3, r3, #1
 800066a:	b2da      	uxtb	r2, r3
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <SD_disk_initialize+0x1c8>)
 800066e:	701a      	strb	r2, [r3, #0]
 8000670:	e001      	b.n	8000676 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000672:	f7ff fe31 	bl	80002d8 <SD_PowerOff>
  }

  return Stat;
 8000676:	4b03      	ldr	r3, [pc, #12]	; (8000684 <SD_disk_initialize+0x1c8>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	b2db      	uxtb	r3, r3
}
 800067c:	4618      	mov	r0, r3
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	bd90      	pop	{r4, r7, pc}
 8000684:	20000000 	.word	0x20000000
 8000688:	200028b1 	.word	0x200028b1
 800068c:	200000a4 	.word	0x200000a4

08000690 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
  if (drv)
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SD_disk_status+0x14>
    return STA_NOINIT;
 80006a0:	2301      	movs	r3, #1
 80006a2:	e002      	b.n	80006aa <SD_disk_status+0x1a>

  return Stat;
 80006a4:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <SD_disk_status+0x24>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b2db      	uxtb	r3, r3
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	20000000 	.word	0x20000000

080006b8 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60b9      	str	r1, [r7, #8]
 80006c0:	607a      	str	r2, [r7, #4]
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	4603      	mov	r3, r0
 80006c6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d102      	bne.n	80006d4 <SD_disk_read+0x1c>
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d101      	bne.n	80006d8 <SD_disk_read+0x20>
    return RES_PARERR;
 80006d4:	2304      	movs	r3, #4
 80006d6:	e051      	b.n	800077c <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 80006d8:	4b2a      	ldr	r3, [pc, #168]	; (8000784 <SD_disk_read+0xcc>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SD_disk_read+0x32>
    return RES_NOTRDY;
 80006e6:	2303      	movs	r3, #3
 80006e8:	e048      	b.n	800077c <SD_disk_read+0xc4>

  if (!(CardType & 4))
 80006ea:	4b27      	ldr	r3, [pc, #156]	; (8000788 <SD_disk_read+0xd0>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d102      	bne.n	80006fc <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	025b      	lsls	r3, r3, #9
 80006fa:	607b      	str	r3, [r7, #4]

  SELECT();
 80006fc:	f7ff fd26 	bl	800014c <SELECT>

  if (count == 1)
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d111      	bne.n	800072a <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	2051      	movs	r0, #81	; 0x51
 800070a:	f7ff fe85 	bl	8000418 <SD_SendCmd>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d129      	bne.n	8000768 <SD_disk_read+0xb0>
 8000714:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000718:	68b8      	ldr	r0, [r7, #8]
 800071a:	f7ff fdf3 	bl	8000304 <SD_RxDataBlock>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d021      	beq.n	8000768 <SD_disk_read+0xb0>
      count = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	e01e      	b.n	8000768 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 800072a:	6879      	ldr	r1, [r7, #4]
 800072c:	2052      	movs	r0, #82	; 0x52
 800072e:	f7ff fe73 	bl	8000418 <SD_SendCmd>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d117      	bne.n	8000768 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073c:	68b8      	ldr	r0, [r7, #8]
 800073e:	f7ff fde1 	bl	8000304 <SD_RxDataBlock>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d00a      	beq.n	800075e <SD_disk_read+0xa6>
          break;

        buff += 512;
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800074e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	3b01      	subs	r3, #1
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d1ed      	bne.n	8000738 <SD_disk_read+0x80>
 800075c:	e000      	b.n	8000760 <SD_disk_read+0xa8>
          break;
 800075e:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8000760:	2100      	movs	r1, #0
 8000762:	204c      	movs	r0, #76	; 0x4c
 8000764:	f7ff fe58 	bl	8000418 <SD_SendCmd>
    }
  }

  DESELECT();
 8000768:	f7ff fcfc 	bl	8000164 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 800076c:	f7ff fd20 	bl	80001b0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	bf14      	ite	ne
 8000776:	2301      	movne	r3, #1
 8000778:	2300      	moveq	r3, #0
 800077a:	b2db      	uxtb	r3, r3
}
 800077c:	4618      	mov	r0, r3
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000000 	.word	0x20000000
 8000788:	200000a4 	.word	0x200000a4

0800078c <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	60b9      	str	r1, [r7, #8]
 8000794:	607a      	str	r2, [r7, #4]
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	4603      	mov	r3, r0
 800079a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d102      	bne.n	80007a8 <SD_disk_write+0x1c>
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d101      	bne.n	80007ac <SD_disk_write+0x20>
    return RES_PARERR;
 80007a8:	2304      	movs	r3, #4
 80007aa:	e06b      	b.n	8000884 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80007ac:	4b37      	ldr	r3, [pc, #220]	; (800088c <SD_disk_write+0x100>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SD_disk_write+0x32>
    return RES_NOTRDY;
 80007ba:	2303      	movs	r3, #3
 80007bc:	e062      	b.n	8000884 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 80007be:	4b33      	ldr	r3, [pc, #204]	; (800088c <SD_disk_write+0x100>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	f003 0304 	and.w	r3, r3, #4
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SD_disk_write+0x44>
    return RES_WRPRT;
 80007cc:	2302      	movs	r3, #2
 80007ce:	e059      	b.n	8000884 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 80007d0:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <SD_disk_write+0x104>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d102      	bne.n	80007e2 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	025b      	lsls	r3, r3, #9
 80007e0:	607b      	str	r3, [r7, #4]

  SELECT();
 80007e2:	f7ff fcb3 	bl	800014c <SELECT>

  if (count == 1)
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d110      	bne.n	800080e <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80007ec:	6879      	ldr	r1, [r7, #4]
 80007ee:	2058      	movs	r0, #88	; 0x58
 80007f0:	f7ff fe12 	bl	8000418 <SD_SendCmd>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d13a      	bne.n	8000870 <SD_disk_write+0xe4>
 80007fa:	21fe      	movs	r1, #254	; 0xfe
 80007fc:	68b8      	ldr	r0, [r7, #8]
 80007fe:	f7ff fdb7 	bl	8000370 <SD_TxDataBlock>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d033      	beq.n	8000870 <SD_disk_write+0xe4>
      count = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	e030      	b.n	8000870 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 800080e:	4b20      	ldr	r3, [pc, #128]	; (8000890 <SD_disk_write+0x104>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	2b00      	cmp	r3, #0
 8000818:	d007      	beq.n	800082a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800081a:	2100      	movs	r1, #0
 800081c:	2077      	movs	r0, #119	; 0x77
 800081e:	f7ff fdfb 	bl	8000418 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000822:	6839      	ldr	r1, [r7, #0]
 8000824:	2057      	movs	r0, #87	; 0x57
 8000826:	f7ff fdf7 	bl	8000418 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800082a:	6879      	ldr	r1, [r7, #4]
 800082c:	2059      	movs	r0, #89	; 0x59
 800082e:	f7ff fdf3 	bl	8000418 <SD_SendCmd>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d11b      	bne.n	8000870 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000838:	21fc      	movs	r1, #252	; 0xfc
 800083a:	68b8      	ldr	r0, [r7, #8]
 800083c:	f7ff fd98 	bl	8000370 <SD_TxDataBlock>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d00a      	beq.n	800085c <SD_disk_write+0xd0>
          break;

        buff += 512;
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800084c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	3b01      	subs	r3, #1
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d1ee      	bne.n	8000838 <SD_disk_write+0xac>
 800085a:	e000      	b.n	800085e <SD_disk_write+0xd2>
          break;
 800085c:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 800085e:	21fd      	movs	r1, #253	; 0xfd
 8000860:	2000      	movs	r0, #0
 8000862:	f7ff fd85 	bl	8000370 <SD_TxDataBlock>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d101      	bne.n	8000870 <SD_disk_write+0xe4>
      {
        count = 1;
 800086c:	2301      	movs	r3, #1
 800086e:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8000870:	f7ff fc78 	bl	8000164 <DESELECT>
  SPI_RxByte();
 8000874:	f7ff fc9c 	bl	80001b0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	bf14      	ite	ne
 800087e:	2301      	movne	r3, #1
 8000880:	2300      	moveq	r3, #0
 8000882:	b2db      	uxtb	r3, r3
}
 8000884:	4618      	mov	r0, r3
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000000 	.word	0x20000000
 8000890:	200000a4 	.word	0x200000a4

08000894 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b08b      	sub	sp, #44	; 0x2c
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	603a      	str	r2, [r7, #0]
 800089e:	71fb      	strb	r3, [r7, #7]
 80008a0:	460b      	mov	r3, r1
 80008a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80008ae:	2304      	movs	r3, #4
 80008b0:	e117      	b.n	8000ae2 <SD_disk_ioctl+0x24e>

  res = RES_ERROR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 80008b8:	79bb      	ldrb	r3, [r7, #6]
 80008ba:	2b05      	cmp	r3, #5
 80008bc:	d126      	bne.n	800090c <SD_disk_ioctl+0x78>
  {
    switch (*ptr)
 80008be:	6a3b      	ldr	r3, [r7, #32]
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d00e      	beq.n	80008e4 <SD_disk_ioctl+0x50>
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d012      	beq.n	80008f0 <SD_disk_ioctl+0x5c>
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d11a      	bne.n	8000904 <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 80008ce:	f7ff fd0f 	bl	80002f0 <SD_CheckPower>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 80008d8:	f7ff fcfe 	bl	80002d8 <SD_PowerOff>
      res = RES_OK;
 80008dc:	2300      	movs	r3, #0
 80008de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80008e2:	e0fc      	b.n	8000ade <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 80008e4:	f7ff fcac 	bl	8000240 <SD_PowerOn>
      res = RES_OK;
 80008e8:	2300      	movs	r3, #0
 80008ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80008ee:	e0f6      	b.n	8000ade <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80008f0:	6a3b      	ldr	r3, [r7, #32]
 80008f2:	1c5c      	adds	r4, r3, #1
 80008f4:	f7ff fcfc 	bl	80002f0 <SD_CheckPower>
 80008f8:	4603      	mov	r3, r0
 80008fa:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80008fc:	2300      	movs	r3, #0
 80008fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000902:	e0ec      	b.n	8000ade <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 8000904:	2304      	movs	r3, #4
 8000906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800090a:	e0e8      	b.n	8000ade <SD_disk_ioctl+0x24a>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 800090c:	4b77      	ldr	r3, [pc, #476]	; (8000aec <SD_disk_ioctl+0x258>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 800091a:	2303      	movs	r3, #3
 800091c:	e0e1      	b.n	8000ae2 <SD_disk_ioctl+0x24e>

    SELECT();
 800091e:	f7ff fc15 	bl	800014c <SELECT>

    switch (ctrl)
 8000922:	79bb      	ldrb	r3, [r7, #6]
 8000924:	2b0d      	cmp	r3, #13
 8000926:	f200 80cb 	bhi.w	8000ac0 <SD_disk_ioctl+0x22c>
 800092a:	a201      	add	r2, pc, #4	; (adr r2, 8000930 <SD_disk_ioctl+0x9c>)
 800092c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000930:	08000a2b 	.word	0x08000a2b
 8000934:	08000969 	.word	0x08000969
 8000938:	08000a1b 	.word	0x08000a1b
 800093c:	08000ac1 	.word	0x08000ac1
 8000940:	08000ac1 	.word	0x08000ac1
 8000944:	08000ac1 	.word	0x08000ac1
 8000948:	08000ac1 	.word	0x08000ac1
 800094c:	08000ac1 	.word	0x08000ac1
 8000950:	08000ac1 	.word	0x08000ac1
 8000954:	08000ac1 	.word	0x08000ac1
 8000958:	08000ac1 	.word	0x08000ac1
 800095c:	08000a3d 	.word	0x08000a3d
 8000960:	08000a61 	.word	0x08000a61
 8000964:	08000a85 	.word	0x08000a85
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000968:	2100      	movs	r1, #0
 800096a:	2049      	movs	r0, #73	; 0x49
 800096c:	f7ff fd54 	bl	8000418 <SD_SendCmd>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	f040 80a8 	bne.w	8000ac8 <SD_disk_ioctl+0x234>
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	2110      	movs	r1, #16
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fcc0 	bl	8000304 <SD_RxDataBlock>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	f000 809e 	beq.w	8000ac8 <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1)
 800098c:	7b3b      	ldrb	r3, [r7, #12]
 800098e:	099b      	lsrs	r3, r3, #6
 8000990:	b2db      	uxtb	r3, r3
 8000992:	2b01      	cmp	r3, #1
 8000994:	d10e      	bne.n	80009b4 <SD_disk_ioctl+0x120>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000996:	7d7b      	ldrb	r3, [r7, #21]
 8000998:	b29a      	uxth	r2, r3
 800099a:	7d3b      	ldrb	r3, [r7, #20]
 800099c:	b29b      	uxth	r3, r3
 800099e:	021b      	lsls	r3, r3, #8
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	4413      	add	r3, r2
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	3301      	adds	r3, #1
 80009a8:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80009aa:	8bfb      	ldrh	r3, [r7, #30]
 80009ac:	029a      	lsls	r2, r3, #10
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	e02e      	b.n	8000a12 <SD_disk_ioctl+0x17e>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80009b4:	7c7b      	ldrb	r3, [r7, #17]
 80009b6:	f003 030f 	and.w	r3, r3, #15
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	7dbb      	ldrb	r3, [r7, #22]
 80009be:	09db      	lsrs	r3, r3, #7
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	4413      	add	r3, r2
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	7d7b      	ldrb	r3, [r7, #21]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	f003 0306 	and.w	r3, r3, #6
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	4413      	add	r3, r2
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	3302      	adds	r3, #2
 80009d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80009dc:	7d3b      	ldrb	r3, [r7, #20]
 80009de:	099b      	lsrs	r3, r3, #6
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	b29a      	uxth	r2, r3
 80009e4:	7cfb      	ldrb	r3, [r7, #19]
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	4413      	add	r3, r2
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	7cbb      	ldrb	r3, [r7, #18]
 80009f2:	029b      	lsls	r3, r3, #10
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	4413      	add	r3, r2
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	3301      	adds	r3, #1
 8000a02:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000a04:	8bfa      	ldrh	r2, [r7, #30]
 8000a06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a0a:	3b09      	subs	r3, #9
 8000a0c:	409a      	lsls	r2, r3
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8000a12:	2300      	movs	r3, #0
 8000a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000a18:	e056      	b.n	8000ac8 <SD_disk_ioctl+0x234>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a20:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000a22:	2300      	movs	r3, #0
 8000a24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a28:	e055      	b.n	8000ad6 <SD_disk_ioctl+0x242>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8000a2a:	f7ff fbed 	bl	8000208 <SD_ReadyWait>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2bff      	cmp	r3, #255	; 0xff
 8000a32:	d14b      	bne.n	8000acc <SD_disk_ioctl+0x238>
        res = RES_OK;
 8000a34:	2300      	movs	r3, #0
 8000a36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a3a:	e047      	b.n	8000acc <SD_disk_ioctl+0x238>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2049      	movs	r0, #73	; 0x49
 8000a40:	f7ff fcea 	bl	8000418 <SD_SendCmd>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d142      	bne.n	8000ad0 <SD_disk_ioctl+0x23c>
 8000a4a:	2110      	movs	r1, #16
 8000a4c:	6a38      	ldr	r0, [r7, #32]
 8000a4e:	f7ff fc59 	bl	8000304 <SD_RxDataBlock>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d03b      	beq.n	8000ad0 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a5e:	e037      	b.n	8000ad0 <SD_disk_ioctl+0x23c>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000a60:	2100      	movs	r1, #0
 8000a62:	204a      	movs	r0, #74	; 0x4a
 8000a64:	f7ff fcd8 	bl	8000418 <SD_SendCmd>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d132      	bne.n	8000ad4 <SD_disk_ioctl+0x240>
 8000a6e:	2110      	movs	r1, #16
 8000a70:	6a38      	ldr	r0, [r7, #32]
 8000a72:	f7ff fc47 	bl	8000304 <SD_RxDataBlock>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d02b      	beq.n	8000ad4 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a82:	e027      	b.n	8000ad4 <SD_disk_ioctl+0x240>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000a84:	2100      	movs	r1, #0
 8000a86:	207a      	movs	r0, #122	; 0x7a
 8000a88:	f7ff fcc6 	bl	8000418 <SD_SendCmd>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d116      	bne.n	8000ac0 <SD_disk_ioctl+0x22c>
      {
        for (n = 0; n < 4; n++)
 8000a92:	2300      	movs	r3, #0
 8000a94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000a98:	e00b      	b.n	8000ab2 <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 8000a9a:	6a3c      	ldr	r4, [r7, #32]
 8000a9c:	1c63      	adds	r3, r4, #1
 8000a9e:	623b      	str	r3, [r7, #32]
 8000aa0:	f7ff fb86 	bl	80001b0 <SPI_RxByte>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000aa8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000aac:	3301      	adds	r3, #1
 8000aae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ab2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ab6:	2b03      	cmp	r3, #3
 8000ab8:	d9ef      	bls.n	8000a9a <SD_disk_ioctl+0x206>
        }

        res = RES_OK;
 8000aba:	2300      	movs	r3, #0
 8000abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ac6:	e006      	b.n	8000ad6 <SD_disk_ioctl+0x242>
      break;
 8000ac8:	bf00      	nop
 8000aca:	e004      	b.n	8000ad6 <SD_disk_ioctl+0x242>
      break;
 8000acc:	bf00      	nop
 8000ace:	e002      	b.n	8000ad6 <SD_disk_ioctl+0x242>
      break;
 8000ad0:	bf00      	nop
 8000ad2:	e000      	b.n	8000ad6 <SD_disk_ioctl+0x242>
      break;
 8000ad4:	bf00      	nop
    }

    DESELECT();
 8000ad6:	f7ff fb45 	bl	8000164 <DESELECT>
    SPI_RxByte();
 8000ada:	f7ff fb69 	bl	80001b0 <SPI_RxByte>
  }

  return res;
 8000ade:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	372c      	adds	r7, #44	; 0x2c
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd90      	pop	{r4, r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000000 	.word	0x20000000

08000af0 <HAL_ADC_ConvHalfCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, GPIO_PIN_RESET);
// HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, GPIO_PIN_SET);
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef * hadc) {
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]

}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
	...

08000b04 <HAL_ADC_ConvCpltCallback>:
uint16_t line = 0;
//FRESULT
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef * hadc) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if (flag == true) {
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d007      	beq.n	8000b26 <HAL_ADC_ConvCpltCallback+0x22>
	  //uint16_t counter;
	UINT byteswritten;
  //  for (counter = 0; counter < ADC_BUF_LEN; counter++)
    //	f_printf( & fil, "%d|%d\n", adc_buf[counter], line++);
    	f_write(&fil,adc_buf,sizeof(adc_buf),&byteswritten);
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b1e:	4905      	ldr	r1, [pc, #20]	; (8000b34 <HAL_ADC_ConvCpltCallback+0x30>)
 8000b20:	4805      	ldr	r0, [pc, #20]	; (8000b38 <HAL_ADC_ConvCpltCallback+0x34>)
 8000b22:	f006 fd25 	bl	8007570 <f_write>
  }
}
 8000b26:	bf00      	nop
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200000a6 	.word	0x200000a6
 8000b34:	20001480 	.word	0x20001480
 8000b38:	20001884 	.word	0x20001884

08000b3c <HAL_TIM_PeriodElapsedCallback>:
//Every 5s
int dataCounter = 0;
/*
void TIM3_IRQHandler(void)// TODO OR
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  if (htim -> Instance == TIM3) //check if the interrupt comes from TIM1
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a06      	ldr	r2, [pc, #24]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d106      	bne.n	8000b5c <HAL_TIM_PeriodElapsedCallback+0x20>
  {
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b4e:	2120      	movs	r1, #32
 8000b50:	4805      	ldr	r0, [pc, #20]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000b52:	f001 fe6d 	bl	8002830 <HAL_GPIO_TogglePin>
    flag = false;
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
  }
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40000400 	.word	0x40000400
 8000b68:	40010800 	.word	0x40010800
 8000b6c:	200000a6 	.word	0x200000a6

08000b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b0a8      	sub	sp, #160	; 0xa0
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b76:	f000 fdbf 	bl	80016f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7a:	f000 f8a1 	bl	8000cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7e:	f000 fa05 	bl	8000f8c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b82:	f000 f9e5 	bl	8000f50 <MX_DMA_Init>
  MX_ADC1_Init();
 8000b86:	f000 f8f7 	bl	8000d78 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000b8a:	f000 f933 	bl	8000df4 <MX_SPI2_Init>
  MX_FATFS_Init();
 8000b8e:	f003 fc3d 	bl	800440c <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8000b92:	f000 f9b3 	bl	8000efc <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000b96:	f000 f963 	bl	8000e60 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
    /* Wait for SD module reset */
    HAL_Delay(500);
 8000b9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b9e:	f000 fe0d 	bl	80017bc <HAL_Delay>
    /* Mount SD Card */
    if (f_mount( & fs, "", 0) != FR_OK)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	493a      	ldr	r1, [pc, #232]	; (8000c90 <main+0x120>)
 8000ba6:	483b      	ldr	r0, [pc, #236]	; (8000c94 <main+0x124>)
 8000ba8:	f006 f95e 	bl	8006e68 <f_mount>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d003      	beq.n	8000bba <main+0x4a>
      _Error_Handler(__FILE__, __LINE__);
 8000bb2:	21a6      	movs	r1, #166	; 0xa6
 8000bb4:	4838      	ldr	r0, [pc, #224]	; (8000c98 <main+0x128>)
 8000bb6:	f000 fa7b 	bl	80010b0 <_Error_Handler>
    // Open file to write
    char fileName[80];
    sprintf(fileName, "%s_%d.txt", "DataLog", dataCounter++);
 8000bba:	4b38      	ldr	r3, [pc, #224]	; (8000c9c <main+0x12c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	1c5a      	adds	r2, r3, #1
 8000bc0:	4936      	ldr	r1, [pc, #216]	; (8000c9c <main+0x12c>)
 8000bc2:	600a      	str	r2, [r1, #0]
 8000bc4:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000bc8:	4a35      	ldr	r2, [pc, #212]	; (8000ca0 <main+0x130>)
 8000bca:	4936      	ldr	r1, [pc, #216]	; (8000ca4 <main+0x134>)
 8000bcc:	f007 fb9a 	bl	8008304 <siprintf>
    	if (f_open( & fil, fileName, FA_OPEN_ALWAYS | FA_READ | FA_WRITE) != FR_OK)
 8000bd0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000bd4:	2213      	movs	r2, #19
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4833      	ldr	r0, [pc, #204]	; (8000ca8 <main+0x138>)
 8000bda:	f006 f98f 	bl	8006efc <f_open>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d003      	beq.n	8000bec <main+0x7c>
    		_Error_Handler(__FILE__, __LINE__);
 8000be4:	21ab      	movs	r1, #171	; 0xab
 8000be6:	482c      	ldr	r0, [pc, #176]	; (8000c98 <main+0x128>)
 8000be8:	f000 fa62 	bl	80010b0 <_Error_Handler>
    //Run ADC Cont.
    HAL_ADC_Start_DMA( & hadc1, (uint32_t * ) adc_buf, ADC_BUF_LEN);
 8000bec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf0:	492e      	ldr	r1, [pc, #184]	; (8000cac <main+0x13c>)
 8000bf2:	482f      	ldr	r0, [pc, #188]	; (8000cb0 <main+0x140>)
 8000bf4:	f000 fedc 	bl	80019b0 <HAL_ADC_Start_DMA>

    //RUN TIM_3
    HAL_TIM_Base_Start_IT(&htim3);
 8000bf8:	482e      	ldr	r0, [pc, #184]	; (8000cb4 <main+0x144>)
 8000bfa:	f002 ff8d 	bl	8003b18 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
      if (flag == false) {
 8000bfe:	4b2e      	ldr	r3, [pc, #184]	; (8000cb8 <main+0x148>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	f083 0301 	eor.w	r3, r3, #1
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d0f7      	beq.n	8000bfe <main+0x8e>
        //Save
        if (f_close( & fil) != FR_OK)
 8000c0e:	4826      	ldr	r0, [pc, #152]	; (8000ca8 <main+0x138>)
 8000c10:	f006 ffff 	bl	8007c12 <f_close>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d003      	beq.n	8000c22 <main+0xb2>
          _Error_Handler(__FILE__, __LINE__);
 8000c1a:	21ba      	movs	r1, #186	; 0xba
 8000c1c:	481e      	ldr	r0, [pc, #120]	; (8000c98 <main+0x128>)
 8000c1e:	f000 fa47 	bl	80010b0 <_Error_Handler>
        //Unmount Save
        if (f_mount(NULL, "", 1) != FR_OK)
 8000c22:	2201      	movs	r2, #1
 8000c24:	491a      	ldr	r1, [pc, #104]	; (8000c90 <main+0x120>)
 8000c26:	2000      	movs	r0, #0
 8000c28:	f006 f91e 	bl	8006e68 <f_mount>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d003      	beq.n	8000c3a <main+0xca>
          _Error_Handler(__FILE__, __LINE__);
 8000c32:	21bd      	movs	r1, #189	; 0xbd
 8000c34:	4818      	ldr	r0, [pc, #96]	; (8000c98 <main+0x128>)
 8000c36:	f000 fa3b 	bl	80010b0 <_Error_Handler>
        //Mount new
        if (f_mount( & fs, "", 0) != FR_OK)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	4914      	ldr	r1, [pc, #80]	; (8000c90 <main+0x120>)
 8000c3e:	4815      	ldr	r0, [pc, #84]	; (8000c94 <main+0x124>)
 8000c40:	f006 f912 	bl	8006e68 <f_mount>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d003      	beq.n	8000c52 <main+0xe2>
          _Error_Handler(__FILE__, __LINE__);
 8000c4a:	21c0      	movs	r1, #192	; 0xc0
 8000c4c:	4812      	ldr	r0, [pc, #72]	; (8000c98 <main+0x128>)
 8000c4e:	f000 fa2f 	bl	80010b0 <_Error_Handler>
          line = 0;
 8000c52:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <main+0x14c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	801a      	strh	r2, [r3, #0]
          // Open file to write
          char fileName[80];
          sprintf(fileName, "%s_%d.txt", "DataLog", dataCounter++);
 8000c58:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <main+0x12c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	1c5a      	adds	r2, r3, #1
 8000c5e:	490f      	ldr	r1, [pc, #60]	; (8000c9c <main+0x12c>)
 8000c60:	600a      	str	r2, [r1, #0]
 8000c62:	4638      	mov	r0, r7
 8000c64:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <main+0x130>)
 8000c66:	490f      	ldr	r1, [pc, #60]	; (8000ca4 <main+0x134>)
 8000c68:	f007 fb4c 	bl	8008304 <siprintf>
          if (f_open( & fil, fileName, FA_OPEN_ALWAYS | FA_READ | FA_WRITE) != FR_OK)
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	2213      	movs	r2, #19
 8000c70:	4619      	mov	r1, r3
 8000c72:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <main+0x138>)
 8000c74:	f006 f942 	bl	8006efc <f_open>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d003      	beq.n	8000c86 <main+0x116>
            _Error_Handler(__FILE__, __LINE__);
 8000c7e:	21c6      	movs	r1, #198	; 0xc6
 8000c80:	4805      	ldr	r0, [pc, #20]	; (8000c98 <main+0x128>)
 8000c82:	f000 fa15 	bl	80010b0 <_Error_Handler>
          flag = true;
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <main+0x148>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	701a      	strb	r2, [r3, #0]
      if (flag == false) {
 8000c8c:	e7b7      	b.n	8000bfe <main+0x8e>
 8000c8e:	bf00      	nop
 8000c90:	08008ff0 	.word	0x08008ff0
 8000c94:	20000348 	.word	0x20000348
 8000c98:	08008ff4 	.word	0x08008ff4
 8000c9c:	200000ac 	.word	0x200000ac
 8000ca0:	08009008 	.word	0x08009008
 8000ca4:	08009010 	.word	0x08009010
 8000ca8:	20001884 	.word	0x20001884
 8000cac:	20001480 	.word	0x20001480
 8000cb0:	200013c4 	.word	0x200013c4
 8000cb4:	2000137c 	.word	0x2000137c
 8000cb8:	200000a6 	.word	0x200000a6
 8000cbc:	200000a8 	.word	0x200000a8

08000cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b094      	sub	sp, #80	; 0x50
 8000cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cca:	2228      	movs	r2, #40	; 0x28
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f007 fa42 	bl	8008158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d02:	2302      	movs	r3, #2
 8000d04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d0c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d10:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d16:	4618      	mov	r0, r3
 8000d18:	f001 fdc6 	bl	80028a8 <HAL_RCC_OscConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d22:	f000 f9dd 	bl	80010e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d26:	230f      	movs	r3, #15
 8000d28:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d36:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2102      	movs	r1, #2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f002 f830 	bl	8002da8 <HAL_RCC_ClockConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d4e:	f000 f9c7 	bl	80010e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d52:	2302      	movs	r3, #2
 8000d54:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000d56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d5a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f002 f9be 	bl	80030e0 <HAL_RCCEx_PeriphCLKConfig>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d6a:	f000 f9b9 	bl	80010e0 <Error_Handler>
  }
}
 8000d6e:	bf00      	nop
 8000d70:	3750      	adds	r7, #80	; 0x50
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d88:	4b18      	ldr	r3, [pc, #96]	; (8000dec <MX_ADC1_Init+0x74>)
 8000d8a:	4a19      	ldr	r2, [pc, #100]	; (8000df0 <MX_ADC1_Init+0x78>)
 8000d8c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d8e:	4b17      	ldr	r3, [pc, #92]	; (8000dec <MX_ADC1_Init+0x74>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d94:	4b15      	ldr	r3, [pc, #84]	; (8000dec <MX_ADC1_Init+0x74>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d9a:	4b14      	ldr	r3, [pc, #80]	; (8000dec <MX_ADC1_Init+0x74>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <MX_ADC1_Init+0x74>)
 8000da2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000da6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000da8:	4b10      	ldr	r3, [pc, #64]	; (8000dec <MX_ADC1_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000dae:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <MX_ADC1_Init+0x74>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000db4:	480d      	ldr	r0, [pc, #52]	; (8000dec <MX_ADC1_Init+0x74>)
 8000db6:	f000 fd23 	bl	8001800 <HAL_ADC_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000dc0:	f000 f98e 	bl	80010e0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_ADC1_Init+0x74>)
 8000dd6:	f000 fed3 	bl	8001b80 <HAL_ADC_ConfigChannel>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000de0:	f000 f97e 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000de4:	bf00      	nop
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	200013c4 	.word	0x200013c4
 8000df0:	40012400 	.word	0x40012400

08000df4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000df8:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <MX_SPI2_Init+0x64>)
 8000dfa:	4a18      	ldr	r2, [pc, #96]	; (8000e5c <MX_SPI2_Init+0x68>)
 8000dfc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000dfe:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <MX_SPI2_Init+0x64>)
 8000e00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e04:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_SPI2_Init+0x64>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <MX_SPI2_Init+0x64>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_SPI2_Init+0x64>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <MX_SPI2_Init+0x64>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <MX_SPI2_Init+0x64>)
 8000e20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e24:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <MX_SPI2_Init+0x64>)
 8000e28:	2208      	movs	r2, #8
 8000e2a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <MX_SPI2_Init+0x64>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <MX_SPI2_Init+0x64>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e38:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <MX_SPI2_Init+0x64>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <MX_SPI2_Init+0x64>)
 8000e40:	220a      	movs	r2, #10
 8000e42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e44:	4804      	ldr	r0, [pc, #16]	; (8000e58 <MX_SPI2_Init+0x64>)
 8000e46:	f002 fa01 	bl	800324c <HAL_SPI_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000e50:	f000 f946 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	200002f0 	.word	0x200002f0
 8000e5c:	40003800 	.word	0x40003800

08000e60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e66:	f107 0308 	add.w	r3, r7, #8
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e74:	463b      	mov	r3, r7
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <MX_TIM3_Init+0x94>)
 8000e7e:	4a1e      	ldr	r2, [pc, #120]	; (8000ef8 <MX_TIM3_Init+0x98>)
 8000e80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36000-1;
 8000e82:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <MX_TIM3_Init+0x94>)
 8000e84:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000e88:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <MX_TIM3_Init+0x94>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8000e90:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <MX_TIM3_Init+0x94>)
 8000e92:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000e96:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e98:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <MX_TIM3_Init+0x94>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <MX_TIM3_Init+0x94>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ea4:	4813      	ldr	r0, [pc, #76]	; (8000ef4 <MX_TIM3_Init+0x94>)
 8000ea6:	f002 fde7 	bl	8003a78 <HAL_TIM_Base_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000eb0:	f000 f916 	bl	80010e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000eba:	f107 0308 	add.w	r3, r7, #8
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	480c      	ldr	r0, [pc, #48]	; (8000ef4 <MX_TIM3_Init+0x94>)
 8000ec2:	f002 ff83 	bl	8003dcc <HAL_TIM_ConfigClockSource>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000ecc:	f000 f908 	bl	80010e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ed8:	463b      	mov	r3, r7
 8000eda:	4619      	mov	r1, r3
 8000edc:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <MX_TIM3_Init+0x94>)
 8000ede:	f003 f949 	bl	8004174 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000ee8:	f000 f8fa 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000eec:	bf00      	nop
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	2000137c 	.word	0x2000137c
 8000ef8:	40000400 	.word	0x40000400

08000efc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <MX_USART1_UART_Init+0x4c>)
 8000f02:	4a12      	ldr	r2, [pc, #72]	; (8000f4c <MX_USART1_UART_Init+0x50>)
 8000f04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <MX_USART1_UART_Init+0x4c>)
 8000f08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <MX_USART1_UART_Init+0x4c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <MX_USART1_UART_Init+0x4c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <MX_USART1_UART_Init+0x4c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <MX_USART1_UART_Init+0x4c>)
 8000f22:	220c      	movs	r2, #12
 8000f24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f26:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <MX_USART1_UART_Init+0x4c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <MX_USART1_UART_Init+0x4c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f32:	4805      	ldr	r0, [pc, #20]	; (8000f48 <MX_USART1_UART_Init+0x4c>)
 8000f34:	f003 f98e 	bl	8004254 <HAL_UART_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f3e:	f000 f8cf 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200013f4 	.word	0x200013f4
 8000f4c:	40013800 	.word	0x40013800

08000f50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <MX_DMA_Init+0x38>)
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <MX_DMA_Init+0x38>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6153      	str	r3, [r2, #20]
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <MX_DMA_Init+0x38>)
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2100      	movs	r1, #0
 8000f72:	200b      	movs	r0, #11
 8000f74:	f001 f8c5 	bl	8002102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f78:	200b      	movs	r0, #11
 8000f7a:	f001 f8de 	bl	800213a <HAL_NVIC_EnableIRQ>

}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000

08000f8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	f107 0310 	add.w	r3, r7, #16
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa0:	4b3e      	ldr	r3, [pc, #248]	; (800109c <MX_GPIO_Init+0x110>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	4a3d      	ldr	r2, [pc, #244]	; (800109c <MX_GPIO_Init+0x110>)
 8000fa6:	f043 0310 	orr.w	r3, r3, #16
 8000faa:	6193      	str	r3, [r2, #24]
 8000fac:	4b3b      	ldr	r3, [pc, #236]	; (800109c <MX_GPIO_Init+0x110>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f003 0310 	and.w	r3, r3, #16
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb8:	4b38      	ldr	r3, [pc, #224]	; (800109c <MX_GPIO_Init+0x110>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4a37      	ldr	r2, [pc, #220]	; (800109c <MX_GPIO_Init+0x110>)
 8000fbe:	f043 0320 	orr.w	r3, r3, #32
 8000fc2:	6193      	str	r3, [r2, #24]
 8000fc4:	4b35      	ldr	r3, [pc, #212]	; (800109c <MX_GPIO_Init+0x110>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	f003 0320 	and.w	r3, r3, #32
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd0:	4b32      	ldr	r3, [pc, #200]	; (800109c <MX_GPIO_Init+0x110>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	4a31      	ldr	r2, [pc, #196]	; (800109c <MX_GPIO_Init+0x110>)
 8000fd6:	f043 0304 	orr.w	r3, r3, #4
 8000fda:	6193      	str	r3, [r2, #24]
 8000fdc:	4b2f      	ldr	r3, [pc, #188]	; (800109c <MX_GPIO_Init+0x110>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f003 0304 	and.w	r3, r3, #4
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe8:	4b2c      	ldr	r3, [pc, #176]	; (800109c <MX_GPIO_Init+0x110>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	4a2b      	ldr	r2, [pc, #172]	; (800109c <MX_GPIO_Init+0x110>)
 8000fee:	f043 0308 	orr.w	r3, r3, #8
 8000ff2:	6193      	str	r3, [r2, #24]
 8000ff4:	4b29      	ldr	r3, [pc, #164]	; (800109c <MX_GPIO_Init+0x110>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f003 0308 	and.w	r3, r3, #8
 8000ffc:	603b      	str	r3, [r7, #0]
 8000ffe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	2120      	movs	r1, #32
 8001004:	4826      	ldr	r0, [pc, #152]	; (80010a0 <MX_GPIO_Init+0x114>)
 8001006:	f001 fbfb 	bl	8002800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSPB12_GPIO_Port, CSPB12_Pin, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001010:	4824      	ldr	r0, [pc, #144]	; (80010a4 <MX_GPIO_Init+0x118>)
 8001012:	f001 fbf5 	bl	8002800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001016:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800101a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800101c:	4b22      	ldr	r3, [pc, #136]	; (80010a8 <MX_GPIO_Init+0x11c>)
 800101e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	4619      	mov	r1, r3
 800102a:	4820      	ldr	r0, [pc, #128]	; (80010ac <MX_GPIO_Init+0x120>)
 800102c:	f001 fa8e 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001030:	230c      	movs	r3, #12
 8001032:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2302      	movs	r3, #2
 800103a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103c:	f107 0310 	add.w	r3, r7, #16
 8001040:	4619      	mov	r1, r3
 8001042:	4817      	ldr	r0, [pc, #92]	; (80010a0 <MX_GPIO_Init+0x114>)
 8001044:	f001 fa82 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001048:	2320      	movs	r3, #32
 800104a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104c:	2301      	movs	r3, #1
 800104e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2302      	movs	r3, #2
 8001056:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	4619      	mov	r1, r3
 800105e:	4810      	ldr	r0, [pc, #64]	; (80010a0 <MX_GPIO_Init+0x114>)
 8001060:	f001 fa74 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pin : CSPB12_Pin */
  GPIO_InitStruct.Pin = CSPB12_Pin;
 8001064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001068:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106a:	2301      	movs	r3, #1
 800106c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2302      	movs	r3, #2
 8001074:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CSPB12_GPIO_Port, &GPIO_InitStruct);
 8001076:	f107 0310 	add.w	r3, r7, #16
 800107a:	4619      	mov	r1, r3
 800107c:	4809      	ldr	r0, [pc, #36]	; (80010a4 <MX_GPIO_Init+0x118>)
 800107e:	f001 fa65 	bl	800254c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	2028      	movs	r0, #40	; 0x28
 8001088:	f001 f83b 	bl	8002102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800108c:	2028      	movs	r0, #40	; 0x28
 800108e:	f001 f854 	bl	800213a <HAL_NVIC_EnableIRQ>

}
 8001092:	bf00      	nop
 8001094:	3720      	adds	r7, #32
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40021000 	.word	0x40021000
 80010a0:	40010800 	.word	0x40010800
 80010a4:	40010c00 	.word	0x40010c00
 80010a8:	10110000 	.word	0x10110000
 80010ac:	40011000 	.word	0x40011000

080010b0 <_Error_Handler>:

/* USER CODE BEGIN 4 */
    void _Error_Handler(char * file, int line) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
      /* USER CODE BEGIN Error_Handler_Debug */
      /* User can add his own implementation to report the HAL error return state */
      printf("error at line %i", line);
 80010ba:	6839      	ldr	r1, [r7, #0]
 80010bc:	4806      	ldr	r0, [pc, #24]	; (80010d8 <_Error_Handler+0x28>)
 80010be:	f007 f8f9 	bl	80082b4 <iprintf>
      fflush(stdout);
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <_Error_Handler+0x2c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f006 ff45 	bl	8007f58 <fflush>
      //while (1) {
        //TODO
    //  }

      /* USER CODE END Error_Handler_Debug */
    }
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	0800901c 	.word	0x0800901c
 80010dc:	20000024 	.word	0x20000024

080010e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
      /* User can add his own implementation to report the HAL error return state */
      printf("error at line %i", line);
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <Error_Handler+0x20>)
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	4619      	mov	r1, r3
 80010ea:	4806      	ldr	r0, [pc, #24]	; (8001104 <Error_Handler+0x24>)
 80010ec:	f007 f8e2 	bl	80082b4 <iprintf>
      fflush(stdout);
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <Error_Handler+0x28>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f006 ff2e 	bl	8007f58 <fflush>
      //while (1) {
        //TODO
    //  }

  /* USER CODE END Error_Handler_Debug */
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200000a8 	.word	0x200000a8
 8001104:	0800901c 	.word	0x0800901c
 8001108:	20000024 	.word	0x20000024

0800110c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <HAL_MspInit+0x5c>)
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	4a14      	ldr	r2, [pc, #80]	; (8001168 <HAL_MspInit+0x5c>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6193      	str	r3, [r2, #24]
 800111e:	4b12      	ldr	r3, [pc, #72]	; (8001168 <HAL_MspInit+0x5c>)
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <HAL_MspInit+0x5c>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	4a0e      	ldr	r2, [pc, #56]	; (8001168 <HAL_MspInit+0x5c>)
 8001130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001134:	61d3      	str	r3, [r2, #28]
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <HAL_MspInit+0x5c>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_MspInit+0x60>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	4a04      	ldr	r2, [pc, #16]	; (800116c <HAL_MspInit+0x60>)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115e:	bf00      	nop
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	40021000 	.word	0x40021000
 800116c:	40010000 	.word	0x40010000

08001170 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a29      	ldr	r2, [pc, #164]	; (8001230 <HAL_ADC_MspInit+0xc0>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d14a      	bne.n	8001226 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001190:	4b28      	ldr	r3, [pc, #160]	; (8001234 <HAL_ADC_MspInit+0xc4>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a27      	ldr	r2, [pc, #156]	; (8001234 <HAL_ADC_MspInit+0xc4>)
 8001196:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b25      	ldr	r3, [pc, #148]	; (8001234 <HAL_ADC_MspInit+0xc4>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a8:	4b22      	ldr	r3, [pc, #136]	; (8001234 <HAL_ADC_MspInit+0xc4>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a21      	ldr	r2, [pc, #132]	; (8001234 <HAL_ADC_MspInit+0xc4>)
 80011ae:	f043 0304 	orr.w	r3, r3, #4
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <HAL_ADC_MspInit+0xc4>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011c0:	2301      	movs	r3, #1
 80011c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c4:	2303      	movs	r3, #3
 80011c6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	4619      	mov	r1, r3
 80011ce:	481a      	ldr	r0, [pc, #104]	; (8001238 <HAL_ADC_MspInit+0xc8>)
 80011d0:	f001 f9bc 	bl	800254c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011d4:	4b19      	ldr	r3, [pc, #100]	; (800123c <HAL_ADC_MspInit+0xcc>)
 80011d6:	4a1a      	ldr	r2, [pc, #104]	; (8001240 <HAL_ADC_MspInit+0xd0>)
 80011d8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <HAL_ADC_MspInit+0xcc>)
 80011dc:	2200      	movs	r2, #0
 80011de:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <HAL_ADC_MspInit+0xcc>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <HAL_ADC_MspInit+0xcc>)
 80011e8:	2280      	movs	r2, #128	; 0x80
 80011ea:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011ec:	4b13      	ldr	r3, [pc, #76]	; (800123c <HAL_ADC_MspInit+0xcc>)
 80011ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011f2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <HAL_ADC_MspInit+0xcc>)
 80011f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011fa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <HAL_ADC_MspInit+0xcc>)
 80011fe:	2220      	movs	r2, #32
 8001200:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <HAL_ADC_MspInit+0xcc>)
 8001204:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001208:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800120a:	480c      	ldr	r0, [pc, #48]	; (800123c <HAL_ADC_MspInit+0xcc>)
 800120c:	f000 ffb0 	bl	8002170 <HAL_DMA_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8001216:	f7ff ff63 	bl	80010e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a07      	ldr	r2, [pc, #28]	; (800123c <HAL_ADC_MspInit+0xcc>)
 800121e:	621a      	str	r2, [r3, #32]
 8001220:	4a06      	ldr	r2, [pc, #24]	; (800123c <HAL_ADC_MspInit+0xcc>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001226:	bf00      	nop
 8001228:	3720      	adds	r7, #32
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40012400 	.word	0x40012400
 8001234:	40021000 	.word	0x40021000
 8001238:	40010800 	.word	0x40010800
 800123c:	20001434 	.word	0x20001434
 8001240:	40020008 	.word	0x40020008

08001244 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0310 	add.w	r3, r7, #16
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a1c      	ldr	r2, [pc, #112]	; (80012d0 <HAL_SPI_MspInit+0x8c>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d131      	bne.n	80012c8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001264:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <HAL_SPI_MspInit+0x90>)
 8001266:	69db      	ldr	r3, [r3, #28]
 8001268:	4a1a      	ldr	r2, [pc, #104]	; (80012d4 <HAL_SPI_MspInit+0x90>)
 800126a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800126e:	61d3      	str	r3, [r2, #28]
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <HAL_SPI_MspInit+0x90>)
 8001272:	69db      	ldr	r3, [r3, #28]
 8001274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127c:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <HAL_SPI_MspInit+0x90>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <HAL_SPI_MspInit+0x90>)
 8001282:	f043 0308 	orr.w	r3, r3, #8
 8001286:	6193      	str	r3, [r2, #24]
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_SPI_MspInit+0x90>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f003 0308 	and.w	r3, r3, #8
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001294:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001298:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a2:	f107 0310 	add.w	r3, r7, #16
 80012a6:	4619      	mov	r1, r3
 80012a8:	480b      	ldr	r0, [pc, #44]	; (80012d8 <HAL_SPI_MspInit+0x94>)
 80012aa:	f001 f94f 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80012ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	4619      	mov	r1, r3
 80012c2:	4805      	ldr	r0, [pc, #20]	; (80012d8 <HAL_SPI_MspInit+0x94>)
 80012c4:	f001 f942 	bl	800254c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012c8:	bf00      	nop
 80012ca:	3720      	adds	r7, #32
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40003800 	.word	0x40003800
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40010c00 	.word	0x40010c00

080012dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0d      	ldr	r2, [pc, #52]	; (8001320 <HAL_TIM_Base_MspInit+0x44>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d113      	bne.n	8001316 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012ee:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <HAL_TIM_Base_MspInit+0x48>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	4a0c      	ldr	r2, [pc, #48]	; (8001324 <HAL_TIM_Base_MspInit+0x48>)
 80012f4:	f043 0302 	orr.w	r3, r3, #2
 80012f8:	61d3      	str	r3, [r2, #28]
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <HAL_TIM_Base_MspInit+0x48>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	201d      	movs	r0, #29
 800130c:	f000 fef9 	bl	8002102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001310:	201d      	movs	r0, #29
 8001312:	f000 ff12 	bl	800213a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40000400 	.word	0x40000400
 8001324:	40021000 	.word	0x40021000

08001328 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0310 	add.w	r3, r7, #16
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a1c      	ldr	r2, [pc, #112]	; (80013b4 <HAL_UART_MspInit+0x8c>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d131      	bne.n	80013ac <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <HAL_UART_MspInit+0x90>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	4a1a      	ldr	r2, [pc, #104]	; (80013b8 <HAL_UART_MspInit+0x90>)
 800134e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001352:	6193      	str	r3, [r2, #24]
 8001354:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <HAL_UART_MspInit+0x90>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001360:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <HAL_UART_MspInit+0x90>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	4a14      	ldr	r2, [pc, #80]	; (80013b8 <HAL_UART_MspInit+0x90>)
 8001366:	f043 0304 	orr.w	r3, r3, #4
 800136a:	6193      	str	r3, [r2, #24]
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_UART_MspInit+0x90>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800137c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001382:	2303      	movs	r3, #3
 8001384:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001386:	f107 0310 	add.w	r3, r7, #16
 800138a:	4619      	mov	r1, r3
 800138c:	480b      	ldr	r0, [pc, #44]	; (80013bc <HAL_UART_MspInit+0x94>)
 800138e:	f001 f8dd 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001396:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	4619      	mov	r1, r3
 80013a6:	4805      	ldr	r0, [pc, #20]	; (80013bc <HAL_UART_MspInit+0x94>)
 80013a8:	f001 f8d0 	bl	800254c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013ac:	bf00      	nop
 80013ae:	3720      	adds	r7, #32
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40013800 	.word	0x40013800
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40010800 	.word	0x40010800

080013c0 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1,Timer2;

void SDTimer_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
if(Timer1 > 0)
 80013c4:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <SDTimer_Handler+0x3c>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d006      	beq.n	80013dc <SDTimer_Handler+0x1c>
	Timer1--;
 80013ce:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <SDTimer_Handler+0x3c>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	3b01      	subs	r3, #1
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <SDTimer_Handler+0x3c>)
 80013da:	701a      	strb	r2, [r3, #0]
if(Timer2>0)
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <SDTimer_Handler+0x40>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d006      	beq.n	80013f4 <SDTimer_Handler+0x34>
	Timer2--;
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <SDTimer_Handler+0x40>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	3b01      	subs	r3, #1
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <SDTimer_Handler+0x40>)
 80013f2:	701a      	strb	r2, [r3, #0]
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	200028b1 	.word	0x200028b1
 8001400:	200028b0 	.word	0x200028b0

08001404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <NMI_Handler+0x4>

0800140a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140e:	e7fe      	b.n	800140e <HardFault_Handler+0x4>

08001410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <MemManage_Handler+0x4>

08001416 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800141a:	e7fe      	b.n	800141a <BusFault_Handler+0x4>

0800141c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <UsageFault_Handler+0x4>

08001422 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr

0800142e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr

0800143a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
	...

08001448 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 800144c:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <SysTick_Handler+0x30>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	3301      	adds	r3, #1
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <SysTick_Handler+0x30>)
 8001458:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt>=10)
 800145a:	4b07      	ldr	r3, [pc, #28]	; (8001478 <SysTick_Handler+0x30>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b09      	cmp	r3, #9
 8001462:	d904      	bls.n	800146e <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <SysTick_Handler+0x30>)
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 800146a:	f7ff ffa9 	bl	80013c0 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800146e:	f000 f989 	bl	8001784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200000b0 	.word	0x200000b0

0800147c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <DMA1_Channel1_IRQHandler+0x10>)
 8001482:	f000 ff2f 	bl	80022e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20001434 	.word	0x20001434

08001490 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001494:	4802      	ldr	r0, [pc, #8]	; (80014a0 <TIM3_IRQHandler+0x10>)
 8001496:	f002 fb91 	bl	8003bbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	2000137c 	.word	0x2000137c

080014a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80014a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014ac:	f001 f9da 	bl	8002864 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	e00a      	b.n	80014dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014c6:	f3af 8000 	nop.w
 80014ca:	4601      	mov	r1, r0
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	1c5a      	adds	r2, r3, #1
 80014d0:	60ba      	str	r2, [r7, #8]
 80014d2:	b2ca      	uxtb	r2, r1
 80014d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	3301      	adds	r3, #1
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	dbf0      	blt.n	80014c6 <_read+0x12>
	}

return len;
 80014e4:	687b      	ldr	r3, [r7, #4]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b086      	sub	sp, #24
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	60f8      	str	r0, [r7, #12]
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	e009      	b.n	8001514 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	60ba      	str	r2, [r7, #8]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	3301      	adds	r3, #1
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	429a      	cmp	r2, r3
 800151a:	dbf1      	blt.n	8001500 <_write+0x12>
	}
	return len;
 800151c:	687b      	ldr	r3, [r7, #4]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <_close>:

int _close(int file)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
	return -1;
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001532:	4618      	mov	r0, r3
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800154c:	605a      	str	r2, [r3, #4]
	return 0;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr

0800155a <_isatty>:

int _isatty(int file)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
	return 1;
 8001562:	2301      	movs	r3, #1
}
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr

0800156e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800156e:	b480      	push	{r7}
 8001570:	b085      	sub	sp, #20
 8001572:	af00      	add	r7, sp, #0
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
	return 0;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr
	...

08001588 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001590:	4a14      	ldr	r2, [pc, #80]	; (80015e4 <_sbrk+0x5c>)
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <_sbrk+0x60>)
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800159c:	4b13      	ldr	r3, [pc, #76]	; (80015ec <_sbrk+0x64>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d102      	bne.n	80015aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a4:	4b11      	ldr	r3, [pc, #68]	; (80015ec <_sbrk+0x64>)
 80015a6:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <_sbrk+0x68>)
 80015a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <_sbrk+0x64>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d207      	bcs.n	80015c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b8:	f006 fc18 	bl	8007dec <__errno>
 80015bc:	4602      	mov	r2, r0
 80015be:	230c      	movs	r3, #12
 80015c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
 80015c6:	e009      	b.n	80015dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <_sbrk+0x64>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ce:	4b07      	ldr	r3, [pc, #28]	; (80015ec <_sbrk+0x64>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	4a05      	ldr	r2, [pc, #20]	; (80015ec <_sbrk+0x64>)
 80015d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015da:	68fb      	ldr	r3, [r7, #12]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20005000 	.word	0x20005000
 80015e8:	00000400 	.word	0x00000400
 80015ec:	200000b4 	.word	0x200000b4
 80015f0:	20004920 	.word	0x20004920

080015f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe ff55 	bl	80004bc <SD_disk_initialize>
 8001612:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff f831 	bl	8000690 <SD_disk_status>
 800162e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	4603      	mov	r3, r0
 8001646:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8001648:	7bf8      	ldrb	r0, [r7, #15]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	68b9      	ldr	r1, [r7, #8]
 8001650:	f7ff f832 	bl	80006b8 <SD_disk_read>
 8001654:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b084      	sub	sp, #16
 8001662:	af00      	add	r7, sp, #0
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
 8001668:	603b      	str	r3, [r7, #0]
 800166a:	4603      	mov	r3, r0
 800166c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800166e:	7bf8      	ldrb	r0, [r7, #15]
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	f7ff f889 	bl	800078c <SD_disk_write>
 800167a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	603a      	str	r2, [r7, #0]
 800168e:	71fb      	strb	r3, [r7, #7]
 8001690:	460b      	mov	r3, r1
 8001692:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8001694:	79b9      	ldrb	r1, [r7, #6]
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff f8fa 	bl	8000894 <SD_disk_ioctl>
 80016a0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80016ac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80016ae:	e003      	b.n	80016b8 <LoopCopyDataInit>

080016b0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80016b2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80016b4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80016b6:	3104      	adds	r1, #4

080016b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80016b8:	480a      	ldr	r0, [pc, #40]	; (80016e4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80016ba:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80016bc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80016be:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80016c0:	d3f6      	bcc.n	80016b0 <CopyDataInit>
  ldr r2, =_sbss
 80016c2:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80016c4:	e002      	b.n	80016cc <LoopFillZerobss>

080016c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80016c6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80016c8:	f842 3b04 	str.w	r3, [r2], #4

080016cc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80016ce:	429a      	cmp	r2, r3
  bcc FillZerobss
 80016d0:	d3f9      	bcc.n	80016c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016d2:	f7ff ff8f 	bl	80015f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016d6:	f006 fd1b 	bl	8008110 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016da:	f7ff fa49 	bl	8000b70 <main>
  bx lr
 80016de:	4770      	bx	lr
  ldr r3, =_sidata
 80016e0:	08009694 	.word	0x08009694
  ldr r0, =_sdata
 80016e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80016e8:	20000088 	.word	0x20000088
  ldr r2, =_sbss
 80016ec:	20000088 	.word	0x20000088
  ldr r3, = _ebss
 80016f0:	20004920 	.word	0x20004920

080016f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016f4:	e7fe      	b.n	80016f4 <ADC1_2_IRQHandler>
	...

080016f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <HAL_Init+0x28>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a07      	ldr	r2, [pc, #28]	; (8001720 <HAL_Init+0x28>)
 8001702:	f043 0310 	orr.w	r3, r3, #16
 8001706:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001708:	2003      	movs	r0, #3
 800170a:	f000 fcef 	bl	80020ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800170e:	2000      	movs	r0, #0
 8001710:	f000 f808 	bl	8001724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001714:	f7ff fcfa 	bl	800110c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40022000 	.word	0x40022000

08001724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_InitTick+0x54>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_InitTick+0x58>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	4619      	mov	r1, r3
 8001736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173a:	fbb3 f3f1 	udiv	r3, r3, r1
 800173e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f000 fd07 	bl	8002156 <HAL_SYSTICK_Config>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e00e      	b.n	8001770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b0f      	cmp	r3, #15
 8001756:	d80a      	bhi.n	800176e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001758:	2200      	movs	r2, #0
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	f04f 30ff 	mov.w	r0, #4294967295
 8001760:	f000 fccf 	bl	8002102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001764:	4a06      	ldr	r2, [pc, #24]	; (8001780 <HAL_InitTick+0x5c>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	e000      	b.n	8001770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000004 	.word	0x20000004
 800177c:	20000020 	.word	0x20000020
 8001780:	2000001c 	.word	0x2000001c

08001784 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <HAL_IncTick+0x1c>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <HAL_IncTick+0x20>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	4a03      	ldr	r2, [pc, #12]	; (80017a4 <HAL_IncTick+0x20>)
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	20000020 	.word	0x20000020
 80017a4:	200028b4 	.word	0x200028b4

080017a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return uwTick;
 80017ac:	4b02      	ldr	r3, [pc, #8]	; (80017b8 <HAL_GetTick+0x10>)
 80017ae:	681b      	ldr	r3, [r3, #0]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	200028b4 	.word	0x200028b4

080017bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c4:	f7ff fff0 	bl	80017a8 <HAL_GetTick>
 80017c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d4:	d005      	beq.n	80017e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <HAL_Delay+0x40>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4413      	add	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017e2:	bf00      	nop
 80017e4:	f7ff ffe0 	bl	80017a8 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d8f7      	bhi.n	80017e4 <HAL_Delay+0x28>
  {
  }
}
 80017f4:	bf00      	nop
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000020 	.word	0x20000020

08001800 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001808:	2300      	movs	r3, #0
 800180a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800180c:	2300      	movs	r3, #0
 800180e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e0be      	b.n	80019a0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182c:	2b00      	cmp	r3, #0
 800182e:	d109      	bne.n	8001844 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff fc96 	bl	8001170 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 fae5 	bl	8001e14 <ADC_ConversionStop_Disable>
 800184a:	4603      	mov	r3, r0
 800184c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	2b00      	cmp	r3, #0
 8001858:	f040 8099 	bne.w	800198e <HAL_ADC_Init+0x18e>
 800185c:	7dfb      	ldrb	r3, [r7, #23]
 800185e:	2b00      	cmp	r3, #0
 8001860:	f040 8095 	bne.w	800198e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001868:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800186c:	f023 0302 	bic.w	r3, r3, #2
 8001870:	f043 0202 	orr.w	r2, r3, #2
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001880:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	7b1b      	ldrb	r3, [r3, #12]
 8001886:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001888:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	4313      	orrs	r3, r2
 800188e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001898:	d003      	beq.n	80018a2 <HAL_ADC_Init+0xa2>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d102      	bne.n	80018a8 <HAL_ADC_Init+0xa8>
 80018a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018a6:	e000      	b.n	80018aa <HAL_ADC_Init+0xaa>
 80018a8:	2300      	movs	r3, #0
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	7d1b      	ldrb	r3, [r3, #20]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d119      	bne.n	80018ec <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	7b1b      	ldrb	r3, [r3, #12]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d109      	bne.n	80018d4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	3b01      	subs	r3, #1
 80018c6:	035a      	lsls	r2, r3, #13
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	e00b      	b.n	80018ec <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	f043 0220 	orr.w	r2, r3, #32
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e4:	f043 0201 	orr.w	r2, r3, #1
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	430a      	orrs	r2, r1
 80018fe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	689a      	ldr	r2, [r3, #8]
 8001906:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <HAL_ADC_Init+0x1a8>)
 8001908:	4013      	ands	r3, r2
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6812      	ldr	r2, [r2, #0]
 800190e:	68b9      	ldr	r1, [r7, #8]
 8001910:	430b      	orrs	r3, r1
 8001912:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800191c:	d003      	beq.n	8001926 <HAL_ADC_Init+0x126>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d104      	bne.n	8001930 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	3b01      	subs	r3, #1
 800192c:	051b      	lsls	r3, r3, #20
 800192e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001936:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	430a      	orrs	r2, r1
 8001942:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	4b18      	ldr	r3, [pc, #96]	; (80019ac <HAL_ADC_Init+0x1ac>)
 800194c:	4013      	ands	r3, r2
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	429a      	cmp	r2, r3
 8001952:	d10b      	bne.n	800196c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195e:	f023 0303 	bic.w	r3, r3, #3
 8001962:	f043 0201 	orr.w	r2, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800196a:	e018      	b.n	800199e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001970:	f023 0312 	bic.w	r3, r3, #18
 8001974:	f043 0210 	orr.w	r2, r3, #16
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001980:	f043 0201 	orr.w	r2, r3, #1
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800198c:	e007      	b.n	800199e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001992:	f043 0210 	orr.w	r2, r3, #16
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800199e:	7dfb      	ldrb	r3, [r7, #23]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	ffe1f7fd 	.word	0xffe1f7fd
 80019ac:	ff1f0efe 	.word	0xff1f0efe

080019b0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019bc:	2300      	movs	r3, #0
 80019be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a64      	ldr	r2, [pc, #400]	; (8001b58 <HAL_ADC_Start_DMA+0x1a8>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d004      	beq.n	80019d4 <HAL_ADC_Start_DMA+0x24>
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a63      	ldr	r2, [pc, #396]	; (8001b5c <HAL_ADC_Start_DMA+0x1ac>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d106      	bne.n	80019e2 <HAL_ADC_Start_DMA+0x32>
 80019d4:	4b60      	ldr	r3, [pc, #384]	; (8001b58 <HAL_ADC_Start_DMA+0x1a8>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f040 80b3 	bne.w	8001b48 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d101      	bne.n	80019f0 <HAL_ADC_Start_DMA+0x40>
 80019ec:	2302      	movs	r3, #2
 80019ee:	e0ae      	b.n	8001b4e <HAL_ADC_Start_DMA+0x19e>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f000 f9b9 	bl	8001d70 <ADC_Enable>
 80019fe:	4603      	mov	r3, r0
 8001a00:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a02:	7dfb      	ldrb	r3, [r7, #23]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f040 809a 	bne.w	8001b3e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a12:	f023 0301 	bic.w	r3, r3, #1
 8001a16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a4e      	ldr	r2, [pc, #312]	; (8001b5c <HAL_ADC_Start_DMA+0x1ac>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d105      	bne.n	8001a34 <HAL_ADC_Start_DMA+0x84>
 8001a28:	4b4b      	ldr	r3, [pc, #300]	; (8001b58 <HAL_ADC_Start_DMA+0x1a8>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d115      	bne.n	8001a60 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a38:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d026      	beq.n	8001a9c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a56:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a5e:	e01d      	b.n	8001a9c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a64:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a39      	ldr	r2, [pc, #228]	; (8001b58 <HAL_ADC_Start_DMA+0x1a8>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d004      	beq.n	8001a80 <HAL_ADC_Start_DMA+0xd0>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a38      	ldr	r2, [pc, #224]	; (8001b5c <HAL_ADC_Start_DMA+0x1ac>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d10d      	bne.n	8001a9c <HAL_ADC_Start_DMA+0xec>
 8001a80:	4b35      	ldr	r3, [pc, #212]	; (8001b58 <HAL_ADC_Start_DMA+0x1a8>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d007      	beq.n	8001a9c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d006      	beq.n	8001ab6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aac:	f023 0206 	bic.w	r2, r3, #6
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ab4:	e002      	b.n	8001abc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	4a25      	ldr	r2, [pc, #148]	; (8001b60 <HAL_ADC_Start_DMA+0x1b0>)
 8001aca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	4a24      	ldr	r2, [pc, #144]	; (8001b64 <HAL_ADC_Start_DMA+0x1b4>)
 8001ad2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	4a23      	ldr	r2, [pc, #140]	; (8001b68 <HAL_ADC_Start_DMA+0x1b8>)
 8001ada:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f06f 0202 	mvn.w	r2, #2
 8001ae4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001af4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6a18      	ldr	r0, [r3, #32]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	334c      	adds	r3, #76	; 0x4c
 8001b00:	4619      	mov	r1, r3
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f000 fb8d 	bl	8002224 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b14:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b18:	d108      	bne.n	8001b2c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001b28:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001b2a:	e00f      	b.n	8001b4c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001b3a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001b3c:	e006      	b.n	8001b4c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001b46:	e001      	b.n	8001b4c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40012400 	.word	0x40012400
 8001b5c:	40012800 	.word	0x40012800
 8001b60:	08001e89 	.word	0x08001e89
 8001b64:	08001f05 	.word	0x08001f05
 8001b68:	08001f21 	.word	0x08001f21

08001b6c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr
	...

08001b80 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d101      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x20>
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	e0dc      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x1da>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b06      	cmp	r3, #6
 8001bae:	d81c      	bhi.n	8001bea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	3b05      	subs	r3, #5
 8001bc2:	221f      	movs	r2, #31
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	4019      	ands	r1, r3
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	6818      	ldr	r0, [r3, #0]
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	3b05      	subs	r3, #5
 8001bdc:	fa00 f203 	lsl.w	r2, r0, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	635a      	str	r2, [r3, #52]	; 0x34
 8001be8:	e03c      	b.n	8001c64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b0c      	cmp	r3, #12
 8001bf0:	d81c      	bhi.n	8001c2c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	3b23      	subs	r3, #35	; 0x23
 8001c04:	221f      	movs	r2, #31
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	4019      	ands	r1, r3
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3b23      	subs	r3, #35	; 0x23
 8001c1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	631a      	str	r2, [r3, #48]	; 0x30
 8001c2a:	e01b      	b.n	8001c64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3b41      	subs	r3, #65	; 0x41
 8001c3e:	221f      	movs	r2, #31
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	4019      	ands	r1, r3
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	6818      	ldr	r0, [r3, #0]
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	3b41      	subs	r3, #65	; 0x41
 8001c58:	fa00 f203 	lsl.w	r2, r0, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b09      	cmp	r3, #9
 8001c6a:	d91c      	bls.n	8001ca6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68d9      	ldr	r1, [r3, #12]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	4613      	mov	r3, r2
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	4413      	add	r3, r2
 8001c7c:	3b1e      	subs	r3, #30
 8001c7e:	2207      	movs	r2, #7
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	4019      	ands	r1, r3
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	6898      	ldr	r0, [r3, #8]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4613      	mov	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4413      	add	r3, r2
 8001c96:	3b1e      	subs	r3, #30
 8001c98:	fa00 f203 	lsl.w	r2, r0, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	60da      	str	r2, [r3, #12]
 8001ca4:	e019      	b.n	8001cda <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6919      	ldr	r1, [r3, #16]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	4413      	add	r3, r2
 8001cb6:	2207      	movs	r2, #7
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	4019      	ands	r1, r3
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	6898      	ldr	r0, [r3, #8]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4413      	add	r3, r2
 8001cce:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2b10      	cmp	r3, #16
 8001ce0:	d003      	beq.n	8001cea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ce6:	2b11      	cmp	r3, #17
 8001ce8:	d132      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a1d      	ldr	r2, [pc, #116]	; (8001d64 <HAL_ADC_ConfigChannel+0x1e4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d125      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d126      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001d10:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2b10      	cmp	r3, #16
 8001d18:	d11a      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d1a:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <HAL_ADC_ConfigChannel+0x1e8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a13      	ldr	r2, [pc, #76]	; (8001d6c <HAL_ADC_ConfigChannel+0x1ec>)
 8001d20:	fba2 2303 	umull	r2, r3, r2, r3
 8001d24:	0c9a      	lsrs	r2, r3, #18
 8001d26:	4613      	mov	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d30:	e002      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	3b01      	subs	r3, #1
 8001d36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f9      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x1b2>
 8001d3e:	e007      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d44:	f043 0220 	orr.w	r2, r3, #32
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr
 8001d64:	40012400 	.word	0x40012400
 8001d68:	20000004 	.word	0x20000004
 8001d6c:	431bde83 	.word	0x431bde83

08001d70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d039      	beq.n	8001e02 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f042 0201 	orr.w	r2, r2, #1
 8001d9c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d9e:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <ADC_Enable+0x9c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a1b      	ldr	r2, [pc, #108]	; (8001e10 <ADC_Enable+0xa0>)
 8001da4:	fba2 2303 	umull	r2, r3, r2, r3
 8001da8:	0c9b      	lsrs	r3, r3, #18
 8001daa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001dac:	e002      	b.n	8001db4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	3b01      	subs	r3, #1
 8001db2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f9      	bne.n	8001dae <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001dba:	f7ff fcf5 	bl	80017a8 <HAL_GetTick>
 8001dbe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001dc0:	e018      	b.n	8001df4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001dc2:	f7ff fcf1 	bl	80017a8 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d911      	bls.n	8001df4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd4:	f043 0210 	orr.w	r2, r3, #16
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de0:	f043 0201 	orr.w	r2, r3, #1
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e007      	b.n	8001e04 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d1df      	bne.n	8001dc2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000004 	.word	0x20000004
 8001e10:	431bde83 	.word	0x431bde83

08001e14 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d127      	bne.n	8001e7e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0201 	bic.w	r2, r2, #1
 8001e3c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e3e:	f7ff fcb3 	bl	80017a8 <HAL_GetTick>
 8001e42:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e44:	e014      	b.n	8001e70 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e46:	f7ff fcaf 	bl	80017a8 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d90d      	bls.n	8001e70 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e58:	f043 0210 	orr.w	r2, r3, #16
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e64:	f043 0201 	orr.w	r2, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e007      	b.n	8001e80 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d0e3      	beq.n	8001e46 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d127      	bne.n	8001ef2 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001eb8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ebc:	d115      	bne.n	8001eea <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d111      	bne.n	8001eea <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d105      	bne.n	8001eea <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee2:	f043 0201 	orr.w	r2, r3, #1
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f7fe fe0a 	bl	8000b04 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001ef0:	e004      	b.n	8001efc <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	4798      	blx	r3
}
 8001efc:	bf00      	nop
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f7fe fdec 	bl	8000af0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f18:	bf00      	nop
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3e:	f043 0204 	orr.w	r2, r3, #4
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f7ff fe10 	bl	8001b6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f4c:	bf00      	nop
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f64:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <__NVIC_SetPriorityGrouping+0x44>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f70:	4013      	ands	r3, r2
 8001f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f86:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <__NVIC_SetPriorityGrouping+0x44>)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	60d3      	str	r3, [r2, #12]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa0:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	0a1b      	lsrs	r3, r3, #8
 8001fa6:	f003 0307 	and.w	r3, r3, #7
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	db0b      	blt.n	8001fe2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	f003 021f 	and.w	r2, r3, #31
 8001fd0:	4906      	ldr	r1, [pc, #24]	; (8001fec <__NVIC_EnableIRQ+0x34>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	2001      	movs	r0, #1
 8001fda:	fa00 f202 	lsl.w	r2, r0, r2
 8001fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr
 8001fec:	e000e100 	.word	0xe000e100

08001ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	6039      	str	r1, [r7, #0]
 8001ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002000:	2b00      	cmp	r3, #0
 8002002:	db0a      	blt.n	800201a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	b2da      	uxtb	r2, r3
 8002008:	490c      	ldr	r1, [pc, #48]	; (800203c <__NVIC_SetPriority+0x4c>)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	0112      	lsls	r2, r2, #4
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	440b      	add	r3, r1
 8002014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002018:	e00a      	b.n	8002030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	b2da      	uxtb	r2, r3
 800201e:	4908      	ldr	r1, [pc, #32]	; (8002040 <__NVIC_SetPriority+0x50>)
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	3b04      	subs	r3, #4
 8002028:	0112      	lsls	r2, r2, #4
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	440b      	add	r3, r1
 800202e:	761a      	strb	r2, [r3, #24]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000e100 	.word	0xe000e100
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002044:	b480      	push	{r7}
 8002046:	b089      	sub	sp, #36	; 0x24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f1c3 0307 	rsb	r3, r3, #7
 800205e:	2b04      	cmp	r3, #4
 8002060:	bf28      	it	cs
 8002062:	2304      	movcs	r3, #4
 8002064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3304      	adds	r3, #4
 800206a:	2b06      	cmp	r3, #6
 800206c:	d902      	bls.n	8002074 <NVIC_EncodePriority+0x30>
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3b03      	subs	r3, #3
 8002072:	e000      	b.n	8002076 <NVIC_EncodePriority+0x32>
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002078:	f04f 32ff 	mov.w	r2, #4294967295
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43da      	mvns	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	401a      	ands	r2, r3
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800208c:	f04f 31ff 	mov.w	r1, #4294967295
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	43d9      	mvns	r1, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800209c:	4313      	orrs	r3, r2
         );
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3724      	adds	r7, #36	; 0x24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr

080020a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020b8:	d301      	bcc.n	80020be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ba:	2301      	movs	r3, #1
 80020bc:	e00f      	b.n	80020de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020be:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <SysTick_Config+0x40>)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020c6:	210f      	movs	r1, #15
 80020c8:	f04f 30ff 	mov.w	r0, #4294967295
 80020cc:	f7ff ff90 	bl	8001ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <SysTick_Config+0x40>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020d6:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <SysTick_Config+0x40>)
 80020d8:	2207      	movs	r2, #7
 80020da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	e000e010 	.word	0xe000e010

080020ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff ff2d 	bl	8001f54 <__NVIC_SetPriorityGrouping>
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002102:	b580      	push	{r7, lr}
 8002104:	b086      	sub	sp, #24
 8002106:	af00      	add	r7, sp, #0
 8002108:	4603      	mov	r3, r0
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	607a      	str	r2, [r7, #4]
 800210e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002114:	f7ff ff42 	bl	8001f9c <__NVIC_GetPriorityGrouping>
 8002118:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68b9      	ldr	r1, [r7, #8]
 800211e:	6978      	ldr	r0, [r7, #20]
 8002120:	f7ff ff90 	bl	8002044 <NVIC_EncodePriority>
 8002124:	4602      	mov	r2, r0
 8002126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800212a:	4611      	mov	r1, r2
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff ff5f 	bl	8001ff0 <__NVIC_SetPriority>
}
 8002132:	bf00      	nop
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	4603      	mov	r3, r0
 8002142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff ff35 	bl	8001fb8 <__NVIC_EnableIRQ>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7ff ffa2 	bl	80020a8 <SysTick_Config>
 8002164:	4603      	mov	r3, r0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002178:	2300      	movs	r3, #0
 800217a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e043      	b.n	800220e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	4b22      	ldr	r3, [pc, #136]	; (8002218 <HAL_DMA_Init+0xa8>)
 800218e:	4413      	add	r3, r2
 8002190:	4a22      	ldr	r2, [pc, #136]	; (800221c <HAL_DMA_Init+0xac>)
 8002192:	fba2 2303 	umull	r2, r3, r2, r3
 8002196:	091b      	lsrs	r3, r3, #4
 8002198:	009a      	lsls	r2, r3, #2
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a1f      	ldr	r2, [pc, #124]	; (8002220 <HAL_DMA_Init+0xb0>)
 80021a2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2202      	movs	r2, #2
 80021a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80021ba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80021be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80021c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr
 8002218:	bffdfff8 	.word	0xbffdfff8
 800221c:	cccccccd 	.word	0xcccccccd
 8002220:	40020000 	.word	0x40020000

08002224 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002232:	2300      	movs	r3, #0
 8002234:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f893 3020 	ldrb.w	r3, [r3, #32]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d101      	bne.n	8002244 <HAL_DMA_Start_IT+0x20>
 8002240:	2302      	movs	r3, #2
 8002242:	e04a      	b.n	80022da <HAL_DMA_Start_IT+0xb6>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002252:	2b01      	cmp	r3, #1
 8002254:	d13a      	bne.n	80022cc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2202      	movs	r2, #2
 800225a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0201 	bic.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 f938 	bl	80024f0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002284:	2b00      	cmp	r3, #0
 8002286:	d008      	beq.n	800229a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 020e 	orr.w	r2, r2, #14
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	e00f      	b.n	80022ba <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0204 	bic.w	r2, r2, #4
 80022a8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f042 020a 	orr.w	r2, r2, #10
 80022b8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 0201 	orr.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	e005      	b.n	80022d8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80022d4:	2302      	movs	r3, #2
 80022d6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80022d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	2204      	movs	r2, #4
 8002302:	409a      	lsls	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4013      	ands	r3, r2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d04f      	beq.n	80023ac <HAL_DMA_IRQHandler+0xc8>
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	2b00      	cmp	r3, #0
 8002314:	d04a      	beq.n	80023ac <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0320 	and.w	r3, r3, #32
 8002320:	2b00      	cmp	r3, #0
 8002322:	d107      	bne.n	8002334 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0204 	bic.w	r2, r2, #4
 8002332:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a66      	ldr	r2, [pc, #408]	; (80024d4 <HAL_DMA_IRQHandler+0x1f0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d029      	beq.n	8002392 <HAL_DMA_IRQHandler+0xae>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a65      	ldr	r2, [pc, #404]	; (80024d8 <HAL_DMA_IRQHandler+0x1f4>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d022      	beq.n	800238e <HAL_DMA_IRQHandler+0xaa>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a63      	ldr	r2, [pc, #396]	; (80024dc <HAL_DMA_IRQHandler+0x1f8>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d01a      	beq.n	8002388 <HAL_DMA_IRQHandler+0xa4>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a62      	ldr	r2, [pc, #392]	; (80024e0 <HAL_DMA_IRQHandler+0x1fc>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d012      	beq.n	8002382 <HAL_DMA_IRQHandler+0x9e>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a60      	ldr	r2, [pc, #384]	; (80024e4 <HAL_DMA_IRQHandler+0x200>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d00a      	beq.n	800237c <HAL_DMA_IRQHandler+0x98>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a5f      	ldr	r2, [pc, #380]	; (80024e8 <HAL_DMA_IRQHandler+0x204>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d102      	bne.n	8002376 <HAL_DMA_IRQHandler+0x92>
 8002370:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002374:	e00e      	b.n	8002394 <HAL_DMA_IRQHandler+0xb0>
 8002376:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800237a:	e00b      	b.n	8002394 <HAL_DMA_IRQHandler+0xb0>
 800237c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002380:	e008      	b.n	8002394 <HAL_DMA_IRQHandler+0xb0>
 8002382:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002386:	e005      	b.n	8002394 <HAL_DMA_IRQHandler+0xb0>
 8002388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800238c:	e002      	b.n	8002394 <HAL_DMA_IRQHandler+0xb0>
 800238e:	2340      	movs	r3, #64	; 0x40
 8002390:	e000      	b.n	8002394 <HAL_DMA_IRQHandler+0xb0>
 8002392:	2304      	movs	r3, #4
 8002394:	4a55      	ldr	r2, [pc, #340]	; (80024ec <HAL_DMA_IRQHandler+0x208>)
 8002396:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 8094 	beq.w	80024ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80023aa:	e08e      	b.n	80024ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	2202      	movs	r2, #2
 80023b2:	409a      	lsls	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4013      	ands	r3, r2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d056      	beq.n	800246a <HAL_DMA_IRQHandler+0x186>
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d051      	beq.n	800246a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0320 	and.w	r3, r3, #32
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10b      	bne.n	80023ec <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 020a 	bic.w	r2, r2, #10
 80023e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a38      	ldr	r2, [pc, #224]	; (80024d4 <HAL_DMA_IRQHandler+0x1f0>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d029      	beq.n	800244a <HAL_DMA_IRQHandler+0x166>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a37      	ldr	r2, [pc, #220]	; (80024d8 <HAL_DMA_IRQHandler+0x1f4>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d022      	beq.n	8002446 <HAL_DMA_IRQHandler+0x162>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a35      	ldr	r2, [pc, #212]	; (80024dc <HAL_DMA_IRQHandler+0x1f8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d01a      	beq.n	8002440 <HAL_DMA_IRQHandler+0x15c>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a34      	ldr	r2, [pc, #208]	; (80024e0 <HAL_DMA_IRQHandler+0x1fc>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d012      	beq.n	800243a <HAL_DMA_IRQHandler+0x156>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a32      	ldr	r2, [pc, #200]	; (80024e4 <HAL_DMA_IRQHandler+0x200>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d00a      	beq.n	8002434 <HAL_DMA_IRQHandler+0x150>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a31      	ldr	r2, [pc, #196]	; (80024e8 <HAL_DMA_IRQHandler+0x204>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d102      	bne.n	800242e <HAL_DMA_IRQHandler+0x14a>
 8002428:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800242c:	e00e      	b.n	800244c <HAL_DMA_IRQHandler+0x168>
 800242e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002432:	e00b      	b.n	800244c <HAL_DMA_IRQHandler+0x168>
 8002434:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002438:	e008      	b.n	800244c <HAL_DMA_IRQHandler+0x168>
 800243a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800243e:	e005      	b.n	800244c <HAL_DMA_IRQHandler+0x168>
 8002440:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002444:	e002      	b.n	800244c <HAL_DMA_IRQHandler+0x168>
 8002446:	2320      	movs	r3, #32
 8002448:	e000      	b.n	800244c <HAL_DMA_IRQHandler+0x168>
 800244a:	2302      	movs	r3, #2
 800244c:	4a27      	ldr	r2, [pc, #156]	; (80024ec <HAL_DMA_IRQHandler+0x208>)
 800244e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245c:	2b00      	cmp	r3, #0
 800245e:	d034      	beq.n	80024ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002468:	e02f      	b.n	80024ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	2208      	movs	r2, #8
 8002470:	409a      	lsls	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	4013      	ands	r3, r2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d028      	beq.n	80024cc <HAL_DMA_IRQHandler+0x1e8>
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b00      	cmp	r3, #0
 8002482:	d023      	beq.n	80024cc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 020e 	bic.w	r2, r2, #14
 8002492:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249c:	2101      	movs	r1, #1
 800249e:	fa01 f202 	lsl.w	r2, r1, r2
 80024a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d004      	beq.n	80024cc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	4798      	blx	r3
    }
  }
  return;
 80024ca:	bf00      	nop
 80024cc:	bf00      	nop
}
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40020008 	.word	0x40020008
 80024d8:	4002001c 	.word	0x4002001c
 80024dc:	40020030 	.word	0x40020030
 80024e0:	40020044 	.word	0x40020044
 80024e4:	40020058 	.word	0x40020058
 80024e8:	4002006c 	.word	0x4002006c
 80024ec:	40020000 	.word	0x40020000

080024f0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
 80024fc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002506:	2101      	movs	r1, #1
 8002508:	fa01 f202 	lsl.w	r2, r1, r2
 800250c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b10      	cmp	r3, #16
 800251c:	d108      	bne.n	8002530 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800252e:	e007      	b.n	8002540 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	60da      	str	r2, [r3, #12]
}
 8002540:	bf00      	nop
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr
	...

0800254c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800254c:	b480      	push	{r7}
 800254e:	b08b      	sub	sp, #44	; 0x2c
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002556:	2300      	movs	r3, #0
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800255a:	2300      	movs	r3, #0
 800255c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800255e:	e127      	b.n	80027b0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002560:	2201      	movs	r2, #1
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	69fa      	ldr	r2, [r7, #28]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	429a      	cmp	r2, r3
 800257a:	f040 8116 	bne.w	80027aa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b12      	cmp	r3, #18
 8002584:	d034      	beq.n	80025f0 <HAL_GPIO_Init+0xa4>
 8002586:	2b12      	cmp	r3, #18
 8002588:	d80d      	bhi.n	80025a6 <HAL_GPIO_Init+0x5a>
 800258a:	2b02      	cmp	r3, #2
 800258c:	d02b      	beq.n	80025e6 <HAL_GPIO_Init+0x9a>
 800258e:	2b02      	cmp	r3, #2
 8002590:	d804      	bhi.n	800259c <HAL_GPIO_Init+0x50>
 8002592:	2b00      	cmp	r3, #0
 8002594:	d031      	beq.n	80025fa <HAL_GPIO_Init+0xae>
 8002596:	2b01      	cmp	r3, #1
 8002598:	d01c      	beq.n	80025d4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800259a:	e048      	b.n	800262e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800259c:	2b03      	cmp	r3, #3
 800259e:	d043      	beq.n	8002628 <HAL_GPIO_Init+0xdc>
 80025a0:	2b11      	cmp	r3, #17
 80025a2:	d01b      	beq.n	80025dc <HAL_GPIO_Init+0x90>
          break;
 80025a4:	e043      	b.n	800262e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80025a6:	4a89      	ldr	r2, [pc, #548]	; (80027cc <HAL_GPIO_Init+0x280>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d026      	beq.n	80025fa <HAL_GPIO_Init+0xae>
 80025ac:	4a87      	ldr	r2, [pc, #540]	; (80027cc <HAL_GPIO_Init+0x280>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d806      	bhi.n	80025c0 <HAL_GPIO_Init+0x74>
 80025b2:	4a87      	ldr	r2, [pc, #540]	; (80027d0 <HAL_GPIO_Init+0x284>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d020      	beq.n	80025fa <HAL_GPIO_Init+0xae>
 80025b8:	4a86      	ldr	r2, [pc, #536]	; (80027d4 <HAL_GPIO_Init+0x288>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d01d      	beq.n	80025fa <HAL_GPIO_Init+0xae>
          break;
 80025be:	e036      	b.n	800262e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80025c0:	4a85      	ldr	r2, [pc, #532]	; (80027d8 <HAL_GPIO_Init+0x28c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d019      	beq.n	80025fa <HAL_GPIO_Init+0xae>
 80025c6:	4a85      	ldr	r2, [pc, #532]	; (80027dc <HAL_GPIO_Init+0x290>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d016      	beq.n	80025fa <HAL_GPIO_Init+0xae>
 80025cc:	4a84      	ldr	r2, [pc, #528]	; (80027e0 <HAL_GPIO_Init+0x294>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d013      	beq.n	80025fa <HAL_GPIO_Init+0xae>
          break;
 80025d2:	e02c      	b.n	800262e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	623b      	str	r3, [r7, #32]
          break;
 80025da:	e028      	b.n	800262e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	3304      	adds	r3, #4
 80025e2:	623b      	str	r3, [r7, #32]
          break;
 80025e4:	e023      	b.n	800262e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	3308      	adds	r3, #8
 80025ec:	623b      	str	r3, [r7, #32]
          break;
 80025ee:	e01e      	b.n	800262e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	330c      	adds	r3, #12
 80025f6:	623b      	str	r3, [r7, #32]
          break;
 80025f8:	e019      	b.n	800262e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d102      	bne.n	8002608 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002602:	2304      	movs	r3, #4
 8002604:	623b      	str	r3, [r7, #32]
          break;
 8002606:	e012      	b.n	800262e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d105      	bne.n	800261c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002610:	2308      	movs	r3, #8
 8002612:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69fa      	ldr	r2, [r7, #28]
 8002618:	611a      	str	r2, [r3, #16]
          break;
 800261a:	e008      	b.n	800262e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800261c:	2308      	movs	r3, #8
 800261e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69fa      	ldr	r2, [r7, #28]
 8002624:	615a      	str	r2, [r3, #20]
          break;
 8002626:	e002      	b.n	800262e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002628:	2300      	movs	r3, #0
 800262a:	623b      	str	r3, [r7, #32]
          break;
 800262c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	2bff      	cmp	r3, #255	; 0xff
 8002632:	d801      	bhi.n	8002638 <HAL_GPIO_Init+0xec>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	e001      	b.n	800263c <HAL_GPIO_Init+0xf0>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3304      	adds	r3, #4
 800263c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	2bff      	cmp	r3, #255	; 0xff
 8002642:	d802      	bhi.n	800264a <HAL_GPIO_Init+0xfe>
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	e002      	b.n	8002650 <HAL_GPIO_Init+0x104>
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	3b08      	subs	r3, #8
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	210f      	movs	r1, #15
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	fa01 f303 	lsl.w	r3, r1, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	401a      	ands	r2, r3
 8002662:	6a39      	ldr	r1, [r7, #32]
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	fa01 f303 	lsl.w	r3, r1, r3
 800266a:	431a      	orrs	r2, r3
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 8096 	beq.w	80027aa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800267e:	4b59      	ldr	r3, [pc, #356]	; (80027e4 <HAL_GPIO_Init+0x298>)
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	4a58      	ldr	r2, [pc, #352]	; (80027e4 <HAL_GPIO_Init+0x298>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	6193      	str	r3, [r2, #24]
 800268a:	4b56      	ldr	r3, [pc, #344]	; (80027e4 <HAL_GPIO_Init+0x298>)
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002696:	4a54      	ldr	r2, [pc, #336]	; (80027e8 <HAL_GPIO_Init+0x29c>)
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	089b      	lsrs	r3, r3, #2
 800269c:	3302      	adds	r3, #2
 800269e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	220f      	movs	r2, #15
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43db      	mvns	r3, r3
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	4013      	ands	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a4b      	ldr	r2, [pc, #300]	; (80027ec <HAL_GPIO_Init+0x2a0>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d013      	beq.n	80026ea <HAL_GPIO_Init+0x19e>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a4a      	ldr	r2, [pc, #296]	; (80027f0 <HAL_GPIO_Init+0x2a4>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00d      	beq.n	80026e6 <HAL_GPIO_Init+0x19a>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a49      	ldr	r2, [pc, #292]	; (80027f4 <HAL_GPIO_Init+0x2a8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d007      	beq.n	80026e2 <HAL_GPIO_Init+0x196>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a48      	ldr	r2, [pc, #288]	; (80027f8 <HAL_GPIO_Init+0x2ac>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d101      	bne.n	80026de <HAL_GPIO_Init+0x192>
 80026da:	2303      	movs	r3, #3
 80026dc:	e006      	b.n	80026ec <HAL_GPIO_Init+0x1a0>
 80026de:	2304      	movs	r3, #4
 80026e0:	e004      	b.n	80026ec <HAL_GPIO_Init+0x1a0>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e002      	b.n	80026ec <HAL_GPIO_Init+0x1a0>
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <HAL_GPIO_Init+0x1a0>
 80026ea:	2300      	movs	r3, #0
 80026ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ee:	f002 0203 	and.w	r2, r2, #3
 80026f2:	0092      	lsls	r2, r2, #2
 80026f4:	4093      	lsls	r3, r2
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026fc:	493a      	ldr	r1, [pc, #232]	; (80027e8 <HAL_GPIO_Init+0x29c>)
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	089b      	lsrs	r3, r3, #2
 8002702:	3302      	adds	r3, #2
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d006      	beq.n	8002724 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002716:	4b39      	ldr	r3, [pc, #228]	; (80027fc <HAL_GPIO_Init+0x2b0>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	4938      	ldr	r1, [pc, #224]	; (80027fc <HAL_GPIO_Init+0x2b0>)
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	4313      	orrs	r3, r2
 8002720:	600b      	str	r3, [r1, #0]
 8002722:	e006      	b.n	8002732 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002724:	4b35      	ldr	r3, [pc, #212]	; (80027fc <HAL_GPIO_Init+0x2b0>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	43db      	mvns	r3, r3
 800272c:	4933      	ldr	r1, [pc, #204]	; (80027fc <HAL_GPIO_Init+0x2b0>)
 800272e:	4013      	ands	r3, r2
 8002730:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d006      	beq.n	800274c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800273e:	4b2f      	ldr	r3, [pc, #188]	; (80027fc <HAL_GPIO_Init+0x2b0>)
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	492e      	ldr	r1, [pc, #184]	; (80027fc <HAL_GPIO_Init+0x2b0>)
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	4313      	orrs	r3, r2
 8002748:	604b      	str	r3, [r1, #4]
 800274a:	e006      	b.n	800275a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800274c:	4b2b      	ldr	r3, [pc, #172]	; (80027fc <HAL_GPIO_Init+0x2b0>)
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	43db      	mvns	r3, r3
 8002754:	4929      	ldr	r1, [pc, #164]	; (80027fc <HAL_GPIO_Init+0x2b0>)
 8002756:	4013      	ands	r3, r2
 8002758:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d006      	beq.n	8002774 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002766:	4b25      	ldr	r3, [pc, #148]	; (80027fc <HAL_GPIO_Init+0x2b0>)
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	4924      	ldr	r1, [pc, #144]	; (80027fc <HAL_GPIO_Init+0x2b0>)
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	4313      	orrs	r3, r2
 8002770:	608b      	str	r3, [r1, #8]
 8002772:	e006      	b.n	8002782 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002774:	4b21      	ldr	r3, [pc, #132]	; (80027fc <HAL_GPIO_Init+0x2b0>)
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	43db      	mvns	r3, r3
 800277c:	491f      	ldr	r1, [pc, #124]	; (80027fc <HAL_GPIO_Init+0x2b0>)
 800277e:	4013      	ands	r3, r2
 8002780:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d006      	beq.n	800279c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800278e:	4b1b      	ldr	r3, [pc, #108]	; (80027fc <HAL_GPIO_Init+0x2b0>)
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	491a      	ldr	r1, [pc, #104]	; (80027fc <HAL_GPIO_Init+0x2b0>)
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	4313      	orrs	r3, r2
 8002798:	60cb      	str	r3, [r1, #12]
 800279a:	e006      	b.n	80027aa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800279c:	4b17      	ldr	r3, [pc, #92]	; (80027fc <HAL_GPIO_Init+0x2b0>)
 800279e:	68da      	ldr	r2, [r3, #12]
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	43db      	mvns	r3, r3
 80027a4:	4915      	ldr	r1, [pc, #84]	; (80027fc <HAL_GPIO_Init+0x2b0>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	3301      	adds	r3, #1
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f47f aed0 	bne.w	8002560 <HAL_GPIO_Init+0x14>
  }
}
 80027c0:	bf00      	nop
 80027c2:	372c      	adds	r7, #44	; 0x2c
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	10210000 	.word	0x10210000
 80027d0:	10110000 	.word	0x10110000
 80027d4:	10120000 	.word	0x10120000
 80027d8:	10310000 	.word	0x10310000
 80027dc:	10320000 	.word	0x10320000
 80027e0:	10220000 	.word	0x10220000
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40010000 	.word	0x40010000
 80027ec:	40010800 	.word	0x40010800
 80027f0:	40010c00 	.word	0x40010c00
 80027f4:	40011000 	.word	0x40011000
 80027f8:	40011400 	.word	0x40011400
 80027fc:	40010400 	.word	0x40010400

08002800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	807b      	strh	r3, [r7, #2]
 800280c:	4613      	mov	r3, r2
 800280e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002810:	787b      	ldrb	r3, [r7, #1]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002816:	887a      	ldrh	r2, [r7, #2]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800281c:	e003      	b.n	8002826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800281e:	887b      	ldrh	r3, [r7, #2]
 8002820:	041a      	lsls	r2, r3, #16
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	611a      	str	r2, [r3, #16]
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002842:	887a      	ldrh	r2, [r7, #2]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4013      	ands	r3, r2
 8002848:	041a      	lsls	r2, r3, #16
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	43d9      	mvns	r1, r3
 800284e:	887b      	ldrh	r3, [r7, #2]
 8002850:	400b      	ands	r3, r1
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	611a      	str	r2, [r3, #16]
}
 8002858:	bf00      	nop
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr
	...

08002864 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800286e:	4b08      	ldr	r3, [pc, #32]	; (8002890 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002870:	695a      	ldr	r2, [r3, #20]
 8002872:	88fb      	ldrh	r3, [r7, #6]
 8002874:	4013      	ands	r3, r2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d006      	beq.n	8002888 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800287a:	4a05      	ldr	r2, [pc, #20]	; (8002890 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800287c:	88fb      	ldrh	r3, [r7, #6]
 800287e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002880:	88fb      	ldrh	r3, [r7, #6]
 8002882:	4618      	mov	r0, r3
 8002884:	f000 f806 	bl	8002894 <HAL_GPIO_EXTI_Callback>
  }
}
 8002888:	bf00      	nop
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40010400 	.word	0x40010400

08002894 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e26c      	b.n	8002d94 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 8087 	beq.w	80029d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028c8:	4b92      	ldr	r3, [pc, #584]	; (8002b14 <HAL_RCC_OscConfig+0x26c>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 030c 	and.w	r3, r3, #12
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d00c      	beq.n	80028ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028d4:	4b8f      	ldr	r3, [pc, #572]	; (8002b14 <HAL_RCC_OscConfig+0x26c>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 030c 	and.w	r3, r3, #12
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d112      	bne.n	8002906 <HAL_RCC_OscConfig+0x5e>
 80028e0:	4b8c      	ldr	r3, [pc, #560]	; (8002b14 <HAL_RCC_OscConfig+0x26c>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ec:	d10b      	bne.n	8002906 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ee:	4b89      	ldr	r3, [pc, #548]	; (8002b14 <HAL_RCC_OscConfig+0x26c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d06c      	beq.n	80029d4 <HAL_RCC_OscConfig+0x12c>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d168      	bne.n	80029d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e246      	b.n	8002d94 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800290e:	d106      	bne.n	800291e <HAL_RCC_OscConfig+0x76>
 8002910:	4b80      	ldr	r3, [pc, #512]	; (8002b14 <HAL_RCC_OscConfig+0x26c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a7f      	ldr	r2, [pc, #508]	; (8002b14 <HAL_RCC_OscConfig+0x26c>)
 8002916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	e02e      	b.n	800297c <HAL_RCC_OscConfig+0xd4>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10c      	bne.n	8002940 <HAL_RCC_OscConfig+0x98>
 8002926:	4b7b      	ldr	r3, [pc, #492]	; (8002b14 <HAL_RCC_OscConfig+0x26c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a7a      	ldr	r2, [pc, #488]	; (8002b14 <HAL_RCC_OscConfig+0x26c>)
 800292c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	4b78      	ldr	r3, [pc, #480]	; (8002b14 <HAL_RCC_OscConfig+0x26c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a77      	ldr	r2, [pc, #476]	; (8002b14 <HAL_RCC_OscConfig+0x26c>)
 8002938:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	e01d      	b.n	800297c <HAL_RCC_OscConfig+0xd4>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002948:	d10c      	bne.n	8002964 <HAL_RCC_OscConfig+0xbc>
 800294a:	4b72      	ldr	r3, [pc, #456]	; (8002b14 <HAL_RCC_OscConfig+0x26c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a71      	ldr	r2, [pc, #452]	; (8002b14 <HAL_RCC_OscConfig+0x26c>)
 8002950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	4b6f      	ldr	r3, [pc, #444]	; (8002b14 <HAL_RCC_OscConfig+0x26c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a6e      	ldr	r2, [pc, #440]	; (8002b14 <HAL_RCC_OscConfig+0x26c>)
 800295c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	e00b      	b.n	800297c <HAL_RCC_OscConfig+0xd4>
 8002964:	4b6b      	ldr	r3, [pc, #428]	; (8002b14 <HAL_RCC_OscConfig+0x26c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a6a      	ldr	r2, [pc, #424]	; (8002b14 <HAL_RCC_OscConfig+0x26c>)
 800296a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	4b68      	ldr	r3, [pc, #416]	; (8002b14 <HAL_RCC_OscConfig+0x26c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a67      	ldr	r2, [pc, #412]	; (8002b14 <HAL_RCC_OscConfig+0x26c>)
 8002976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800297a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d013      	beq.n	80029ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002984:	f7fe ff10 	bl	80017a8 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800298c:	f7fe ff0c 	bl	80017a8 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b64      	cmp	r3, #100	; 0x64
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e1fa      	b.n	8002d94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299e:	4b5d      	ldr	r3, [pc, #372]	; (8002b14 <HAL_RCC_OscConfig+0x26c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f0      	beq.n	800298c <HAL_RCC_OscConfig+0xe4>
 80029aa:	e014      	b.n	80029d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ac:	f7fe fefc 	bl	80017a8 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029b4:	f7fe fef8 	bl	80017a8 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b64      	cmp	r3, #100	; 0x64
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e1e6      	b.n	8002d94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029c6:	4b53      	ldr	r3, [pc, #332]	; (8002b14 <HAL_RCC_OscConfig+0x26c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x10c>
 80029d2:	e000      	b.n	80029d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d063      	beq.n	8002aaa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029e2:	4b4c      	ldr	r3, [pc, #304]	; (8002b14 <HAL_RCC_OscConfig+0x26c>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f003 030c 	and.w	r3, r3, #12
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00b      	beq.n	8002a06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029ee:	4b49      	ldr	r3, [pc, #292]	; (8002b14 <HAL_RCC_OscConfig+0x26c>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f003 030c 	and.w	r3, r3, #12
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d11c      	bne.n	8002a34 <HAL_RCC_OscConfig+0x18c>
 80029fa:	4b46      	ldr	r3, [pc, #280]	; (8002b14 <HAL_RCC_OscConfig+0x26c>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d116      	bne.n	8002a34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a06:	4b43      	ldr	r3, [pc, #268]	; (8002b14 <HAL_RCC_OscConfig+0x26c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d005      	beq.n	8002a1e <HAL_RCC_OscConfig+0x176>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d001      	beq.n	8002a1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e1ba      	b.n	8002d94 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1e:	4b3d      	ldr	r3, [pc, #244]	; (8002b14 <HAL_RCC_OscConfig+0x26c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	4939      	ldr	r1, [pc, #228]	; (8002b14 <HAL_RCC_OscConfig+0x26c>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a32:	e03a      	b.n	8002aaa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d020      	beq.n	8002a7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a3c:	4b36      	ldr	r3, [pc, #216]	; (8002b18 <HAL_RCC_OscConfig+0x270>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a42:	f7fe feb1 	bl	80017a8 <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a4a:	f7fe fead 	bl	80017a8 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e19b      	b.n	8002d94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5c:	4b2d      	ldr	r3, [pc, #180]	; (8002b14 <HAL_RCC_OscConfig+0x26c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0f0      	beq.n	8002a4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a68:	4b2a      	ldr	r3, [pc, #168]	; (8002b14 <HAL_RCC_OscConfig+0x26c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	4927      	ldr	r1, [pc, #156]	; (8002b14 <HAL_RCC_OscConfig+0x26c>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	600b      	str	r3, [r1, #0]
 8002a7c:	e015      	b.n	8002aaa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a7e:	4b26      	ldr	r3, [pc, #152]	; (8002b18 <HAL_RCC_OscConfig+0x270>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7fe fe90 	bl	80017a8 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a8c:	f7fe fe8c 	bl	80017a8 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e17a      	b.n	8002d94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a9e:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d03a      	beq.n	8002b2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d019      	beq.n	8002af2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002abe:	4b17      	ldr	r3, [pc, #92]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac4:	f7fe fe70 	bl	80017a8 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002acc:	f7fe fe6c 	bl	80017a8 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e15a      	b.n	8002d94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ade:	4b0d      	ldr	r3, [pc, #52]	; (8002b14 <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f0      	beq.n	8002acc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002aea:	2001      	movs	r0, #1
 8002aec:	f000 fada 	bl	80030a4 <RCC_Delay>
 8002af0:	e01c      	b.n	8002b2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002af2:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <HAL_RCC_OscConfig+0x274>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af8:	f7fe fe56 	bl	80017a8 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002afe:	e00f      	b.n	8002b20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b00:	f7fe fe52 	bl	80017a8 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d908      	bls.n	8002b20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e140      	b.n	8002d94 <HAL_RCC_OscConfig+0x4ec>
 8002b12:	bf00      	nop
 8002b14:	40021000 	.word	0x40021000
 8002b18:	42420000 	.word	0x42420000
 8002b1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b20:	4b9e      	ldr	r3, [pc, #632]	; (8002d9c <HAL_RCC_OscConfig+0x4f4>)
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1e9      	bne.n	8002b00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 80a6 	beq.w	8002c86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b3e:	4b97      	ldr	r3, [pc, #604]	; (8002d9c <HAL_RCC_OscConfig+0x4f4>)
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10d      	bne.n	8002b66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b4a:	4b94      	ldr	r3, [pc, #592]	; (8002d9c <HAL_RCC_OscConfig+0x4f4>)
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	4a93      	ldr	r2, [pc, #588]	; (8002d9c <HAL_RCC_OscConfig+0x4f4>)
 8002b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b54:	61d3      	str	r3, [r2, #28]
 8002b56:	4b91      	ldr	r3, [pc, #580]	; (8002d9c <HAL_RCC_OscConfig+0x4f4>)
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5e:	60bb      	str	r3, [r7, #8]
 8002b60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b62:	2301      	movs	r3, #1
 8002b64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b66:	4b8e      	ldr	r3, [pc, #568]	; (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d118      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b72:	4b8b      	ldr	r3, [pc, #556]	; (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a8a      	ldr	r2, [pc, #552]	; (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b7e:	f7fe fe13 	bl	80017a8 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b86:	f7fe fe0f 	bl	80017a8 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b64      	cmp	r3, #100	; 0x64
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e0fd      	b.n	8002d94 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b98:	4b81      	ldr	r3, [pc, #516]	; (8002da0 <HAL_RCC_OscConfig+0x4f8>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d0f0      	beq.n	8002b86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d106      	bne.n	8002bba <HAL_RCC_OscConfig+0x312>
 8002bac:	4b7b      	ldr	r3, [pc, #492]	; (8002d9c <HAL_RCC_OscConfig+0x4f4>)
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	4a7a      	ldr	r2, [pc, #488]	; (8002d9c <HAL_RCC_OscConfig+0x4f4>)
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	6213      	str	r3, [r2, #32]
 8002bb8:	e02d      	b.n	8002c16 <HAL_RCC_OscConfig+0x36e>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10c      	bne.n	8002bdc <HAL_RCC_OscConfig+0x334>
 8002bc2:	4b76      	ldr	r3, [pc, #472]	; (8002d9c <HAL_RCC_OscConfig+0x4f4>)
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	4a75      	ldr	r2, [pc, #468]	; (8002d9c <HAL_RCC_OscConfig+0x4f4>)
 8002bc8:	f023 0301 	bic.w	r3, r3, #1
 8002bcc:	6213      	str	r3, [r2, #32]
 8002bce:	4b73      	ldr	r3, [pc, #460]	; (8002d9c <HAL_RCC_OscConfig+0x4f4>)
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	4a72      	ldr	r2, [pc, #456]	; (8002d9c <HAL_RCC_OscConfig+0x4f4>)
 8002bd4:	f023 0304 	bic.w	r3, r3, #4
 8002bd8:	6213      	str	r3, [r2, #32]
 8002bda:	e01c      	b.n	8002c16 <HAL_RCC_OscConfig+0x36e>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	2b05      	cmp	r3, #5
 8002be2:	d10c      	bne.n	8002bfe <HAL_RCC_OscConfig+0x356>
 8002be4:	4b6d      	ldr	r3, [pc, #436]	; (8002d9c <HAL_RCC_OscConfig+0x4f4>)
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	4a6c      	ldr	r2, [pc, #432]	; (8002d9c <HAL_RCC_OscConfig+0x4f4>)
 8002bea:	f043 0304 	orr.w	r3, r3, #4
 8002bee:	6213      	str	r3, [r2, #32]
 8002bf0:	4b6a      	ldr	r3, [pc, #424]	; (8002d9c <HAL_RCC_OscConfig+0x4f4>)
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	4a69      	ldr	r2, [pc, #420]	; (8002d9c <HAL_RCC_OscConfig+0x4f4>)
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	6213      	str	r3, [r2, #32]
 8002bfc:	e00b      	b.n	8002c16 <HAL_RCC_OscConfig+0x36e>
 8002bfe:	4b67      	ldr	r3, [pc, #412]	; (8002d9c <HAL_RCC_OscConfig+0x4f4>)
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	4a66      	ldr	r2, [pc, #408]	; (8002d9c <HAL_RCC_OscConfig+0x4f4>)
 8002c04:	f023 0301 	bic.w	r3, r3, #1
 8002c08:	6213      	str	r3, [r2, #32]
 8002c0a:	4b64      	ldr	r3, [pc, #400]	; (8002d9c <HAL_RCC_OscConfig+0x4f4>)
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	4a63      	ldr	r2, [pc, #396]	; (8002d9c <HAL_RCC_OscConfig+0x4f4>)
 8002c10:	f023 0304 	bic.w	r3, r3, #4
 8002c14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d015      	beq.n	8002c4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c1e:	f7fe fdc3 	bl	80017a8 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c24:	e00a      	b.n	8002c3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c26:	f7fe fdbf 	bl	80017a8 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e0ab      	b.n	8002d94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3c:	4b57      	ldr	r3, [pc, #348]	; (8002d9c <HAL_RCC_OscConfig+0x4f4>)
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0ee      	beq.n	8002c26 <HAL_RCC_OscConfig+0x37e>
 8002c48:	e014      	b.n	8002c74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4a:	f7fe fdad 	bl	80017a8 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c50:	e00a      	b.n	8002c68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c52:	f7fe fda9 	bl	80017a8 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e095      	b.n	8002d94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c68:	4b4c      	ldr	r3, [pc, #304]	; (8002d9c <HAL_RCC_OscConfig+0x4f4>)
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1ee      	bne.n	8002c52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c74:	7dfb      	ldrb	r3, [r7, #23]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d105      	bne.n	8002c86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c7a:	4b48      	ldr	r3, [pc, #288]	; (8002d9c <HAL_RCC_OscConfig+0x4f4>)
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	4a47      	ldr	r2, [pc, #284]	; (8002d9c <HAL_RCC_OscConfig+0x4f4>)
 8002c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 8081 	beq.w	8002d92 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c90:	4b42      	ldr	r3, [pc, #264]	; (8002d9c <HAL_RCC_OscConfig+0x4f4>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 030c 	and.w	r3, r3, #12
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	d061      	beq.n	8002d60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d146      	bne.n	8002d32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca4:	4b3f      	ldr	r3, [pc, #252]	; (8002da4 <HAL_RCC_OscConfig+0x4fc>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002caa:	f7fe fd7d 	bl	80017a8 <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb2:	f7fe fd79 	bl	80017a8 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e067      	b.n	8002d94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cc4:	4b35      	ldr	r3, [pc, #212]	; (8002d9c <HAL_RCC_OscConfig+0x4f4>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1f0      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd8:	d108      	bne.n	8002cec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cda:	4b30      	ldr	r3, [pc, #192]	; (8002d9c <HAL_RCC_OscConfig+0x4f4>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	492d      	ldr	r1, [pc, #180]	; (8002d9c <HAL_RCC_OscConfig+0x4f4>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cec:	4b2b      	ldr	r3, [pc, #172]	; (8002d9c <HAL_RCC_OscConfig+0x4f4>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a19      	ldr	r1, [r3, #32]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	4927      	ldr	r1, [pc, #156]	; (8002d9c <HAL_RCC_OscConfig+0x4f4>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d04:	4b27      	ldr	r3, [pc, #156]	; (8002da4 <HAL_RCC_OscConfig+0x4fc>)
 8002d06:	2201      	movs	r2, #1
 8002d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0a:	f7fe fd4d 	bl	80017a8 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d12:	f7fe fd49 	bl	80017a8 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e037      	b.n	8002d94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d24:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <HAL_RCC_OscConfig+0x4f4>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0f0      	beq.n	8002d12 <HAL_RCC_OscConfig+0x46a>
 8002d30:	e02f      	b.n	8002d92 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d32:	4b1c      	ldr	r3, [pc, #112]	; (8002da4 <HAL_RCC_OscConfig+0x4fc>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d38:	f7fe fd36 	bl	80017a8 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d40:	f7fe fd32 	bl	80017a8 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e020      	b.n	8002d94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d52:	4b12      	ldr	r3, [pc, #72]	; (8002d9c <HAL_RCC_OscConfig+0x4f4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0x498>
 8002d5e:	e018      	b.n	8002d92 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e013      	b.n	8002d94 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <HAL_RCC_OscConfig+0x4f4>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d106      	bne.n	8002d8e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d001      	beq.n	8002d92 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	40007000 	.word	0x40007000
 8002da4:	42420060 	.word	0x42420060

08002da8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0d0      	b.n	8002f5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dbc:	4b6a      	ldr	r3, [pc, #424]	; (8002f68 <HAL_RCC_ClockConfig+0x1c0>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d910      	bls.n	8002dec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dca:	4b67      	ldr	r3, [pc, #412]	; (8002f68 <HAL_RCC_ClockConfig+0x1c0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f023 0207 	bic.w	r2, r3, #7
 8002dd2:	4965      	ldr	r1, [pc, #404]	; (8002f68 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dda:	4b63      	ldr	r3, [pc, #396]	; (8002f68 <HAL_RCC_ClockConfig+0x1c0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0b8      	b.n	8002f5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d020      	beq.n	8002e3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e04:	4b59      	ldr	r3, [pc, #356]	; (8002f6c <HAL_RCC_ClockConfig+0x1c4>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	4a58      	ldr	r2, [pc, #352]	; (8002f6c <HAL_RCC_ClockConfig+0x1c4>)
 8002e0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0308 	and.w	r3, r3, #8
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e1c:	4b53      	ldr	r3, [pc, #332]	; (8002f6c <HAL_RCC_ClockConfig+0x1c4>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	4a52      	ldr	r2, [pc, #328]	; (8002f6c <HAL_RCC_ClockConfig+0x1c4>)
 8002e22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e28:	4b50      	ldr	r3, [pc, #320]	; (8002f6c <HAL_RCC_ClockConfig+0x1c4>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	494d      	ldr	r1, [pc, #308]	; (8002f6c <HAL_RCC_ClockConfig+0x1c4>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d040      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d107      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4e:	4b47      	ldr	r3, [pc, #284]	; (8002f6c <HAL_RCC_ClockConfig+0x1c4>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d115      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e07f      	b.n	8002f5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d107      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e66:	4b41      	ldr	r3, [pc, #260]	; (8002f6c <HAL_RCC_ClockConfig+0x1c4>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d109      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e073      	b.n	8002f5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e76:	4b3d      	ldr	r3, [pc, #244]	; (8002f6c <HAL_RCC_ClockConfig+0x1c4>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e06b      	b.n	8002f5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e86:	4b39      	ldr	r3, [pc, #228]	; (8002f6c <HAL_RCC_ClockConfig+0x1c4>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f023 0203 	bic.w	r2, r3, #3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	4936      	ldr	r1, [pc, #216]	; (8002f6c <HAL_RCC_ClockConfig+0x1c4>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e98:	f7fe fc86 	bl	80017a8 <HAL_GetTick>
 8002e9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e9e:	e00a      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea0:	f7fe fc82 	bl	80017a8 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e053      	b.n	8002f5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb6:	4b2d      	ldr	r3, [pc, #180]	; (8002f6c <HAL_RCC_ClockConfig+0x1c4>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f003 020c 	and.w	r2, r3, #12
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d1eb      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec8:	4b27      	ldr	r3, [pc, #156]	; (8002f68 <HAL_RCC_ClockConfig+0x1c0>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d210      	bcs.n	8002ef8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed6:	4b24      	ldr	r3, [pc, #144]	; (8002f68 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 0207 	bic.w	r2, r3, #7
 8002ede:	4922      	ldr	r1, [pc, #136]	; (8002f68 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee6:	4b20      	ldr	r3, [pc, #128]	; (8002f68 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e032      	b.n	8002f5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d008      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f04:	4b19      	ldr	r3, [pc, #100]	; (8002f6c <HAL_RCC_ClockConfig+0x1c4>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	4916      	ldr	r1, [pc, #88]	; (8002f6c <HAL_RCC_ClockConfig+0x1c4>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d009      	beq.n	8002f36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f22:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <HAL_RCC_ClockConfig+0x1c4>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	490e      	ldr	r1, [pc, #56]	; (8002f6c <HAL_RCC_ClockConfig+0x1c4>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f36:	f000 f821 	bl	8002f7c <HAL_RCC_GetSysClockFreq>
 8002f3a:	4601      	mov	r1, r0
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <HAL_RCC_ClockConfig+0x1c4>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	091b      	lsrs	r3, r3, #4
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	4a0a      	ldr	r2, [pc, #40]	; (8002f70 <HAL_RCC_ClockConfig+0x1c8>)
 8002f48:	5cd3      	ldrb	r3, [r2, r3]
 8002f4a:	fa21 f303 	lsr.w	r3, r1, r3
 8002f4e:	4a09      	ldr	r2, [pc, #36]	; (8002f74 <HAL_RCC_ClockConfig+0x1cc>)
 8002f50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f52:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <HAL_RCC_ClockConfig+0x1d0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fe fbe4 	bl	8001724 <HAL_InitTick>

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40022000 	.word	0x40022000
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	0800908c 	.word	0x0800908c
 8002f74:	20000004 	.word	0x20000004
 8002f78:	2000001c 	.word	0x2000001c

08002f7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f7c:	b490      	push	{r4, r7}
 8002f7e:	b08a      	sub	sp, #40	; 0x28
 8002f80:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f82:	4b2a      	ldr	r3, [pc, #168]	; (800302c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f84:	1d3c      	adds	r4, r7, #4
 8002f86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f8c:	4b28      	ldr	r3, [pc, #160]	; (8003030 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	61fb      	str	r3, [r7, #28]
 8002f96:	2300      	movs	r3, #0
 8002f98:	61bb      	str	r3, [r7, #24]
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fa6:	4b23      	ldr	r3, [pc, #140]	; (8003034 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	f003 030c 	and.w	r3, r3, #12
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d002      	beq.n	8002fbc <HAL_RCC_GetSysClockFreq+0x40>
 8002fb6:	2b08      	cmp	r3, #8
 8002fb8:	d003      	beq.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x46>
 8002fba:	e02d      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fbc:	4b1e      	ldr	r3, [pc, #120]	; (8003038 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fbe:	623b      	str	r3, [r7, #32]
      break;
 8002fc0:	e02d      	b.n	800301e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	0c9b      	lsrs	r3, r3, #18
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002fce:	4413      	add	r3, r2
 8002fd0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002fd4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d013      	beq.n	8003008 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fe0:	4b14      	ldr	r3, [pc, #80]	; (8003034 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	0c5b      	lsrs	r3, r3, #17
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002fee:	4413      	add	r3, r2
 8002ff0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ff4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	4a0f      	ldr	r2, [pc, #60]	; (8003038 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ffa:	fb02 f203 	mul.w	r2, r2, r3
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	fbb2 f3f3 	udiv	r3, r2, r3
 8003004:	627b      	str	r3, [r7, #36]	; 0x24
 8003006:	e004      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	4a0c      	ldr	r2, [pc, #48]	; (800303c <HAL_RCC_GetSysClockFreq+0xc0>)
 800300c:	fb02 f303 	mul.w	r3, r2, r3
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	623b      	str	r3, [r7, #32]
      break;
 8003016:	e002      	b.n	800301e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003018:	4b07      	ldr	r3, [pc, #28]	; (8003038 <HAL_RCC_GetSysClockFreq+0xbc>)
 800301a:	623b      	str	r3, [r7, #32]
      break;
 800301c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800301e:	6a3b      	ldr	r3, [r7, #32]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3728      	adds	r7, #40	; 0x28
 8003024:	46bd      	mov	sp, r7
 8003026:	bc90      	pop	{r4, r7}
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	08009030 	.word	0x08009030
 8003030:	08009040 	.word	0x08009040
 8003034:	40021000 	.word	0x40021000
 8003038:	007a1200 	.word	0x007a1200
 800303c:	003d0900 	.word	0x003d0900

08003040 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003044:	4b02      	ldr	r3, [pc, #8]	; (8003050 <HAL_RCC_GetHCLKFreq+0x10>)
 8003046:	681b      	ldr	r3, [r3, #0]
}
 8003048:	4618      	mov	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr
 8003050:	20000004 	.word	0x20000004

08003054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003058:	f7ff fff2 	bl	8003040 <HAL_RCC_GetHCLKFreq>
 800305c:	4601      	mov	r1, r0
 800305e:	4b05      	ldr	r3, [pc, #20]	; (8003074 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	0a1b      	lsrs	r3, r3, #8
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	4a03      	ldr	r2, [pc, #12]	; (8003078 <HAL_RCC_GetPCLK1Freq+0x24>)
 800306a:	5cd3      	ldrb	r3, [r2, r3]
 800306c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003070:	4618      	mov	r0, r3
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40021000 	.word	0x40021000
 8003078:	0800909c 	.word	0x0800909c

0800307c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003080:	f7ff ffde 	bl	8003040 <HAL_RCC_GetHCLKFreq>
 8003084:	4601      	mov	r1, r0
 8003086:	4b05      	ldr	r3, [pc, #20]	; (800309c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	0adb      	lsrs	r3, r3, #11
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	4a03      	ldr	r2, [pc, #12]	; (80030a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003092:	5cd3      	ldrb	r3, [r2, r3]
 8003094:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003098:	4618      	mov	r0, r3
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40021000 	.word	0x40021000
 80030a0:	0800909c 	.word	0x0800909c

080030a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030ac:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <RCC_Delay+0x34>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a0a      	ldr	r2, [pc, #40]	; (80030dc <RCC_Delay+0x38>)
 80030b2:	fba2 2303 	umull	r2, r3, r2, r3
 80030b6:	0a5b      	lsrs	r3, r3, #9
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	fb02 f303 	mul.w	r3, r2, r3
 80030be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030c0:	bf00      	nop
  }
  while (Delay --);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	1e5a      	subs	r2, r3, #1
 80030c6:	60fa      	str	r2, [r7, #12]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1f9      	bne.n	80030c0 <RCC_Delay+0x1c>
}
 80030cc:	bf00      	nop
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	20000004 	.word	0x20000004
 80030dc:	10624dd3 	.word	0x10624dd3

080030e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	613b      	str	r3, [r7, #16]
 80030ec:	2300      	movs	r3, #0
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d07d      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80030fc:	2300      	movs	r3, #0
 80030fe:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003100:	4b4f      	ldr	r3, [pc, #316]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10d      	bne.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800310c:	4b4c      	ldr	r3, [pc, #304]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	4a4b      	ldr	r2, [pc, #300]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003116:	61d3      	str	r3, [r2, #28]
 8003118:	4b49      	ldr	r3, [pc, #292]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003120:	60bb      	str	r3, [r7, #8]
 8003122:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003124:	2301      	movs	r3, #1
 8003126:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003128:	4b46      	ldr	r3, [pc, #280]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003130:	2b00      	cmp	r3, #0
 8003132:	d118      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003134:	4b43      	ldr	r3, [pc, #268]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a42      	ldr	r2, [pc, #264]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800313a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800313e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003140:	f7fe fb32 	bl	80017a8 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003146:	e008      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003148:	f7fe fb2e 	bl	80017a8 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b64      	cmp	r3, #100	; 0x64
 8003154:	d901      	bls.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e06d      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315a:	4b3a      	ldr	r3, [pc, #232]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f0      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003166:	4b36      	ldr	r3, [pc, #216]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800316e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d02e      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	429a      	cmp	r2, r3
 8003182:	d027      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003184:	4b2e      	ldr	r3, [pc, #184]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800318c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800318e:	4b2e      	ldr	r3, [pc, #184]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003190:	2201      	movs	r2, #1
 8003192:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003194:	4b2c      	ldr	r3, [pc, #176]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800319a:	4a29      	ldr	r2, [pc, #164]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d014      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031aa:	f7fe fafd 	bl	80017a8 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b0:	e00a      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b2:	f7fe faf9 	bl	80017a8 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e036      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c8:	4b1d      	ldr	r3, [pc, #116]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0ee      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031d4:	4b1a      	ldr	r3, [pc, #104]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	4917      	ldr	r1, [pc, #92]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031e6:	7dfb      	ldrb	r3, [r7, #23]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d105      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ec:	4b14      	ldr	r3, [pc, #80]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	4a13      	ldr	r2, [pc, #76]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d008      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003204:	4b0e      	ldr	r3, [pc, #56]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	490b      	ldr	r1, [pc, #44]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003212:	4313      	orrs	r3, r2
 8003214:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0310 	and.w	r3, r3, #16
 800321e:	2b00      	cmp	r3, #0
 8003220:	d008      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003222:	4b07      	ldr	r3, [pc, #28]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	4904      	ldr	r1, [pc, #16]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003230:	4313      	orrs	r3, r2
 8003232:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40021000 	.word	0x40021000
 8003244:	40007000 	.word	0x40007000
 8003248:	42420440 	.word	0x42420440

0800324c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e076      	b.n	800334c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	2b00      	cmp	r3, #0
 8003264:	d108      	bne.n	8003278 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800326e:	d009      	beq.n	8003284 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	61da      	str	r2, [r3, #28]
 8003276:	e005      	b.n	8003284 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d106      	bne.n	80032a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7fd ffd0 	bl	8001244 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80032cc:	431a      	orrs	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032f4:	431a      	orrs	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003308:	ea42 0103 	orr.w	r1, r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003310:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	0c1a      	lsrs	r2, r3, #16
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f002 0204 	and.w	r2, r2, #4
 800332a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	69da      	ldr	r2, [r3, #28]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800333a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	603b      	str	r3, [r7, #0]
 8003360:	4613      	mov	r3, r2
 8003362:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800336e:	2b01      	cmp	r3, #1
 8003370:	d101      	bne.n	8003376 <HAL_SPI_Transmit+0x22>
 8003372:	2302      	movs	r3, #2
 8003374:	e126      	b.n	80035c4 <HAL_SPI_Transmit+0x270>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800337e:	f7fe fa13 	bl	80017a8 <HAL_GetTick>
 8003382:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003384:	88fb      	ldrh	r3, [r7, #6]
 8003386:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b01      	cmp	r3, #1
 8003392:	d002      	beq.n	800339a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003394:	2302      	movs	r3, #2
 8003396:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003398:	e10b      	b.n	80035b2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d002      	beq.n	80033a6 <HAL_SPI_Transmit+0x52>
 80033a0:	88fb      	ldrh	r3, [r7, #6]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d102      	bne.n	80033ac <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033aa:	e102      	b.n	80035b2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2203      	movs	r2, #3
 80033b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	88fa      	ldrh	r2, [r7, #6]
 80033c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	88fa      	ldrh	r2, [r7, #6]
 80033ca:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033f2:	d10f      	bne.n	8003414 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003402:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003412:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341e:	2b40      	cmp	r3, #64	; 0x40
 8003420:	d007      	beq.n	8003432 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003430:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800343a:	d14b      	bne.n	80034d4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <HAL_SPI_Transmit+0xf6>
 8003444:	8afb      	ldrh	r3, [r7, #22]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d13e      	bne.n	80034c8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	881a      	ldrh	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	1c9a      	adds	r2, r3, #2
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003464:	b29b      	uxth	r3, r3
 8003466:	3b01      	subs	r3, #1
 8003468:	b29a      	uxth	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800346e:	e02b      	b.n	80034c8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b02      	cmp	r3, #2
 800347c:	d112      	bne.n	80034a4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	881a      	ldrh	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	1c9a      	adds	r2, r3, #2
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003498:	b29b      	uxth	r3, r3
 800349a:	3b01      	subs	r3, #1
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	86da      	strh	r2, [r3, #54]	; 0x36
 80034a2:	e011      	b.n	80034c8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034a4:	f7fe f980 	bl	80017a8 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d803      	bhi.n	80034bc <HAL_SPI_Transmit+0x168>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ba:	d102      	bne.n	80034c2 <HAL_SPI_Transmit+0x16e>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d102      	bne.n	80034c8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034c6:	e074      	b.n	80035b2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1ce      	bne.n	8003470 <HAL_SPI_Transmit+0x11c>
 80034d2:	e04c      	b.n	800356e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <HAL_SPI_Transmit+0x18e>
 80034dc:	8afb      	ldrh	r3, [r7, #22]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d140      	bne.n	8003564 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	330c      	adds	r3, #12
 80034ec:	7812      	ldrb	r2, [r2, #0]
 80034ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f4:	1c5a      	adds	r2, r3, #1
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003508:	e02c      	b.n	8003564 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b02      	cmp	r3, #2
 8003516:	d113      	bne.n	8003540 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	330c      	adds	r3, #12
 8003522:	7812      	ldrb	r2, [r2, #0]
 8003524:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	1c5a      	adds	r2, r3, #1
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003534:	b29b      	uxth	r3, r3
 8003536:	3b01      	subs	r3, #1
 8003538:	b29a      	uxth	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	86da      	strh	r2, [r3, #54]	; 0x36
 800353e:	e011      	b.n	8003564 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003540:	f7fe f932 	bl	80017a8 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d803      	bhi.n	8003558 <HAL_SPI_Transmit+0x204>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003556:	d102      	bne.n	800355e <HAL_SPI_Transmit+0x20a>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d102      	bne.n	8003564 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003562:	e026      	b.n	80035b2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003568:	b29b      	uxth	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1cd      	bne.n	800350a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	6839      	ldr	r1, [r7, #0]
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 fa62 	bl	8003a3c <SPI_EndRxTxTransaction>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2220      	movs	r2, #32
 8003582:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10a      	bne.n	80035a2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800358c:	2300      	movs	r3, #0
 800358e:	613b      	str	r3, [r7, #16]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	613b      	str	r3, [r7, #16]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d002      	beq.n	80035b0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	77fb      	strb	r3, [r7, #31]
 80035ae:	e000      	b.n	80035b2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80035b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80035c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3720      	adds	r7, #32
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b08c      	sub	sp, #48	; 0x30
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
 80035d8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80035da:	2301      	movs	r3, #1
 80035dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d101      	bne.n	80035f2 <HAL_SPI_TransmitReceive+0x26>
 80035ee:	2302      	movs	r3, #2
 80035f0:	e18a      	b.n	8003908 <HAL_SPI_TransmitReceive+0x33c>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035fa:	f7fe f8d5 	bl	80017a8 <HAL_GetTick>
 80035fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003610:	887b      	ldrh	r3, [r7, #2]
 8003612:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003614:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003618:	2b01      	cmp	r3, #1
 800361a:	d00f      	beq.n	800363c <HAL_SPI_TransmitReceive+0x70>
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003622:	d107      	bne.n	8003634 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d103      	bne.n	8003634 <HAL_SPI_TransmitReceive+0x68>
 800362c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003630:	2b04      	cmp	r3, #4
 8003632:	d003      	beq.n	800363c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003634:	2302      	movs	r3, #2
 8003636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800363a:	e15b      	b.n	80038f4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d005      	beq.n	800364e <HAL_SPI_TransmitReceive+0x82>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <HAL_SPI_TransmitReceive+0x82>
 8003648:	887b      	ldrh	r3, [r7, #2]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d103      	bne.n	8003656 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003654:	e14e      	b.n	80038f4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b04      	cmp	r3, #4
 8003660:	d003      	beq.n	800366a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2205      	movs	r2, #5
 8003666:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	887a      	ldrh	r2, [r7, #2]
 800367a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	887a      	ldrh	r2, [r7, #2]
 8003680:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	887a      	ldrh	r2, [r7, #2]
 800368c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	887a      	ldrh	r2, [r7, #2]
 8003692:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036aa:	2b40      	cmp	r3, #64	; 0x40
 80036ac:	d007      	beq.n	80036be <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036c6:	d178      	bne.n	80037ba <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <HAL_SPI_TransmitReceive+0x10a>
 80036d0:	8b7b      	ldrh	r3, [r7, #26]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d166      	bne.n	80037a4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	881a      	ldrh	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e6:	1c9a      	adds	r2, r3, #2
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036fa:	e053      	b.n	80037a4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b02      	cmp	r3, #2
 8003708:	d11b      	bne.n	8003742 <HAL_SPI_TransmitReceive+0x176>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800370e:	b29b      	uxth	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d016      	beq.n	8003742 <HAL_SPI_TransmitReceive+0x176>
 8003714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003716:	2b01      	cmp	r3, #1
 8003718:	d113      	bne.n	8003742 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	881a      	ldrh	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	1c9a      	adds	r2, r3, #2
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003734:	b29b      	uxth	r3, r3
 8003736:	3b01      	subs	r3, #1
 8003738:	b29a      	uxth	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800373e:	2300      	movs	r3, #0
 8003740:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b01      	cmp	r3, #1
 800374e:	d119      	bne.n	8003784 <HAL_SPI_TransmitReceive+0x1b8>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003754:	b29b      	uxth	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d014      	beq.n	8003784 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68da      	ldr	r2, [r3, #12]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003764:	b292      	uxth	r2, r2
 8003766:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376c:	1c9a      	adds	r2, r3, #2
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003776:	b29b      	uxth	r3, r3
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003780:	2301      	movs	r3, #1
 8003782:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003784:	f7fe f810 	bl	80017a8 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003790:	429a      	cmp	r2, r3
 8003792:	d807      	bhi.n	80037a4 <HAL_SPI_TransmitReceive+0x1d8>
 8003794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379a:	d003      	beq.n	80037a4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80037a2:	e0a7      	b.n	80038f4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1a6      	bne.n	80036fc <HAL_SPI_TransmitReceive+0x130>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1a1      	bne.n	80036fc <HAL_SPI_TransmitReceive+0x130>
 80037b8:	e07c      	b.n	80038b4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <HAL_SPI_TransmitReceive+0x1fc>
 80037c2:	8b7b      	ldrh	r3, [r7, #26]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d16b      	bne.n	80038a0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	330c      	adds	r3, #12
 80037d2:	7812      	ldrb	r2, [r2, #0]
 80037d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037ee:	e057      	b.n	80038a0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d11c      	bne.n	8003838 <HAL_SPI_TransmitReceive+0x26c>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003802:	b29b      	uxth	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	d017      	beq.n	8003838 <HAL_SPI_TransmitReceive+0x26c>
 8003808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380a:	2b01      	cmp	r3, #1
 800380c:	d114      	bne.n	8003838 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	330c      	adds	r3, #12
 8003818:	7812      	ldrb	r2, [r2, #0]
 800381a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b01      	cmp	r3, #1
 8003844:	d119      	bne.n	800387a <HAL_SPI_TransmitReceive+0x2ae>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800384a:	b29b      	uxth	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d014      	beq.n	800387a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003862:	1c5a      	adds	r2, r3, #1
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800386c:	b29b      	uxth	r3, r3
 800386e:	3b01      	subs	r3, #1
 8003870:	b29a      	uxth	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003876:	2301      	movs	r3, #1
 8003878:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800387a:	f7fd ff95 	bl	80017a8 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003886:	429a      	cmp	r2, r3
 8003888:	d803      	bhi.n	8003892 <HAL_SPI_TransmitReceive+0x2c6>
 800388a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003890:	d102      	bne.n	8003898 <HAL_SPI_TransmitReceive+0x2cc>
 8003892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003894:	2b00      	cmp	r3, #0
 8003896:	d103      	bne.n	80038a0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800389e:	e029      	b.n	80038f4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1a2      	bne.n	80037f0 <HAL_SPI_TransmitReceive+0x224>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d19d      	bne.n	80037f0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 f8bf 	bl	8003a3c <SPI_EndRxTxTransaction>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d006      	beq.n	80038d2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2220      	movs	r2, #32
 80038ce:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80038d0:	e010      	b.n	80038f4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10b      	bne.n	80038f2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038da:	2300      	movs	r3, #0
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	617b      	str	r3, [r7, #20]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	617b      	str	r3, [r7, #20]
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	e000      	b.n	80038f4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80038f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003904:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003908:	4618      	mov	r0, r3
 800390a:	3730      	adds	r7, #48	; 0x30
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800391e:	b2db      	uxtb	r3, r3
}
 8003920:	4618      	mov	r0, r3
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr
	...

0800392c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b088      	sub	sp, #32
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	4613      	mov	r3, r2
 800393a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800393c:	f7fd ff34 	bl	80017a8 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003944:	1a9b      	subs	r3, r3, r2
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	4413      	add	r3, r2
 800394a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800394c:	f7fd ff2c 	bl	80017a8 <HAL_GetTick>
 8003950:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003952:	4b39      	ldr	r3, [pc, #228]	; (8003a38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	015b      	lsls	r3, r3, #5
 8003958:	0d1b      	lsrs	r3, r3, #20
 800395a:	69fa      	ldr	r2, [r7, #28]
 800395c:	fb02 f303 	mul.w	r3, r2, r3
 8003960:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003962:	e054      	b.n	8003a0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396a:	d050      	beq.n	8003a0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800396c:	f7fd ff1c 	bl	80017a8 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	429a      	cmp	r2, r3
 800397a:	d902      	bls.n	8003982 <SPI_WaitFlagStateUntilTimeout+0x56>
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d13d      	bne.n	80039fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003990:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800399a:	d111      	bne.n	80039c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039a4:	d004      	beq.n	80039b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ae:	d107      	bne.n	80039c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c8:	d10f      	bne.n	80039ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e017      	b.n	8003a2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	4013      	ands	r3, r2
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	bf0c      	ite	eq
 8003a1e:	2301      	moveq	r3, #1
 8003a20:	2300      	movne	r3, #0
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	461a      	mov	r2, r3
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d19b      	bne.n	8003964 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20000004 	.word	0x20000004

08003a3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af02      	add	r7, sp, #8
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2180      	movs	r1, #128	; 0x80
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f7ff ff6a 	bl	800392c <SPI_WaitFlagStateUntilTimeout>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a62:	f043 0220 	orr.w	r2, r3, #32
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e000      	b.n	8003a70 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e041      	b.n	8003b0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fd fc1c 	bl	80012dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4610      	mov	r0, r2
 8003ab8:	f000 fa64 	bl	8003f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d001      	beq.n	8003b30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e03a      	b.n	8003ba6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0201 	orr.w	r2, r2, #1
 8003b46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a18      	ldr	r2, [pc, #96]	; (8003bb0 <HAL_TIM_Base_Start_IT+0x98>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00e      	beq.n	8003b70 <HAL_TIM_Base_Start_IT+0x58>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b5a:	d009      	beq.n	8003b70 <HAL_TIM_Base_Start_IT+0x58>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a14      	ldr	r2, [pc, #80]	; (8003bb4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d004      	beq.n	8003b70 <HAL_TIM_Base_Start_IT+0x58>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a13      	ldr	r2, [pc, #76]	; (8003bb8 <HAL_TIM_Base_Start_IT+0xa0>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d111      	bne.n	8003b94 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b06      	cmp	r3, #6
 8003b80:	d010      	beq.n	8003ba4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0201 	orr.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b92:	e007      	b.n	8003ba4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0201 	orr.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr
 8003bb0:	40012c00 	.word	0x40012c00
 8003bb4:	40000400 	.word	0x40000400
 8003bb8:	40000800 	.word	0x40000800

08003bbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d122      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d11b      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f06f 0202 	mvn.w	r2, #2
 8003be8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f9a4 	bl	8003f4c <HAL_TIM_IC_CaptureCallback>
 8003c04:	e005      	b.n	8003c12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f997 	bl	8003f3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f9a6 	bl	8003f5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f003 0304 	and.w	r3, r3, #4
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d122      	bne.n	8003c6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d11b      	bne.n	8003c6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0204 	mvn.w	r2, #4
 8003c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2202      	movs	r2, #2
 8003c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f97a 	bl	8003f4c <HAL_TIM_IC_CaptureCallback>
 8003c58:	e005      	b.n	8003c66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f96d 	bl	8003f3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f97c 	bl	8003f5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	2b08      	cmp	r3, #8
 8003c78:	d122      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d11b      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f06f 0208 	mvn.w	r2, #8
 8003c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2204      	movs	r2, #4
 8003c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f950 	bl	8003f4c <HAL_TIM_IC_CaptureCallback>
 8003cac:	e005      	b.n	8003cba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f943 	bl	8003f3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f952 	bl	8003f5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f003 0310 	and.w	r3, r3, #16
 8003cca:	2b10      	cmp	r3, #16
 8003ccc:	d122      	bne.n	8003d14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f003 0310 	and.w	r3, r3, #16
 8003cd8:	2b10      	cmp	r3, #16
 8003cda:	d11b      	bne.n	8003d14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f06f 0210 	mvn.w	r2, #16
 8003ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2208      	movs	r2, #8
 8003cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f926 	bl	8003f4c <HAL_TIM_IC_CaptureCallback>
 8003d00:	e005      	b.n	8003d0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f919 	bl	8003f3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f928 	bl	8003f5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d10e      	bne.n	8003d40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d107      	bne.n	8003d40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f06f 0201 	mvn.w	r2, #1
 8003d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7fc fefe 	bl	8000b3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4a:	2b80      	cmp	r3, #128	; 0x80
 8003d4c:	d10e      	bne.n	8003d6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d58:	2b80      	cmp	r3, #128	; 0x80
 8003d5a:	d107      	bne.n	8003d6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fa6b 	bl	8004242 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d76:	2b40      	cmp	r3, #64	; 0x40
 8003d78:	d10e      	bne.n	8003d98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d84:	2b40      	cmp	r3, #64	; 0x40
 8003d86:	d107      	bne.n	8003d98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f8ec 	bl	8003f70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f003 0320 	and.w	r3, r3, #32
 8003da2:	2b20      	cmp	r3, #32
 8003da4:	d10e      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b20      	cmp	r3, #32
 8003db2:	d107      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f06f 0220 	mvn.w	r2, #32
 8003dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 fa36 	bl	8004230 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dc4:	bf00      	nop
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <HAL_TIM_ConfigClockSource+0x18>
 8003de0:	2302      	movs	r3, #2
 8003de2:	e0a6      	b.n	8003f32 <HAL_TIM_ConfigClockSource+0x166>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e0a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b40      	cmp	r3, #64	; 0x40
 8003e1a:	d067      	beq.n	8003eec <HAL_TIM_ConfigClockSource+0x120>
 8003e1c:	2b40      	cmp	r3, #64	; 0x40
 8003e1e:	d80b      	bhi.n	8003e38 <HAL_TIM_ConfigClockSource+0x6c>
 8003e20:	2b10      	cmp	r3, #16
 8003e22:	d073      	beq.n	8003f0c <HAL_TIM_ConfigClockSource+0x140>
 8003e24:	2b10      	cmp	r3, #16
 8003e26:	d802      	bhi.n	8003e2e <HAL_TIM_ConfigClockSource+0x62>
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d06f      	beq.n	8003f0c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003e2c:	e078      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e2e:	2b20      	cmp	r3, #32
 8003e30:	d06c      	beq.n	8003f0c <HAL_TIM_ConfigClockSource+0x140>
 8003e32:	2b30      	cmp	r3, #48	; 0x30
 8003e34:	d06a      	beq.n	8003f0c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003e36:	e073      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e38:	2b70      	cmp	r3, #112	; 0x70
 8003e3a:	d00d      	beq.n	8003e58 <HAL_TIM_ConfigClockSource+0x8c>
 8003e3c:	2b70      	cmp	r3, #112	; 0x70
 8003e3e:	d804      	bhi.n	8003e4a <HAL_TIM_ConfigClockSource+0x7e>
 8003e40:	2b50      	cmp	r3, #80	; 0x50
 8003e42:	d033      	beq.n	8003eac <HAL_TIM_ConfigClockSource+0xe0>
 8003e44:	2b60      	cmp	r3, #96	; 0x60
 8003e46:	d041      	beq.n	8003ecc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003e48:	e06a      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e4e:	d066      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x152>
 8003e50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e54:	d017      	beq.n	8003e86 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003e56:	e063      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	6899      	ldr	r1, [r3, #8]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	f000 f965 	bl	8004136 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e7a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	609a      	str	r2, [r3, #8]
      break;
 8003e84:	e04c      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6818      	ldr	r0, [r3, #0]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	6899      	ldr	r1, [r3, #8]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f000 f94e 	bl	8004136 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ea8:	609a      	str	r2, [r3, #8]
      break;
 8003eaa:	e039      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6818      	ldr	r0, [r3, #0]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	6859      	ldr	r1, [r3, #4]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	f000 f8c5 	bl	8004048 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2150      	movs	r1, #80	; 0x50
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 f91c 	bl	8004102 <TIM_ITRx_SetConfig>
      break;
 8003eca:	e029      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6818      	ldr	r0, [r3, #0]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	6859      	ldr	r1, [r3, #4]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	f000 f8e3 	bl	80040a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2160      	movs	r1, #96	; 0x60
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 f90c 	bl	8004102 <TIM_ITRx_SetConfig>
      break;
 8003eea:	e019      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6818      	ldr	r0, [r3, #0]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	6859      	ldr	r1, [r3, #4]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	f000 f8a5 	bl	8004048 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2140      	movs	r1, #64	; 0x40
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 f8fc 	bl	8004102 <TIM_ITRx_SetConfig>
      break;
 8003f0a:	e009      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4619      	mov	r1, r3
 8003f16:	4610      	mov	r0, r2
 8003f18:	f000 f8f3 	bl	8004102 <TIM_ITRx_SetConfig>
        break;
 8003f1c:	e000      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003f1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f42:	bf00      	nop
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr

08003f4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bc80      	pop	{r7}
 8003f5c:	4770      	bx	lr

08003f5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b083      	sub	sp, #12
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f66:	bf00      	nop
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bc80      	pop	{r7}
 8003f6e:	4770      	bx	lr

08003f70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bc80      	pop	{r7}
 8003f80:	4770      	bx	lr
	...

08003f84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a29      	ldr	r2, [pc, #164]	; (800403c <TIM_Base_SetConfig+0xb8>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d00b      	beq.n	8003fb4 <TIM_Base_SetConfig+0x30>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa2:	d007      	beq.n	8003fb4 <TIM_Base_SetConfig+0x30>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a26      	ldr	r2, [pc, #152]	; (8004040 <TIM_Base_SetConfig+0xbc>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d003      	beq.n	8003fb4 <TIM_Base_SetConfig+0x30>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a25      	ldr	r2, [pc, #148]	; (8004044 <TIM_Base_SetConfig+0xc0>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d108      	bne.n	8003fc6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a1c      	ldr	r2, [pc, #112]	; (800403c <TIM_Base_SetConfig+0xb8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d00b      	beq.n	8003fe6 <TIM_Base_SetConfig+0x62>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd4:	d007      	beq.n	8003fe6 <TIM_Base_SetConfig+0x62>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a19      	ldr	r2, [pc, #100]	; (8004040 <TIM_Base_SetConfig+0xbc>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d003      	beq.n	8003fe6 <TIM_Base_SetConfig+0x62>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a18      	ldr	r2, [pc, #96]	; (8004044 <TIM_Base_SetConfig+0xc0>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d108      	bne.n	8003ff8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a07      	ldr	r2, [pc, #28]	; (800403c <TIM_Base_SetConfig+0xb8>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d103      	bne.n	800402c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	691a      	ldr	r2, [r3, #16]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	615a      	str	r2, [r3, #20]
}
 8004032:	bf00      	nop
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	bc80      	pop	{r7}
 800403a:	4770      	bx	lr
 800403c:	40012c00 	.word	0x40012c00
 8004040:	40000400 	.word	0x40000400
 8004044:	40000800 	.word	0x40000800

08004048 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004048:	b480      	push	{r7}
 800404a:	b087      	sub	sp, #28
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	f023 0201 	bic.w	r2, r3, #1
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004072:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f023 030a 	bic.w	r3, r3, #10
 8004084:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	4313      	orrs	r3, r2
 800408c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	621a      	str	r2, [r3, #32]
}
 800409a:	bf00      	nop
 800409c:	371c      	adds	r7, #28
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc80      	pop	{r7}
 80040a2:	4770      	bx	lr

080040a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	f023 0210 	bic.w	r2, r3, #16
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	031b      	lsls	r3, r3, #12
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	621a      	str	r2, [r3, #32]
}
 80040f8:	bf00      	nop
 80040fa:	371c      	adds	r7, #28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bc80      	pop	{r7}
 8004100:	4770      	bx	lr

08004102 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004102:	b480      	push	{r7}
 8004104:	b085      	sub	sp, #20
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004118:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4313      	orrs	r3, r2
 8004120:	f043 0307 	orr.w	r3, r3, #7
 8004124:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	609a      	str	r2, [r3, #8]
}
 800412c:	bf00      	nop
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	bc80      	pop	{r7}
 8004134:	4770      	bx	lr

08004136 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004136:	b480      	push	{r7}
 8004138:	b087      	sub	sp, #28
 800413a:	af00      	add	r7, sp, #0
 800413c:	60f8      	str	r0, [r7, #12]
 800413e:	60b9      	str	r1, [r7, #8]
 8004140:	607a      	str	r2, [r7, #4]
 8004142:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004150:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	021a      	lsls	r2, r3, #8
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	431a      	orrs	r2, r3
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	4313      	orrs	r3, r2
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	4313      	orrs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	609a      	str	r2, [r3, #8]
}
 800416a:	bf00      	nop
 800416c:	371c      	adds	r7, #28
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr

08004174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004188:	2302      	movs	r3, #2
 800418a:	e046      	b.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a16      	ldr	r2, [pc, #88]	; (8004224 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d00e      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d8:	d009      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a12      	ldr	r2, [pc, #72]	; (8004228 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d004      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a10      	ldr	r2, [pc, #64]	; (800422c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d10c      	bne.n	8004208 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	bc80      	pop	{r7}
 8004222:	4770      	bx	lr
 8004224:	40012c00 	.word	0x40012c00
 8004228:	40000400 	.word	0x40000400
 800422c:	40000800 	.word	0x40000800

08004230 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	4770      	bx	lr

08004242 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr

08004254 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e03f      	b.n	80042e6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d106      	bne.n	8004280 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7fd f854 	bl	8001328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2224      	movs	r2, #36	; 0x24
 8004284:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004296:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 f829 	bl	80042f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	691a      	ldr	r2, [r3, #16]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695a      	ldr	r2, [r3, #20]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689a      	ldr	r2, [r3, #8]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	4313      	orrs	r3, r2
 800431e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800432a:	f023 030c 	bic.w	r3, r3, #12
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6812      	ldr	r2, [r2, #0]
 8004332:	68b9      	ldr	r1, [r7, #8]
 8004334:	430b      	orrs	r3, r1
 8004336:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	699a      	ldr	r2, [r3, #24]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a2c      	ldr	r2, [pc, #176]	; (8004404 <UART_SetConfig+0x114>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d103      	bne.n	8004360 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004358:	f7fe fe90 	bl	800307c <HAL_RCC_GetPCLK2Freq>
 800435c:	60f8      	str	r0, [r7, #12]
 800435e:	e002      	b.n	8004366 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004360:	f7fe fe78 	bl	8003054 <HAL_RCC_GetPCLK1Freq>
 8004364:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	4613      	mov	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	009a      	lsls	r2, r3, #2
 8004370:	441a      	add	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	fbb2 f3f3 	udiv	r3, r2, r3
 800437c:	4a22      	ldr	r2, [pc, #136]	; (8004408 <UART_SetConfig+0x118>)
 800437e:	fba2 2303 	umull	r2, r3, r2, r3
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	0119      	lsls	r1, r3, #4
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	4613      	mov	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	009a      	lsls	r2, r3, #2
 8004390:	441a      	add	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	fbb2 f2f3 	udiv	r2, r2, r3
 800439c:	4b1a      	ldr	r3, [pc, #104]	; (8004408 <UART_SetConfig+0x118>)
 800439e:	fba3 0302 	umull	r0, r3, r3, r2
 80043a2:	095b      	lsrs	r3, r3, #5
 80043a4:	2064      	movs	r0, #100	; 0x64
 80043a6:	fb00 f303 	mul.w	r3, r0, r3
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	3332      	adds	r3, #50	; 0x32
 80043b0:	4a15      	ldr	r2, [pc, #84]	; (8004408 <UART_SetConfig+0x118>)
 80043b2:	fba2 2303 	umull	r2, r3, r2, r3
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043bc:	4419      	add	r1, r3
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4613      	mov	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	009a      	lsls	r2, r3, #2
 80043c8:	441a      	add	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80043d4:	4b0c      	ldr	r3, [pc, #48]	; (8004408 <UART_SetConfig+0x118>)
 80043d6:	fba3 0302 	umull	r0, r3, r3, r2
 80043da:	095b      	lsrs	r3, r3, #5
 80043dc:	2064      	movs	r0, #100	; 0x64
 80043de:	fb00 f303 	mul.w	r3, r0, r3
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	3332      	adds	r3, #50	; 0x32
 80043e8:	4a07      	ldr	r2, [pc, #28]	; (8004408 <UART_SetConfig+0x118>)
 80043ea:	fba2 2303 	umull	r2, r3, r2, r3
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	f003 020f 	and.w	r2, r3, #15
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	440a      	add	r2, r1
 80043fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80043fc:	bf00      	nop
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	40013800 	.word	0x40013800
 8004408:	51eb851f 	.word	0x51eb851f

0800440c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004410:	4904      	ldr	r1, [pc, #16]	; (8004424 <MX_FATFS_Init+0x18>)
 8004412:	4805      	ldr	r0, [pc, #20]	; (8004428 <MX_FATFS_Init+0x1c>)
 8004414:	f003 fc72 	bl	8007cfc <FATFS_LinkDriver>
 8004418:	4603      	mov	r3, r0
 800441a:	461a      	mov	r2, r3
 800441c:	4b03      	ldr	r3, [pc, #12]	; (800442c <MX_FATFS_Init+0x20>)
 800441e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004420:	bf00      	nop
 8004422:	bd80      	pop	{r7, pc}
 8004424:	200028b8 	.word	0x200028b8
 8004428:	20000008 	.word	0x20000008
 800442c:	200028bc 	.word	0x200028bc

08004430 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004434:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004436:	4618      	mov	r0, r3
 8004438:	46bd      	mov	sp, r7
 800443a:	bc80      	pop	{r7}
 800443c:	4770      	bx	lr
	...

08004440 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	4603      	mov	r3, r0
 8004448:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800444a:	79fb      	ldrb	r3, [r7, #7]
 800444c:	4a08      	ldr	r2, [pc, #32]	; (8004470 <disk_status+0x30>)
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	79fa      	ldrb	r2, [r7, #7]
 8004458:	4905      	ldr	r1, [pc, #20]	; (8004470 <disk_status+0x30>)
 800445a:	440a      	add	r2, r1
 800445c:	7a12      	ldrb	r2, [r2, #8]
 800445e:	4610      	mov	r0, r2
 8004460:	4798      	blx	r3
 8004462:	4603      	mov	r3, r0
 8004464:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004466:	7bfb      	ldrb	r3, [r7, #15]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	200002d8 	.word	0x200002d8

08004474 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	4603      	mov	r3, r0
 800447c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8004482:	79fb      	ldrb	r3, [r7, #7]
 8004484:	4a0d      	ldr	r2, [pc, #52]	; (80044bc <disk_initialize+0x48>)
 8004486:	5cd3      	ldrb	r3, [r2, r3]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d111      	bne.n	80044b0 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800448c:	79fb      	ldrb	r3, [r7, #7]
 800448e:	4a0b      	ldr	r2, [pc, #44]	; (80044bc <disk_initialize+0x48>)
 8004490:	2101      	movs	r1, #1
 8004492:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004494:	79fb      	ldrb	r3, [r7, #7]
 8004496:	4a09      	ldr	r2, [pc, #36]	; (80044bc <disk_initialize+0x48>)
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4413      	add	r3, r2
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	79fa      	ldrb	r2, [r7, #7]
 80044a2:	4906      	ldr	r1, [pc, #24]	; (80044bc <disk_initialize+0x48>)
 80044a4:	440a      	add	r2, r1
 80044a6:	7a12      	ldrb	r2, [r2, #8]
 80044a8:	4610      	mov	r0, r2
 80044aa:	4798      	blx	r3
 80044ac:	4603      	mov	r3, r0
 80044ae:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80044b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	200002d8 	.word	0x200002d8

080044c0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80044c0:	b590      	push	{r4, r7, lr}
 80044c2:	b087      	sub	sp, #28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	607a      	str	r2, [r7, #4]
 80044ca:	603b      	str	r3, [r7, #0]
 80044cc:	4603      	mov	r3, r0
 80044ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
 80044d2:	4a0a      	ldr	r2, [pc, #40]	; (80044fc <disk_read+0x3c>)
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	689c      	ldr	r4, [r3, #8]
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
 80044de:	4a07      	ldr	r2, [pc, #28]	; (80044fc <disk_read+0x3c>)
 80044e0:	4413      	add	r3, r2
 80044e2:	7a18      	ldrb	r0, [r3, #8]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	68b9      	ldr	r1, [r7, #8]
 80044ea:	47a0      	blx	r4
 80044ec:	4603      	mov	r3, r0
 80044ee:	75fb      	strb	r3, [r7, #23]
  return res;
 80044f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	371c      	adds	r7, #28
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd90      	pop	{r4, r7, pc}
 80044fa:	bf00      	nop
 80044fc:	200002d8 	.word	0x200002d8

08004500 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004500:	b590      	push	{r4, r7, lr}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
 8004506:	60b9      	str	r1, [r7, #8]
 8004508:	607a      	str	r2, [r7, #4]
 800450a:	603b      	str	r3, [r7, #0]
 800450c:	4603      	mov	r3, r0
 800450e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004510:	7bfb      	ldrb	r3, [r7, #15]
 8004512:	4a0a      	ldr	r2, [pc, #40]	; (800453c <disk_write+0x3c>)
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	68dc      	ldr	r4, [r3, #12]
 800451c:	7bfb      	ldrb	r3, [r7, #15]
 800451e:	4a07      	ldr	r2, [pc, #28]	; (800453c <disk_write+0x3c>)
 8004520:	4413      	add	r3, r2
 8004522:	7a18      	ldrb	r0, [r3, #8]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	68b9      	ldr	r1, [r7, #8]
 800452a:	47a0      	blx	r4
 800452c:	4603      	mov	r3, r0
 800452e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004530:	7dfb      	ldrb	r3, [r7, #23]
}
 8004532:	4618      	mov	r0, r3
 8004534:	371c      	adds	r7, #28
 8004536:	46bd      	mov	sp, r7
 8004538:	bd90      	pop	{r4, r7, pc}
 800453a:	bf00      	nop
 800453c:	200002d8 	.word	0x200002d8

08004540 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	4603      	mov	r3, r0
 8004548:	603a      	str	r2, [r7, #0]
 800454a:	71fb      	strb	r3, [r7, #7]
 800454c:	460b      	mov	r3, r1
 800454e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004550:	79fb      	ldrb	r3, [r7, #7]
 8004552:	4a09      	ldr	r2, [pc, #36]	; (8004578 <disk_ioctl+0x38>)
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	79fa      	ldrb	r2, [r7, #7]
 800455e:	4906      	ldr	r1, [pc, #24]	; (8004578 <disk_ioctl+0x38>)
 8004560:	440a      	add	r2, r1
 8004562:	7a10      	ldrb	r0, [r2, #8]
 8004564:	79b9      	ldrb	r1, [r7, #6]
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	4798      	blx	r3
 800456a:	4603      	mov	r3, r0
 800456c:	73fb      	strb	r3, [r7, #15]
  return res;
 800456e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	200002d8 	.word	0x200002d8

0800457c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800457c:	b480      	push	{r7}
 800457e:	b087      	sub	sp, #28
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8004590:	e007      	b.n	80045a2 <mem_cpy+0x26>
		*d++ = *s++;
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	1c53      	adds	r3, r2, #1
 8004596:	613b      	str	r3, [r7, #16]
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	1c59      	adds	r1, r3, #1
 800459c:	6179      	str	r1, [r7, #20]
 800459e:	7812      	ldrb	r2, [r2, #0]
 80045a0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	1e5a      	subs	r2, r3, #1
 80045a6:	607a      	str	r2, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1f2      	bne.n	8004592 <mem_cpy+0x16>
}
 80045ac:	bf00      	nop
 80045ae:	371c      	adds	r7, #28
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bc80      	pop	{r7}
 80045b4:	4770      	bx	lr

080045b6 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80045b6:	b480      	push	{r7}
 80045b8:	b087      	sub	sp, #28
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80045c6:	e005      	b.n	80045d4 <mem_set+0x1e>
		*d++ = (BYTE)val;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	617a      	str	r2, [r7, #20]
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	1e5a      	subs	r2, r3, #1
 80045d8:	607a      	str	r2, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1f4      	bne.n	80045c8 <mem_set+0x12>
}
 80045de:	bf00      	nop
 80045e0:	371c      	adds	r7, #28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bc80      	pop	{r7}
 80045e6:	4770      	bx	lr

080045e8 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80045e8:	b480      	push	{r7}
 80045ea:	b089      	sub	sp, #36	; 0x24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	61fb      	str	r3, [r7, #28]
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004600:	bf00      	nop
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	1e5a      	subs	r2, r3, #1
 8004606:	607a      	str	r2, [r7, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00d      	beq.n	8004628 <mem_cmp+0x40>
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	61fa      	str	r2, [r7, #28]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	4619      	mov	r1, r3
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	1c5a      	adds	r2, r3, #1
 800461a:	61ba      	str	r2, [r7, #24]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	1acb      	subs	r3, r1, r3
 8004620:	617b      	str	r3, [r7, #20]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0ec      	beq.n	8004602 <mem_cmp+0x1a>
	return r;
 8004628:	697b      	ldr	r3, [r7, #20]
}
 800462a:	4618      	mov	r0, r3
 800462c:	3724      	adds	r7, #36	; 0x24
 800462e:	46bd      	mov	sp, r7
 8004630:	bc80      	pop	{r7}
 8004632:	4770      	bx	lr

08004634 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800463e:	e002      	b.n	8004646 <chk_chr+0x12>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3301      	adds	r3, #1
 8004644:	607b      	str	r3, [r7, #4]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d005      	beq.n	800465a <chk_chr+0x26>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	461a      	mov	r2, r3
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	4293      	cmp	r3, r2
 8004658:	d1f2      	bne.n	8004640 <chk_chr+0xc>
	return *str;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	781b      	ldrb	r3, [r3, #0]
}
 800465e:	4618      	mov	r0, r3
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	bc80      	pop	{r7}
 8004666:	4770      	bx	lr

08004668 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004672:	2300      	movs	r3, #0
 8004674:	60bb      	str	r3, [r7, #8]
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	e03d      	b.n	80046f8 <chk_lock+0x90>
		if (Files[i].fs) {	/* Existing entry */
 800467c:	4932      	ldr	r1, [pc, #200]	; (8004748 <chk_lock+0xe0>)
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	4613      	mov	r3, r2
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	4413      	add	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	440b      	add	r3, r1
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d02e      	beq.n	80046ee <chk_lock+0x86>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004690:	492d      	ldr	r1, [pc, #180]	; (8004748 <chk_lock+0xe0>)
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	4613      	mov	r3, r2
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	4413      	add	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d122      	bne.n	80046f2 <chk_lock+0x8a>
				Files[i].clu == dp->sclust &&
 80046ac:	4926      	ldr	r1, [pc, #152]	; (8004748 <chk_lock+0xe0>)
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	4613      	mov	r3, r2
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	4413      	add	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	3304      	adds	r3, #4
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046c4:	3308      	adds	r3, #8
 80046c6:	681b      	ldr	r3, [r3, #0]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d112      	bne.n	80046f2 <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 80046cc:	491e      	ldr	r1, [pc, #120]	; (8004748 <chk_lock+0xe0>)
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	4613      	mov	r3, r2
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	4413      	add	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	440b      	add	r3, r1
 80046da:	3308      	adds	r3, #8
 80046dc:	881a      	ldrh	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046e4:	3306      	adds	r3, #6
 80046e6:	881b      	ldrh	r3, [r3, #0]
				Files[i].clu == dp->sclust &&
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d102      	bne.n	80046f2 <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 80046ec:	e007      	b.n	80046fe <chk_lock+0x96>
		} else {			/* Blank entry */
			be = 1;
 80046ee:	2301      	movs	r3, #1
 80046f0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	3301      	adds	r3, #1
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d9be      	bls.n	800467c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2b02      	cmp	r3, #2
 8004702:	d109      	bne.n	8004718 <chk_lock+0xb0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d102      	bne.n	8004710 <chk_lock+0xa8>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b02      	cmp	r3, #2
 800470e:	d101      	bne.n	8004714 <chk_lock+0xac>
 8004710:	2300      	movs	r3, #0
 8004712:	e013      	b.n	800473c <chk_lock+0xd4>
 8004714:	2312      	movs	r3, #18
 8004716:	e011      	b.n	800473c <chk_lock+0xd4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10b      	bne.n	8004736 <chk_lock+0xce>
 800471e:	490a      	ldr	r1, [pc, #40]	; (8004748 <chk_lock+0xe0>)
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	4613      	mov	r3, r2
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	4413      	add	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	440b      	add	r3, r1
 800472c:	330a      	adds	r3, #10
 800472e:	881b      	ldrh	r3, [r3, #0]
 8004730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004734:	d101      	bne.n	800473a <chk_lock+0xd2>
 8004736:	2310      	movs	r3, #16
 8004738:	e000      	b.n	800473c <chk_lock+0xd4>
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	bc80      	pop	{r7}
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	200000c0 	.word	0x200000c0

0800474c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004752:	2300      	movs	r3, #0
 8004754:	607b      	str	r3, [r7, #4]
 8004756:	e002      	b.n	800475e <enq_lock+0x12>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	3301      	adds	r3, #1
 800475c:	607b      	str	r3, [r7, #4]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d809      	bhi.n	8004778 <enq_lock+0x2c>
 8004764:	490a      	ldr	r1, [pc, #40]	; (8004790 <enq_lock+0x44>)
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	4613      	mov	r3, r2
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	4413      	add	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	440b      	add	r3, r1
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1ef      	bne.n	8004758 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b02      	cmp	r3, #2
 800477c:	bf14      	ite	ne
 800477e:	2301      	movne	r3, #1
 8004780:	2300      	moveq	r3, #0
 8004782:	b2db      	uxtb	r3, r3
}
 8004784:	4618      	mov	r0, r3
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	bc80      	pop	{r7}
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	200000c0 	.word	0x200000c0

08004794 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800479e:	2300      	movs	r3, #0
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	e030      	b.n	8004806 <inc_lock+0x72>
		if (Files[i].fs == dp->fs &&
 80047a4:	495a      	ldr	r1, [pc, #360]	; (8004910 <inc_lock+0x17c>)
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	4613      	mov	r3, r2
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	4413      	add	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d11f      	bne.n	8004800 <inc_lock+0x6c>
			Files[i].clu == dp->sclust &&
 80047c0:	4953      	ldr	r1, [pc, #332]	; (8004910 <inc_lock+0x17c>)
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4613      	mov	r3, r2
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	4413      	add	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	440b      	add	r3, r1
 80047ce:	3304      	adds	r3, #4
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d8:	3308      	adds	r3, #8
 80047da:	681b      	ldr	r3, [r3, #0]
		if (Files[i].fs == dp->fs &&
 80047dc:	429a      	cmp	r2, r3
 80047de:	d10f      	bne.n	8004800 <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 80047e0:	494b      	ldr	r1, [pc, #300]	; (8004910 <inc_lock+0x17c>)
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4613      	mov	r3, r2
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	4413      	add	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	440b      	add	r3, r1
 80047ee:	3308      	adds	r3, #8
 80047f0:	881a      	ldrh	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047f8:	3306      	adds	r3, #6
 80047fa:	881b      	ldrh	r3, [r3, #0]
			Files[i].clu == dp->sclust &&
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d006      	beq.n	800480e <inc_lock+0x7a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	3301      	adds	r3, #1
 8004804:	60fb      	str	r3, [r7, #12]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d9cb      	bls.n	80047a4 <inc_lock+0x10>
 800480c:	e000      	b.n	8004810 <inc_lock+0x7c>
			Files[i].idx == dp->index) break;
 800480e:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2b02      	cmp	r3, #2
 8004814:	d14a      	bne.n	80048ac <inc_lock+0x118>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004816:	2300      	movs	r3, #0
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	e002      	b.n	8004822 <inc_lock+0x8e>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3301      	adds	r3, #1
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d809      	bhi.n	800483c <inc_lock+0xa8>
 8004828:	4939      	ldr	r1, [pc, #228]	; (8004910 <inc_lock+0x17c>)
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	4613      	mov	r3, r2
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	4413      	add	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	440b      	add	r3, r1
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1ef      	bne.n	800481c <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2b02      	cmp	r3, #2
 8004840:	d101      	bne.n	8004846 <inc_lock+0xb2>
 8004842:	2300      	movs	r3, #0
 8004844:	e05f      	b.n	8004906 <inc_lock+0x172>
		Files[i].fs = dp->fs;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800484c:	6819      	ldr	r1, [r3, #0]
 800484e:	4830      	ldr	r0, [pc, #192]	; (8004910 <inc_lock+0x17c>)
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	4613      	mov	r3, r2
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	4413      	add	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4403      	add	r3, r0
 800485c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004864:	3308      	adds	r3, #8
 8004866:	6819      	ldr	r1, [r3, #0]
 8004868:	4829      	ldr	r0, [pc, #164]	; (8004910 <inc_lock+0x17c>)
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	4613      	mov	r3, r2
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	4413      	add	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4403      	add	r3, r0
 8004876:	3304      	adds	r3, #4
 8004878:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004880:	3306      	adds	r3, #6
 8004882:	8818      	ldrh	r0, [r3, #0]
 8004884:	4922      	ldr	r1, [pc, #136]	; (8004910 <inc_lock+0x17c>)
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	4613      	mov	r3, r2
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	4413      	add	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	440b      	add	r3, r1
 8004892:	3308      	adds	r3, #8
 8004894:	4602      	mov	r2, r0
 8004896:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8004898:	491d      	ldr	r1, [pc, #116]	; (8004910 <inc_lock+0x17c>)
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	4613      	mov	r3, r2
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	4413      	add	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	440b      	add	r3, r1
 80048a6:	330a      	adds	r3, #10
 80048a8:	2200      	movs	r2, #0
 80048aa:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00c      	beq.n	80048cc <inc_lock+0x138>
 80048b2:	4917      	ldr	r1, [pc, #92]	; (8004910 <inc_lock+0x17c>)
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4613      	mov	r3, r2
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	4413      	add	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	440b      	add	r3, r1
 80048c0:	330a      	adds	r3, #10
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <inc_lock+0x138>
 80048c8:	2300      	movs	r3, #0
 80048ca:	e01c      	b.n	8004906 <inc_lock+0x172>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10b      	bne.n	80048ea <inc_lock+0x156>
 80048d2:	490f      	ldr	r1, [pc, #60]	; (8004910 <inc_lock+0x17c>)
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	4613      	mov	r3, r2
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	4413      	add	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	440b      	add	r3, r1
 80048e0:	330a      	adds	r3, #10
 80048e2:	881b      	ldrh	r3, [r3, #0]
 80048e4:	3301      	adds	r3, #1
 80048e6:	b299      	uxth	r1, r3
 80048e8:	e001      	b.n	80048ee <inc_lock+0x15a>
 80048ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048ee:	4808      	ldr	r0, [pc, #32]	; (8004910 <inc_lock+0x17c>)
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	4613      	mov	r3, r2
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	4413      	add	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4403      	add	r3, r0
 80048fc:	330a      	adds	r3, #10
 80048fe:	460a      	mov	r2, r1
 8004900:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	3301      	adds	r3, #1
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	bc80      	pop	{r7}
 800490e:	4770      	bx	lr
 8004910:	200000c0 	.word	0x200000c0

08004914 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3b01      	subs	r3, #1
 8004920:	607b      	str	r3, [r7, #4]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d82e      	bhi.n	8004986 <dec_lock+0x72>
		n = Files[i].ctr;
 8004928:	491b      	ldr	r1, [pc, #108]	; (8004998 <dec_lock+0x84>)
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	4613      	mov	r3, r2
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	4413      	add	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	440b      	add	r3, r1
 8004936:	330a      	adds	r3, #10
 8004938:	881b      	ldrh	r3, [r3, #0]
 800493a:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800493c:	89fb      	ldrh	r3, [r7, #14]
 800493e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004942:	d101      	bne.n	8004948 <dec_lock+0x34>
 8004944:	2300      	movs	r3, #0
 8004946:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8004948:	89fb      	ldrh	r3, [r7, #14]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d002      	beq.n	8004954 <dec_lock+0x40>
 800494e:	89fb      	ldrh	r3, [r7, #14]
 8004950:	3b01      	subs	r3, #1
 8004952:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004954:	4910      	ldr	r1, [pc, #64]	; (8004998 <dec_lock+0x84>)
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	4613      	mov	r3, r2
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	4413      	add	r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	440b      	add	r3, r1
 8004962:	330a      	adds	r3, #10
 8004964:	89fa      	ldrh	r2, [r7, #14]
 8004966:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004968:	89fb      	ldrh	r3, [r7, #14]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d108      	bne.n	8004980 <dec_lock+0x6c>
 800496e:	490a      	ldr	r1, [pc, #40]	; (8004998 <dec_lock+0x84>)
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	4613      	mov	r3, r2
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	4413      	add	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	440b      	add	r3, r1
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004980:	2300      	movs	r3, #0
 8004982:	737b      	strb	r3, [r7, #13]
 8004984:	e001      	b.n	800498a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004986:	2302      	movs	r3, #2
 8004988:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800498a:	7b7b      	ldrb	r3, [r7, #13]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	bc80      	pop	{r7}
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	200000c0 	.word	0x200000c0

0800499c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80049a4:	2300      	movs	r3, #0
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	e016      	b.n	80049d8 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80049aa:	490f      	ldr	r1, [pc, #60]	; (80049e8 <clear_lock+0x4c>)
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	4613      	mov	r3, r2
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	4413      	add	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	440b      	add	r3, r1
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d108      	bne.n	80049d2 <clear_lock+0x36>
 80049c0:	4909      	ldr	r1, [pc, #36]	; (80049e8 <clear_lock+0x4c>)
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	4613      	mov	r3, r2
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	4413      	add	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	440b      	add	r3, r1
 80049ce:	2200      	movs	r2, #0
 80049d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	3301      	adds	r3, #1
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d9e5      	bls.n	80049aa <clear_lock+0xe>
	}
}
 80049de:	bf00      	nop
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bc80      	pop	{r7}
 80049e6:	4770      	bx	lr
 80049e8:	200000c0 	.word	0x200000c0

080049ec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80049f4:	2300      	movs	r3, #0
 80049f6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049fe:	3304      	adds	r3, #4
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d047      	beq.n	8004a96 <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004a0c:	330c      	adds	r3, #12
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a18:	3301      	adds	r3, #1
 8004a1a:	7818      	ldrb	r0, [r3, #0]
 8004a1c:	6879      	ldr	r1, [r7, #4]
 8004a1e:	2301      	movs	r3, #1
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	f7ff fd6d 	bl	8004500 <disk_write>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <sync_window+0x46>
			res = FR_DISK_ERR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	73fb      	strb	r3, [r7, #15]
 8004a30:	e031      	b.n	8004a96 <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a38:	3304      	adds	r3, #4
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	1ad2      	subs	r2, r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a50:	3318      	adds	r3, #24
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d21e      	bcs.n	8004a96 <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a5e:	3303      	adds	r3, #3
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	613b      	str	r3, [r7, #16]
 8004a64:	e014      	b.n	8004a90 <sync_window+0xa4>
					wsect += fs->fsize;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a6c:	3318      	adds	r3, #24
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	4413      	add	r3, r2
 8004a74:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	7818      	ldrb	r0, [r3, #0]
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	2301      	movs	r3, #1
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	f7ff fd3b 	bl	8004500 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	613b      	str	r3, [r7, #16]
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d8e7      	bhi.n	8004a66 <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3718      	adds	r7, #24
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004ab4:	330c      	adds	r3, #12
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d01f      	beq.n	8004afe <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7ff ff94 	bl	80049ec <sync_window>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d117      	bne.n	8004afe <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	7818      	ldrb	r0, [r3, #0]
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	2301      	movs	r3, #1
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	f7ff fcef 	bl	80044c0 <disk_read>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d004      	beq.n	8004af2 <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8004aec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004af8:	330c      	adds	r3, #12
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7ff ff6b 	bl	80049ec <sync_window>
 8004b16:	4603      	mov	r3, r0
 8004b18:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f040 80bd 	bne.w	8004c9c <sync_fs+0x194>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	f040 80a7 	bne.w	8004c7e <sync_fs+0x176>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b36:	3305      	adds	r3, #5
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	f040 809f 	bne.w	8004c7e <sync_fs+0x176>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b48:	330a      	adds	r3, #10
 8004b4a:	881b      	ldrh	r3, [r3, #0]
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	2100      	movs	r1, #0
 8004b50:	f7ff fd31 	bl	80045b6 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2255      	movs	r2, #85	; 0x55
 8004b58:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	22aa      	movs	r2, #170	; 0xaa
 8004b60:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2252      	movs	r2, #82	; 0x52
 8004b68:	701a      	strb	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2252      	movs	r2, #82	; 0x52
 8004b6e:	705a      	strb	r2, [r3, #1]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2261      	movs	r2, #97	; 0x61
 8004b74:	709a      	strb	r2, [r3, #2]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2241      	movs	r2, #65	; 0x41
 8004b7a:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2272      	movs	r2, #114	; 0x72
 8004b80:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2272      	movs	r2, #114	; 0x72
 8004b88:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2241      	movs	r2, #65	; 0x41
 8004b90:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2261      	movs	r2, #97	; 0x61
 8004b98:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ba2:	3310      	adds	r3, #16
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bb4:	3310      	adds	r3, #16
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	0a1b      	lsrs	r3, r3, #8
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bcc:	3310      	adds	r3, #16
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	0c1b      	lsrs	r3, r3, #16
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004be0:	3310      	adds	r3, #16
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	0e1b      	lsrs	r3, r3, #24
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bf4:	330c      	adds	r3, #12
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c06:	330c      	adds	r3, #12
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	0a1b      	lsrs	r3, r3, #8
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c1e:	330c      	adds	r3, #12
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	0c1b      	lsrs	r3, r3, #16
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c32:	330c      	adds	r3, #12
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	0e1b      	lsrs	r3, r3, #24
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c46:	331c      	adds	r3, #28
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	1c5a      	adds	r2, r3, #1
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004c52:	330c      	adds	r3, #12
 8004c54:	601a      	str	r2, [r3, #0]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	7818      	ldrb	r0, [r3, #0]
 8004c60:	6879      	ldr	r1, [r7, #4]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004c68:	330c      	adds	r3, #12
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	f7ff fc47 	bl	8004500 <disk_write>
			fs->fsi_flag = 0;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c78:	3305      	adds	r3, #5
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	701a      	strb	r2, [r3, #0]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c84:	3301      	adds	r3, #1
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff fc57 	bl	8004540 <disk_ioctl>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <sync_fs+0x194>
			res = FR_DISK_ERR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
 8004cae:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	3b02      	subs	r3, #2
 8004cb4:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cbc:	3314      	adds	r3, #20
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3b02      	subs	r3, #2
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d301      	bcc.n	8004ccc <clust2sect+0x26>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	e00e      	b.n	8004cea <clust2sect+0x44>
	return clst * fs->csize + fs->database;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cd2:	3302      	adds	r3, #2
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	fb03 f202 	mul.w	r2, r3, r2
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004ce4:	3308      	adds	r3, #8
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4413      	add	r3, r2
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bc80      	pop	{r7}
 8004cf2:	4770      	bx	lr

08004cf4 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d907      	bls.n	8004d14 <get_fat+0x20>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d0a:	3314      	adds	r3, #20
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d302      	bcc.n	8004d1a <get_fat+0x26>
		val = 1;	/* Internal error */
 8004d14:	2301      	movs	r3, #1
 8004d16:	617b      	str	r3, [r7, #20]
 8004d18:	e0e9      	b.n	8004eee <get_fat+0x1fa>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d1e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d068      	beq.n	8004dfe <get_fat+0x10a>
 8004d2c:	2b03      	cmp	r3, #3
 8004d2e:	f000 8099 	beq.w	8004e64 <get_fat+0x170>
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	f040 80d1 	bne.w	8004eda <get_fat+0x1e6>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	085b      	lsrs	r3, r3, #1
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	4413      	add	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d54:	330a      	adds	r3, #10
 8004d56:	881b      	ldrh	r3, [r3, #0]
 8004d58:	4619      	mov	r1, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d60:	4413      	add	r3, r2
 8004d62:	4619      	mov	r1, r3
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f7ff fe9b 	bl	8004aa0 <move_window>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f040 80b7 	bne.w	8004ee0 <get_fat+0x1ec>
			wc = fs->win.d8[bc++ % SS(fs)];
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	60fa      	str	r2, [r7, #12]
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d7e:	320a      	adds	r2, #10
 8004d80:	8812      	ldrh	r2, [r2, #0]
 8004d82:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d86:	fb02 f201 	mul.w	r2, r2, r1
 8004d8a:	1a9b      	subs	r3, r3, r2
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	5cd3      	ldrb	r3, [r2, r3]
 8004d90:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004da0:	330a      	adds	r3, #10
 8004da2:	881b      	ldrh	r3, [r3, #0]
 8004da4:	4619      	mov	r1, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	fbb3 f3f1 	udiv	r3, r3, r1
 8004dac:	4413      	add	r3, r2
 8004dae:	4619      	mov	r1, r3
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff fe75 	bl	8004aa0 <move_window>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f040 8093 	bne.w	8004ee4 <get_fat+0x1f0>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dc4:	330a      	adds	r3, #10
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	fbb3 f1f2 	udiv	r1, r3, r2
 8004dd0:	fb02 f201 	mul.w	r2, r2, r1
 8004dd4:	1a9b      	subs	r3, r3, r2
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	5cd3      	ldrb	r3, [r2, r3]
 8004dda:	021b      	lsls	r3, r3, #8
 8004ddc:	461a      	mov	r2, r3
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d002      	beq.n	8004df4 <get_fat+0x100>
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	091b      	lsrs	r3, r3, #4
 8004df2:	e002      	b.n	8004dfa <get_fat+0x106>
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dfa:	617b      	str	r3, [r7, #20]
			break;
 8004dfc:	e077      	b.n	8004eee <get_fat+0x1fa>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e0c:	330a      	adds	r3, #10
 8004e0e:	881b      	ldrh	r3, [r3, #0]
 8004e10:	085b      	lsrs	r3, r3, #1
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	4619      	mov	r1, r3
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e1c:	4413      	add	r3, r2
 8004e1e:	4619      	mov	r1, r3
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f7ff fe3d 	bl	8004aa0 <move_window>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d15d      	bne.n	8004ee8 <get_fat+0x1f4>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	005a      	lsls	r2, r3, #1
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e36:	330a      	adds	r3, #10
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	fbb2 f1f3 	udiv	r1, r2, r3
 8004e3e:	fb03 f301 	mul.w	r3, r3, r1
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	4413      	add	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	021b      	lsls	r3, r3, #8
 8004e52:	b21a      	sxth	r2, r3
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	b21b      	sxth	r3, r3
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	b21b      	sxth	r3, r3
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	617b      	str	r3, [r7, #20]
			break;
 8004e62:	e044      	b.n	8004eee <get_fat+0x1fa>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e72:	330a      	adds	r3, #10
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	089b      	lsrs	r3, r3, #2
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e82:	4413      	add	r3, r2
 8004e84:	4619      	mov	r1, r3
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7ff fe0a 	bl	8004aa0 <move_window>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d12c      	bne.n	8004eec <get_fat+0x1f8>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	009a      	lsls	r2, r3, #2
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e9c:	330a      	adds	r3, #10
 8004e9e:	881b      	ldrh	r3, [r3, #0]
 8004ea0:	fbb2 f1f3 	udiv	r1, r2, r3
 8004ea4:	fb03 f301 	mul.w	r3, r3, r1
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	4413      	add	r3, r2
 8004eae:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	3303      	adds	r3, #3
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	061a      	lsls	r2, r3, #24
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	3302      	adds	r3, #2
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	041b      	lsls	r3, r3, #16
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	3201      	adds	r2, #1
 8004ec6:	7812      	ldrb	r2, [r2, #0]
 8004ec8:	0212      	lsls	r2, r2, #8
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	7812      	ldrb	r2, [r2, #0]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004ed6:	617b      	str	r3, [r7, #20]
			break;
 8004ed8:	e009      	b.n	8004eee <get_fat+0x1fa>

		default:
			val = 1;	/* Internal error */
 8004eda:	2301      	movs	r3, #1
 8004edc:	617b      	str	r3, [r7, #20]
 8004ede:	e006      	b.n	8004eee <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004ee0:	bf00      	nop
 8004ee2:	e004      	b.n	8004eee <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004ee4:	bf00      	nop
 8004ee6:	e002      	b.n	8004eee <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004ee8:	bf00      	nop
 8004eea:	e000      	b.n	8004eee <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004eec:	bf00      	nop
		}
	}

	return val;
 8004eee:	697b      	ldr	r3, [r7, #20]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3718      	adds	r7, #24
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b088      	sub	sp, #32
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d907      	bls.n	8004f1a <put_fat+0x22>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f10:	3314      	adds	r3, #20
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d302      	bcc.n	8004f20 <put_fat+0x28>
		res = FR_INT_ERR;
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	77fb      	strb	r3, [r7, #31]
 8004f1e:	e143      	b.n	80051a8 <put_fat+0x2b0>

	} else {
		switch (fs->fs_type) {
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	f000 809a 	beq.w	8005062 <put_fat+0x16a>
 8004f2e:	2b03      	cmp	r3, #3
 8004f30:	f000 80d3 	beq.w	80050da <put_fat+0x1e2>
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	f040 812d 	bne.w	8005194 <put_fat+0x29c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	617b      	str	r3, [r7, #20]
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	085b      	lsrs	r3, r3, #1
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	4413      	add	r3, r2
 8004f46:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f56:	330a      	adds	r3, #10
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f62:	4413      	add	r3, r2
 8004f64:	4619      	mov	r1, r3
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f7ff fd9a 	bl	8004aa0 <move_window>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004f70:	7ffb      	ldrb	r3, [r7, #31]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f040 8111 	bne.w	800519a <put_fat+0x2a2>
			p = &fs->win.d8[bc++ % SS(fs)];
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	617a      	str	r2, [r7, #20]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004f84:	320a      	adds	r2, #10
 8004f86:	8812      	ldrh	r2, [r2, #0]
 8004f88:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f8c:	fb02 f201 	mul.w	r2, r2, r1
 8004f90:	1a9b      	subs	r3, r3, r2
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	4413      	add	r3, r2
 8004f96:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00d      	beq.n	8004fbe <put_fat+0xc6>
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	b25b      	sxtb	r3, r3
 8004fa8:	f003 030f 	and.w	r3, r3, #15
 8004fac:	b25a      	sxtb	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	b25b      	sxtb	r3, r3
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	b25b      	sxtb	r3, r3
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	e001      	b.n	8004fc2 <put_fat+0xca>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fcc:	3304      	adds	r3, #4
 8004fce:	2201      	movs	r2, #1
 8004fd0:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fe0:	330a      	adds	r3, #10
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	fbb3 f3f1 	udiv	r3, r3, r1
 8004fec:	4413      	add	r3, r2
 8004fee:	4619      	mov	r1, r3
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f7ff fd55 	bl	8004aa0 <move_window>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004ffa:	7ffb      	ldrb	r3, [r7, #31]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f040 80ce 	bne.w	800519e <put_fat+0x2a6>
			p = &fs->win.d8[bc % SS(fs)];
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005008:	330a      	adds	r3, #10
 800500a:	881b      	ldrh	r3, [r3, #0]
 800500c:	461a      	mov	r2, r3
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	fbb3 f1f2 	udiv	r1, r3, r2
 8005014:	fb02 f201 	mul.w	r2, r2, r1
 8005018:	1a9b      	subs	r3, r3, r2
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	4413      	add	r3, r2
 800501e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <put_fat+0x13a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	091b      	lsrs	r3, r3, #4
 800502e:	b2db      	uxtb	r3, r3
 8005030:	e00e      	b.n	8005050 <put_fat+0x158>
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	b25b      	sxtb	r3, r3
 8005038:	f023 030f 	bic.w	r3, r3, #15
 800503c:	b25a      	sxtb	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	0a1b      	lsrs	r3, r3, #8
 8005042:	b25b      	sxtb	r3, r3
 8005044:	f003 030f 	and.w	r3, r3, #15
 8005048:	b25b      	sxtb	r3, r3
 800504a:	4313      	orrs	r3, r2
 800504c:	b25b      	sxtb	r3, r3
 800504e:	b2db      	uxtb	r3, r3
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800505a:	3304      	adds	r3, #4
 800505c:	2201      	movs	r2, #1
 800505e:	701a      	strb	r2, [r3, #0]
			break;
 8005060:	e0a2      	b.n	80051a8 <put_fat+0x2b0>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005070:	330a      	adds	r3, #10
 8005072:	881b      	ldrh	r3, [r3, #0]
 8005074:	085b      	lsrs	r3, r3, #1
 8005076:	b29b      	uxth	r3, r3
 8005078:	4619      	mov	r1, r3
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005080:	4413      	add	r3, r2
 8005082:	4619      	mov	r1, r3
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f7ff fd0b 	bl	8004aa0 <move_window>
 800508a:	4603      	mov	r3, r0
 800508c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800508e:	7ffb      	ldrb	r3, [r7, #31]
 8005090:	2b00      	cmp	r3, #0
 8005092:	f040 8086 	bne.w	80051a2 <put_fat+0x2aa>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	005a      	lsls	r2, r3, #1
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050a0:	330a      	adds	r3, #10
 80050a2:	881b      	ldrh	r3, [r3, #0]
 80050a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80050a8:	fb03 f301 	mul.w	r3, r3, r1
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	4413      	add	r3, r2
 80050b2:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	701a      	strb	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	b29b      	uxth	r3, r3
 80050c0:	0a1b      	lsrs	r3, r3, #8
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	3301      	adds	r3, #1
 80050c8:	b2d2      	uxtb	r2, r2
 80050ca:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050d2:	3304      	adds	r3, #4
 80050d4:	2201      	movs	r2, #1
 80050d6:	701a      	strb	r2, [r3, #0]
			break;
 80050d8:	e066      	b.n	80051a8 <put_fat+0x2b0>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050e8:	330a      	adds	r3, #10
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	089b      	lsrs	r3, r3, #2
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	4619      	mov	r1, r3
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80050f8:	4413      	add	r3, r2
 80050fa:	4619      	mov	r1, r3
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f7ff fccf 	bl	8004aa0 <move_window>
 8005102:	4603      	mov	r3, r0
 8005104:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005106:	7ffb      	ldrb	r3, [r7, #31]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d14c      	bne.n	80051a6 <put_fat+0x2ae>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	009a      	lsls	r2, r3, #2
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005116:	330a      	adds	r3, #10
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	fbb2 f1f3 	udiv	r1, r2, r3
 800511e:	fb03 f301 	mul.w	r3, r3, r1
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4413      	add	r3, r2
 8005128:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	3303      	adds	r3, #3
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	061a      	lsls	r2, r3, #24
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	3302      	adds	r3, #2
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	041b      	lsls	r3, r3, #16
 800513a:	4313      	orrs	r3, r2
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	3201      	adds	r2, #1
 8005140:	7812      	ldrb	r2, [r2, #0]
 8005142:	0212      	lsls	r2, r2, #8
 8005144:	4313      	orrs	r3, r2
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	7812      	ldrb	r2, [r2, #0]
 800514a:	4313      	orrs	r3, r2
 800514c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	4313      	orrs	r3, r2
 8005154:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	b2da      	uxtb	r2, r3
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	701a      	strb	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	b29b      	uxth	r3, r3
 8005162:	0a1b      	lsrs	r3, r3, #8
 8005164:	b29a      	uxth	r2, r3
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	3301      	adds	r3, #1
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	701a      	strb	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	0c1a      	lsrs	r2, r3, #16
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	3302      	adds	r3, #2
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	701a      	strb	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	0e1a      	lsrs	r2, r3, #24
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	3303      	adds	r3, #3
 8005182:	b2d2      	uxtb	r2, r2
 8005184:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800518c:	3304      	adds	r3, #4
 800518e:	2201      	movs	r2, #1
 8005190:	701a      	strb	r2, [r3, #0]
			break;
 8005192:	e009      	b.n	80051a8 <put_fat+0x2b0>

		default :
			res = FR_INT_ERR;
 8005194:	2302      	movs	r3, #2
 8005196:	77fb      	strb	r3, [r7, #31]
 8005198:	e006      	b.n	80051a8 <put_fat+0x2b0>
			if (res != FR_OK) break;
 800519a:	bf00      	nop
 800519c:	e004      	b.n	80051a8 <put_fat+0x2b0>
			if (res != FR_OK) break;
 800519e:	bf00      	nop
 80051a0:	e002      	b.n	80051a8 <put_fat+0x2b0>
			if (res != FR_OK) break;
 80051a2:	bf00      	nop
 80051a4:	e000      	b.n	80051a8 <put_fat+0x2b0>
			if (res != FR_OK) break;
 80051a6:	bf00      	nop
		}
	}

	return res;
 80051a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3720      	adds	r7, #32
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b084      	sub	sp, #16
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d907      	bls.n	80051d2 <remove_chain+0x20>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051c8:	3314      	adds	r3, #20
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d302      	bcc.n	80051d8 <remove_chain+0x26>
		res = FR_INT_ERR;
 80051d2:	2302      	movs	r3, #2
 80051d4:	73fb      	strb	r3, [r7, #15]
 80051d6:	e04f      	b.n	8005278 <remove_chain+0xc6>

	} else {
		res = FR_OK;
 80051d8:	2300      	movs	r3, #0
 80051da:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80051dc:	e040      	b.n	8005260 <remove_chain+0xae>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80051de:	6839      	ldr	r1, [r7, #0]
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f7ff fd87 	bl	8004cf4 <get_fat>
 80051e6:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d041      	beq.n	8005272 <remove_chain+0xc0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d102      	bne.n	80051fa <remove_chain+0x48>
 80051f4:	2302      	movs	r3, #2
 80051f6:	73fb      	strb	r3, [r7, #15]
 80051f8:	e03e      	b.n	8005278 <remove_chain+0xc6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005200:	d102      	bne.n	8005208 <remove_chain+0x56>
 8005202:	2301      	movs	r3, #1
 8005204:	73fb      	strb	r3, [r7, #15]
 8005206:	e037      	b.n	8005278 <remove_chain+0xc6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8005208:	2200      	movs	r2, #0
 800520a:	6839      	ldr	r1, [r7, #0]
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f7ff fe73 	bl	8004ef8 <put_fat>
 8005212:	4603      	mov	r3, r0
 8005214:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005216:	7bfb      	ldrb	r3, [r7, #15]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d12c      	bne.n	8005276 <remove_chain+0xc4>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005222:	3310      	adds	r3, #16
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522a:	d017      	beq.n	800525c <remove_chain+0xaa>
				fs->free_clust++;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005232:	3310      	adds	r3, #16
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800523e:	3310      	adds	r3, #16
 8005240:	601a      	str	r2, [r3, #0]
				fs->fsi_flag |= 1;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005248:	3305      	adds	r3, #5
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	f043 0301 	orr.w	r3, r3, #1
 8005250:	b2da      	uxtb	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005258:	3305      	adds	r3, #5
 800525a:	701a      	strb	r2, [r3, #0]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005266:	3314      	adds	r3, #20
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	429a      	cmp	r2, r3
 800526e:	d3b6      	bcc.n	80051de <remove_chain+0x2c>
 8005270:	e002      	b.n	8005278 <remove_chain+0xc6>
			if (nxt == 0) break;				/* Empty cluster? */
 8005272:	bf00      	nop
 8005274:	e000      	b.n	8005278 <remove_chain+0xc6>
			if (res != FR_OK) break;
 8005276:	bf00      	nop
		}
	}

	return res;
 8005278:	7bfb      	ldrb	r3, [r7, #15]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b086      	sub	sp, #24
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d113      	bne.n	80052ba <create_chain+0x38>
		scl = fs->last_clust;			/* Get suggested start point */
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005298:	330c      	adds	r3, #12
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d007      	beq.n	80052b4 <create_chain+0x32>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052aa:	3314      	adds	r3, #20
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d31e      	bcc.n	80052f2 <create_chain+0x70>
 80052b4:	2301      	movs	r3, #1
 80052b6:	613b      	str	r3, [r7, #16]
 80052b8:	e01b      	b.n	80052f2 <create_chain+0x70>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80052ba:	6839      	ldr	r1, [r7, #0]
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f7ff fd19 	bl	8004cf4 <get_fat>
 80052c2:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d801      	bhi.n	80052ce <create_chain+0x4c>
 80052ca:	2301      	movs	r3, #1
 80052cc:	e086      	b.n	80053dc <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d4:	d101      	bne.n	80052da <create_chain+0x58>
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	e080      	b.n	80053dc <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052e0:	3314      	adds	r3, #20
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d201      	bcs.n	80052ee <create_chain+0x6c>
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	e076      	b.n	80053dc <create_chain+0x15a>
		scl = clst;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	3301      	adds	r3, #1
 80052fa:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005302:	3314      	adds	r3, #20
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	429a      	cmp	r2, r3
 800530a:	d307      	bcc.n	800531c <create_chain+0x9a>
			ncl = 2;
 800530c:	2302      	movs	r3, #2
 800530e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	429a      	cmp	r2, r3
 8005316:	d901      	bls.n	800531c <create_chain+0x9a>
 8005318:	2300      	movs	r3, #0
 800531a:	e05f      	b.n	80053dc <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800531c:	6979      	ldr	r1, [r7, #20]
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7ff fce8 	bl	8004cf4 <get_fat>
 8005324:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00e      	beq.n	800534a <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005332:	d002      	beq.n	800533a <create_chain+0xb8>
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d101      	bne.n	800533e <create_chain+0xbc>
			return cs;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	e04e      	b.n	80053dc <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	429a      	cmp	r2, r3
 8005344:	d1d7      	bne.n	80052f6 <create_chain+0x74>
 8005346:	2300      	movs	r3, #0
 8005348:	e048      	b.n	80053dc <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 800534a:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800534c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8005350:	6979      	ldr	r1, [r7, #20]
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7ff fdd0 	bl	8004ef8 <put_fat>
 8005358:	4603      	mov	r3, r0
 800535a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800535c:	7bfb      	ldrb	r3, [r7, #15]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d109      	bne.n	8005376 <create_chain+0xf4>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d006      	beq.n	8005376 <create_chain+0xf4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	6839      	ldr	r1, [r7, #0]
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7ff fdc3 	bl	8004ef8 <put_fat>
 8005372:	4603      	mov	r3, r0
 8005374:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8005376:	7bfb      	ldrb	r3, [r7, #15]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d126      	bne.n	80053ca <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005382:	330c      	adds	r3, #12
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	601a      	str	r2, [r3, #0]
		if (fs->free_clust != 0xFFFFFFFF) {
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800538e:	3310      	adds	r3, #16
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005396:	d020      	beq.n	80053da <create_chain+0x158>
			fs->free_clust--;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800539e:	3310      	adds	r3, #16
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	1e5a      	subs	r2, r3, #1
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053aa:	3310      	adds	r3, #16
 80053ac:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053b4:	3305      	adds	r3, #5
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	f043 0301 	orr.w	r3, r3, #1
 80053bc:	b2da      	uxtb	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053c4:	3305      	adds	r3, #5
 80053c6:	701a      	strb	r2, [r3, #0]
 80053c8:	e007      	b.n	80053da <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80053ca:	7bfb      	ldrb	r3, [r7, #15]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d102      	bne.n	80053d6 <create_chain+0x154>
 80053d0:	f04f 33ff 	mov.w	r3, #4294967295
 80053d4:	e000      	b.n	80053d8 <create_chain+0x156>
 80053d6:	2301      	movs	r3, #1
 80053d8:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80053da:	697b      	ldr	r3, [r7, #20]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3718      	adds	r7, #24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80053f4:	3304      	adds	r3, #4
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3304      	adds	r3, #4
 80053fa:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005408:	330a      	adds	r3, #10
 800540a:	881b      	ldrh	r3, [r3, #0]
 800540c:	461a      	mov	r2, r3
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	fbb3 f2f2 	udiv	r2, r3, r2
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005420:	3302      	adds	r3, #2
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	fbb2 f3f3 	udiv	r3, r2, r3
 8005428:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	1d1a      	adds	r2, r3, #4
 800542e:	613a      	str	r2, [r7, #16]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <clmt_clust+0x5a>
 800543a:	2300      	movs	r3, #0
 800543c:	e010      	b.n	8005460 <clmt_clust+0x7c>
		if (cl < ncl) break;	/* In this fragment? */
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	429a      	cmp	r2, r3
 8005444:	d307      	bcc.n	8005456 <clmt_clust+0x72>
		cl -= ncl; tbl++;		/* Next fragment */
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	617b      	str	r3, [r7, #20]
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	3304      	adds	r3, #4
 8005452:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005454:	e7e9      	b.n	800542a <clmt_clust+0x46>
		if (cl < ncl) break;	/* In this fragment? */
 8005456:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	4413      	add	r3, r2
}
 8005460:	4618      	mov	r0, r3
 8005462:	371c      	adds	r7, #28
 8005464:	46bd      	mov	sp, r7
 8005466:	bc80      	pop	{r7}
 8005468:	4770      	bx	lr

0800546a <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b086      	sub	sp, #24
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	b29a      	uxth	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800547e:	3306      	adds	r3, #6
 8005480:	801a      	strh	r2, [r3, #0]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005488:	3308      	adds	r3, #8
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d00a      	beq.n	80054aa <dir_sdi+0x40>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054a0:	3314      	adds	r3, #20
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d301      	bcc.n	80054ae <dir_sdi+0x44>
		return FR_INT_ERR;
 80054aa:	2302      	movs	r3, #2
 80054ac:	e0b4      	b.n	8005618 <dir_sdi+0x1ae>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d111      	bne.n	80054d8 <dir_sdi+0x6e>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	2b03      	cmp	r3, #3
 80054c4:	d108      	bne.n	80054d8 <dir_sdi+0x6e>
		clst = dp->fs->dirbase;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80054d2:	3304      	adds	r3, #4
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d117      	bne.n	800550e <dir_sdi+0xa4>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054ea:	3308      	adds	r3, #8
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	461a      	mov	r2, r3
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d301      	bcc.n	80054fa <dir_sdi+0x90>
			return FR_INT_ERR;
 80054f6:	2302      	movs	r3, #2
 80054f8:	e08e      	b.n	8005618 <dir_sdi+0x1ae>
		sect = dp->fs->dirbase;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005506:	3304      	adds	r3, #4
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	613b      	str	r3, [r7, #16]
 800550c:	e046      	b.n	800559c <dir_sdi+0x132>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800551a:	330a      	adds	r3, #10
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	095b      	lsrs	r3, r3, #5
 8005520:	b29b      	uxth	r3, r3
 8005522:	461a      	mov	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005530:	3302      	adds	r3, #2
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	fb03 f302 	mul.w	r3, r3, r2
 8005538:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800553a:	e022      	b.n	8005582 <dir_sdi+0x118>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6979      	ldr	r1, [r7, #20]
 8005546:	4618      	mov	r0, r3
 8005548:	f7ff fbd4 	bl	8004cf4 <get_fat>
 800554c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005554:	d101      	bne.n	800555a <dir_sdi+0xf0>
 8005556:	2301      	movs	r3, #1
 8005558:	e05e      	b.n	8005618 <dir_sdi+0x1ae>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d90a      	bls.n	8005576 <dir_sdi+0x10c>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800556c:	3314      	adds	r3, #20
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	429a      	cmp	r2, r3
 8005574:	d301      	bcc.n	800557a <dir_sdi+0x110>
				return FR_INT_ERR;
 8005576:	2302      	movs	r3, #2
 8005578:	e04e      	b.n	8005618 <dir_sdi+0x1ae>
			idx -= ic;
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	429a      	cmp	r2, r3
 8005588:	d2d8      	bcs.n	800553c <dir_sdi+0xd2>
		}
		sect = clust2sect(dp->fs, clst);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6979      	ldr	r1, [r7, #20]
 8005594:	4618      	mov	r0, r3
 8005596:	f7ff fb86 	bl	8004ca6 <clust2sect>
 800559a:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055a2:	330c      	adds	r3, #12
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	601a      	str	r2, [r3, #0]
	if (!sect) return FR_INT_ERR;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <dir_sdi+0x148>
 80055ae:	2302      	movs	r3, #2
 80055b0:	e032      	b.n	8005618 <dir_sdi+0x1ae>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055be:	330a      	adds	r3, #10
 80055c0:	881b      	ldrh	r3, [r3, #0]
 80055c2:	095b      	lsrs	r3, r3, #5
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	461a      	mov	r2, r3
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	441a      	add	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055d8:	3310      	adds	r3, #16
 80055da:	601a      	str	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4618      	mov	r0, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055f2:	330a      	adds	r3, #10
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	095b      	lsrs	r3, r3, #5
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	461a      	mov	r2, r3
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8005602:	fb02 f201 	mul.w	r2, r2, r1
 8005606:	1a9b      	subs	r3, r3, r2
 8005608:	015b      	lsls	r3, r3, #5
 800560a:	18c2      	adds	r2, r0, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005612:	3314      	adds	r3, #20
 8005614:	601a      	str	r2, [r3, #0]

	return FR_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005620:	b590      	push	{r4, r7, lr}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005630:	3306      	adds	r3, #6
 8005632:	881b      	ldrh	r3, [r3, #0]
 8005634:	3301      	adds	r3, #1
 8005636:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	b29b      	uxth	r3, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	d006      	beq.n	800564e <dir_next+0x2e>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005646:	3310      	adds	r3, #16
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <dir_next+0x32>
		return FR_NO_FILE;
 800564e:	2304      	movs	r3, #4
 8005650:	e144      	b.n	80058dc <dir_next+0x2bc>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800565e:	330a      	adds	r3, #10
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	095b      	lsrs	r3, r3, #5
 8005664:	b29b      	uxth	r3, r3
 8005666:	461a      	mov	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	fbb3 f1f2 	udiv	r1, r3, r2
 800566e:	fb02 f201 	mul.w	r2, r2, r1
 8005672:	1a9b      	subs	r3, r3, r2
 8005674:	2b00      	cmp	r3, #0
 8005676:	f040 810c 	bne.w	8005892 <dir_next+0x272>
		dp->sect++;					/* Next sector */
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005680:	3310      	adds	r3, #16
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	1c5a      	adds	r2, r3, #1
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800568c:	3310      	adds	r3, #16
 800568e:	601a      	str	r2, [r3, #0]

		if (!dp->clust) {		/* Static table */
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005696:	330c      	adds	r3, #12
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10e      	bne.n	80056bc <dir_next+0x9c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056aa:	3308      	adds	r3, #8
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	461a      	mov	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4293      	cmp	r3, r2
 80056b4:	f0c0 80ed 	bcc.w	8005892 <dir_next+0x272>
				return FR_NO_FILE;
 80056b8:	2304      	movs	r3, #4
 80056ba:	e10f      	b.n	80058dc <dir_next+0x2bc>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056c8:	330a      	adds	r3, #10
 80056ca:	881b      	ldrh	r3, [r3, #0]
 80056cc:	095b      	lsrs	r3, r3, #5
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	461a      	mov	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	fbb3 f2f2 	udiv	r2, r3, r2
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056e4:	3302      	adds	r3, #2
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	3b01      	subs	r3, #1
 80056ea:	4013      	ands	r3, r2
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f040 80d0 	bne.w	8005892 <dir_next+0x272>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005700:	330c      	adds	r3, #12
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4619      	mov	r1, r3
 8005706:	4610      	mov	r0, r2
 8005708:	f7ff faf4 	bl	8004cf4 <get_fat>
 800570c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d801      	bhi.n	8005718 <dir_next+0xf8>
 8005714:	2302      	movs	r3, #2
 8005716:	e0e1      	b.n	80058dc <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571e:	d101      	bne.n	8005724 <dir_next+0x104>
 8005720:	2301      	movs	r3, #1
 8005722:	e0db      	b.n	80058dc <dir_next+0x2bc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005730:	3314      	adds	r3, #20
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	429a      	cmp	r2, r3
 8005738:	f0c0 8097 	bcc.w	800586a <dir_next+0x24a>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <dir_next+0x126>
 8005742:	2304      	movs	r3, #4
 8005744:	e0ca      	b.n	80058dc <dir_next+0x2bc>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005754:	330c      	adds	r3, #12
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4619      	mov	r1, r3
 800575a:	4610      	mov	r0, r2
 800575c:	f7ff fd91 	bl	8005282 <create_chain>
 8005760:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <dir_next+0x14c>
 8005768:	2307      	movs	r3, #7
 800576a:	e0b7      	b.n	80058dc <dir_next+0x2bc>
					if (clst == 1) return FR_INT_ERR;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d101      	bne.n	8005776 <dir_next+0x156>
 8005772:	2302      	movs	r3, #2
 8005774:	e0b2      	b.n	80058dc <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577c:	d101      	bne.n	8005782 <dir_next+0x162>
 800577e:	2301      	movs	r3, #1
 8005780:	e0ac      	b.n	80058dc <dir_next+0x2bc>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4618      	mov	r0, r3
 800578c:	f7ff f92e 	bl	80049ec <sync_window>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <dir_next+0x17a>
 8005796:	2301      	movs	r3, #1
 8005798:	e0a0      	b.n	80058dc <dir_next+0x2bc>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4618      	mov	r0, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057b0:	330a      	adds	r3, #10
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	461a      	mov	r2, r3
 80057b6:	2100      	movs	r1, #0
 80057b8:	f7fe fefd 	bl	80045b6 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057ca:	681c      	ldr	r4, [r3, #0]
 80057cc:	6979      	ldr	r1, [r7, #20]
 80057ce:	4610      	mov	r0, r2
 80057d0:	f7ff fa69 	bl	8004ca6 <clust2sect>
 80057d4:	4602      	mov	r2, r0
 80057d6:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 80057da:	330c      	adds	r3, #12
 80057dc:	601a      	str	r2, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80057de:	2300      	movs	r3, #0
 80057e0:	613b      	str	r3, [r7, #16]
 80057e2:	e024      	b.n	800582e <dir_next+0x20e>
						dp->fs->wflag = 1;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057f0:	3304      	adds	r3, #4
 80057f2:	2201      	movs	r2, #1
 80057f4:	701a      	strb	r2, [r3, #0]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4618      	mov	r0, r3
 8005800:	f7ff f8f4 	bl	80049ec <sync_window>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d001      	beq.n	800580e <dir_next+0x1ee>
 800580a:	2301      	movs	r3, #1
 800580c:	e066      	b.n	80058dc <dir_next+0x2bc>
						dp->fs->winsect++;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 800581a:	330c      	adds	r3, #12
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	1c59      	adds	r1, r3, #1
 8005820:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8005824:	330c      	adds	r3, #12
 8005826:	6019      	str	r1, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	3301      	adds	r3, #1
 800582c:	613b      	str	r3, [r7, #16]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800583a:	3302      	adds	r3, #2
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	461a      	mov	r2, r3
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	4293      	cmp	r3, r2
 8005844:	d3ce      	bcc.n	80057e4 <dir_next+0x1c4>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005852:	330c      	adds	r3, #12
 8005854:	6819      	ldr	r1, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	1a8a      	subs	r2, r1, r2
 8005862:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005866:	330c      	adds	r3, #12
 8005868:	601a      	str	r2, [r3, #0]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005870:	330c      	adds	r3, #12
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	601a      	str	r2, [r3, #0]
				dp->sect = clust2sect(dp->fs, clst);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6979      	ldr	r1, [r7, #20]
 8005880:	4618      	mov	r0, r3
 8005882:	f7ff fa10 	bl	8004ca6 <clust2sect>
 8005886:	4602      	mov	r2, r0
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800588e:	3310      	adds	r3, #16
 8005890:	601a      	str	r2, [r3, #0]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	b29a      	uxth	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800589c:	3306      	adds	r3, #6
 800589e:	801a      	strh	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4618      	mov	r0, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058b6:	330a      	adds	r3, #10
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	095b      	lsrs	r3, r3, #5
 80058bc:	b29b      	uxth	r3, r3
 80058be:	461a      	mov	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80058c6:	fb02 f201 	mul.w	r2, r2, r1
 80058ca:	1a9b      	subs	r3, r3, r2
 80058cc:	015b      	lsls	r3, r3, #5
 80058ce:	18c2      	adds	r2, r0, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058d6:	3314      	adds	r3, #20
 80058d8:	601a      	str	r2, [r3, #0]

	return FR_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	371c      	adds	r7, #28
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd90      	pop	{r4, r7, pc}

080058e4 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80058ee:	2100      	movs	r1, #0
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7ff fdba 	bl	800546a <dir_sdi>
 80058f6:	4603      	mov	r3, r0
 80058f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80058fa:	7bfb      	ldrb	r3, [r7, #15]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d138      	bne.n	8005972 <dir_alloc+0x8e>
		n = 0;
 8005900:	2300      	movs	r3, #0
 8005902:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005912:	3310      	adds	r3, #16
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4619      	mov	r1, r3
 8005918:	4610      	mov	r0, r2
 800591a:	f7ff f8c1 	bl	8004aa0 <move_window>
 800591e:	4603      	mov	r3, r0
 8005920:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005922:	7bfb      	ldrb	r3, [r7, #15]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d123      	bne.n	8005970 <dir_alloc+0x8c>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800592e:	3314      	adds	r3, #20
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2be5      	cmp	r3, #229	; 0xe5
 8005936:	d007      	beq.n	8005948 <dir_alloc+0x64>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800593e:	3314      	adds	r3, #20
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d107      	bne.n	8005958 <dir_alloc+0x74>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	3301      	adds	r3, #1
 800594c:	60bb      	str	r3, [r7, #8]
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	429a      	cmp	r2, r3
 8005954:	d102      	bne.n	800595c <dir_alloc+0x78>
 8005956:	e00c      	b.n	8005972 <dir_alloc+0x8e>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005958:	2300      	movs	r3, #0
 800595a:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800595c:	2101      	movs	r1, #1
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7ff fe5e 	bl	8005620 <dir_next>
 8005964:	4603      	mov	r3, r0
 8005966:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8005968:	7bfb      	ldrb	r3, [r7, #15]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d0ca      	beq.n	8005904 <dir_alloc+0x20>
 800596e:	e000      	b.n	8005972 <dir_alloc+0x8e>
			if (res != FR_OK) break;
 8005970:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005972:	7bfb      	ldrb	r3, [r7, #15]
 8005974:	2b04      	cmp	r3, #4
 8005976:	d101      	bne.n	800597c <dir_alloc+0x98>
 8005978:	2307      	movs	r3, #7
 800597a:	73fb      	strb	r3, [r7, #15]
	return res;
 800597c:	7bfb      	ldrb	r3, [r7, #15]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8005986:	b480      	push	{r7}
 8005988:	b085      	sub	sp, #20
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	331b      	adds	r3, #27
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	021b      	lsls	r3, r3, #8
 8005998:	b21a      	sxth	r2, r3
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	331a      	adds	r3, #26
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	b21b      	sxth	r3, r3
 80059a2:	4313      	orrs	r3, r2
 80059a4:	b21b      	sxth	r3, r3
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	2b03      	cmp	r3, #3
 80059b4:	d10f      	bne.n	80059d6 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	3315      	adds	r3, #21
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	021b      	lsls	r3, r3, #8
 80059be:	b21a      	sxth	r2, r3
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	3314      	adds	r3, #20
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	b21b      	sxth	r3, r3
 80059c8:	4313      	orrs	r3, r2
 80059ca:	b21b      	sxth	r3, r3
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	041b      	lsls	r3, r3, #16
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]

	return cl;
 80059d6:	68fb      	ldr	r3, [r7, #12]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	bc80      	pop	{r7}
 80059e0:	4770      	bx	lr

080059e2 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b083      	sub	sp, #12
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
 80059ea:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	331a      	adds	r3, #26
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	b2d2      	uxtb	r2, r2
 80059f4:	701a      	strb	r2, [r3, #0]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	0a1b      	lsrs	r3, r3, #8
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	331b      	adds	r3, #27
 8005a02:	b2d2      	uxtb	r2, r2
 8005a04:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	0c1a      	lsrs	r2, r3, #16
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	3314      	adds	r3, #20
 8005a0e:	b2d2      	uxtb	r2, r2
 8005a10:	701a      	strb	r2, [r3, #0]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	0c1b      	lsrs	r3, r3, #16
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	0a1b      	lsrs	r3, r3, #8
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	3315      	adds	r3, #21
 8005a20:	b2d2      	uxtb	r2, r2
 8005a22:	701a      	strb	r2, [r3, #0]
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bc80      	pop	{r7}
 8005a2c:	4770      	bx	lr
	...

08005a30 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a42:	1e5a      	subs	r2, r3, #1
 8005a44:	4613      	mov	r3, r2
 8005a46:	005b      	lsls	r3, r3, #1
 8005a48:	4413      	add	r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4413      	add	r3, r2
 8005a4e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8005a50:	2300      	movs	r3, #0
 8005a52:	613b      	str	r3, [r7, #16]
 8005a54:	2301      	movs	r3, #1
 8005a56:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8005a58:	4a2b      	ldr	r2, [pc, #172]	; (8005b08 <cmp_lfn+0xd8>)
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	3301      	adds	r3, #1
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	4413      	add	r3, r2
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	021b      	lsls	r3, r3, #8
 8005a6a:	b21a      	sxth	r2, r3
 8005a6c:	4926      	ldr	r1, [pc, #152]	; (8005b08 <cmp_lfn+0xd8>)
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	440b      	add	r3, r1
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	4619      	mov	r1, r3
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	440b      	add	r3, r1
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	b21b      	sxth	r3, r3
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	b21b      	sxth	r3, r3
 8005a82:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8005a84:	89fb      	ldrh	r3, [r7, #14]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d019      	beq.n	8005abe <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8005a8a:	89bb      	ldrh	r3, [r7, #12]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f002 f97f 	bl	8007d90 <ff_wtoupper>
 8005a92:	4603      	mov	r3, r0
 8005a94:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	2bfe      	cmp	r3, #254	; 0xfe
 8005a9a:	d80e      	bhi.n	8005aba <cmp_lfn+0x8a>
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	1c5a      	adds	r2, r3, #1
 8005aa0:	617a      	str	r2, [r7, #20]
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f002 f970 	bl	8007d90 <ff_wtoupper>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	89fb      	ldrh	r3, [r7, #14]
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d008      	beq.n	8005acc <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8005aba:	2300      	movs	r3, #0
 8005abc:	e01f      	b.n	8005afe <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8005abe:	89bb      	ldrh	r3, [r7, #12]
 8005ac0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d001      	beq.n	8005acc <cmp_lfn+0x9c>
 8005ac8:	2300      	movs	r3, #0
 8005aca:	e018      	b.n	8005afe <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	613b      	str	r3, [r7, #16]
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	2b0c      	cmp	r3, #12
 8005ad6:	d9bf      	bls.n	8005a58 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00b      	beq.n	8005afc <cmp_lfn+0xcc>
 8005ae4:	89fb      	ldrh	r3, [r7, #14]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d008      	beq.n	8005afc <cmp_lfn+0xcc>
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	4413      	add	r3, r2
 8005af2:	881b      	ldrh	r3, [r3, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d001      	beq.n	8005afc <cmp_lfn+0xcc>
		return 0;
 8005af8:	2300      	movs	r3, #0
 8005afa:	e000      	b.n	8005afe <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8005afc:	2301      	movs	r3, #1
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3718      	adds	r7, #24
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	08009124 	.word	0x08009124

08005b0c <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b089      	sub	sp, #36	; 0x24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	4611      	mov	r1, r2
 8005b18:	461a      	mov	r2, r3
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	71fb      	strb	r3, [r7, #7]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	330d      	adds	r3, #13
 8005b26:	79ba      	ldrb	r2, [r7, #6]
 8005b28:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	330b      	adds	r3, #11
 8005b2e:	220f      	movs	r2, #15
 8005b30:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	330c      	adds	r3, #12
 8005b36:	2200      	movs	r2, #0
 8005b38:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	331a      	adds	r3, #26
 8005b3e:	2200      	movs	r2, #0
 8005b40:	701a      	strb	r2, [r3, #0]
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	331b      	adds	r3, #27
 8005b46:	2200      	movs	r2, #0
 8005b48:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8005b4a:	79fb      	ldrb	r3, [r7, #7]
 8005b4c:	1e5a      	subs	r2, r3, #1
 8005b4e:	4613      	mov	r3, r2
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	4413      	add	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	82fb      	strh	r3, [r7, #22]
 8005b5e:	2300      	movs	r3, #0
 8005b60:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8005b62:	8afb      	ldrh	r3, [r7, #22]
 8005b64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d007      	beq.n	8005b7c <fit_lfn+0x70>
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	1c5a      	adds	r2, r3, #1
 8005b70:	61fa      	str	r2, [r7, #28]
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	4413      	add	r3, r2
 8005b78:	881b      	ldrh	r3, [r3, #0]
 8005b7a:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005b7c:	4a1c      	ldr	r2, [pc, #112]	; (8005bf0 <fit_lfn+0xe4>)
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	4413      	add	r3, r2
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	461a      	mov	r2, r3
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	4413      	add	r3, r2
 8005b8a:	8afa      	ldrh	r2, [r7, #22]
 8005b8c:	b2d2      	uxtb	r2, r2
 8005b8e:	701a      	strb	r2, [r3, #0]
 8005b90:	8afb      	ldrh	r3, [r7, #22]
 8005b92:	0a1b      	lsrs	r3, r3, #8
 8005b94:	b299      	uxth	r1, r3
 8005b96:	4a16      	ldr	r2, [pc, #88]	; (8005bf0 <fit_lfn+0xe4>)
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	b2ca      	uxtb	r2, r1
 8005ba6:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8005ba8:	8afb      	ldrh	r3, [r7, #22]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d102      	bne.n	8005bb4 <fit_lfn+0xa8>
 8005bae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005bb2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	61bb      	str	r3, [r7, #24]
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	2b0c      	cmp	r3, #12
 8005bbe:	d9d0      	bls.n	8005b62 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8005bc0:	8afb      	ldrh	r3, [r7, #22]
 8005bc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d006      	beq.n	8005bd8 <fit_lfn+0xcc>
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	005b      	lsls	r3, r3, #1
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	881b      	ldrh	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d103      	bne.n	8005be0 <fit_lfn+0xd4>
 8005bd8:	79fb      	ldrb	r3, [r7, #7]
 8005bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bde:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	79fa      	ldrb	r2, [r7, #7]
 8005be4:	701a      	strb	r2, [r3, #0]
}
 8005be6:	bf00      	nop
 8005be8:	3724      	adds	r7, #36	; 0x24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bc80      	pop	{r7}
 8005bee:	4770      	bx	lr
 8005bf0:	08009124 	.word	0x08009124

08005bf4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b08c      	sub	sp, #48	; 0x30
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
 8005c00:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005c02:	220b      	movs	r2, #11
 8005c04:	68b9      	ldr	r1, [r7, #8]
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f7fe fcb8 	bl	800457c <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	2b05      	cmp	r3, #5
 8005c10:	d92b      	bls.n	8005c6a <gen_numname+0x76>
		sr = seq;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005c16:	e022      	b.n	8005c5e <gen_numname+0x6a>
			wc = *lfn++;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	1c9a      	adds	r2, r3, #2
 8005c1c:	607a      	str	r2, [r7, #4]
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8005c22:	2300      	movs	r3, #0
 8005c24:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c26:	e017      	b.n	8005c58 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	005a      	lsls	r2, r3, #1
 8005c2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	4413      	add	r3, r2
 8005c34:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005c36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c38:	085b      	lsrs	r3, r3, #1
 8005c3a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d005      	beq.n	8005c52 <gen_numname+0x5e>
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8005c4c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8005c50:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c54:	3301      	adds	r3, #1
 8005c56:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5a:	2b0f      	cmp	r3, #15
 8005c5c:	d9e4      	bls.n	8005c28 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1d8      	bne.n	8005c18 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005c6a:	2307      	movs	r3, #7
 8005c6c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	f003 030f 	and.w	r3, r3, #15
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	3330      	adds	r3, #48	; 0x30
 8005c7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8005c7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c82:	2b39      	cmp	r3, #57	; 0x39
 8005c84:	d904      	bls.n	8005c90 <gen_numname+0x9c>
 8005c86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c8a:	3307      	adds	r3, #7
 8005c8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8005c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c92:	1e5a      	subs	r2, r3, #1
 8005c94:	62ba      	str	r2, [r7, #40]	; 0x28
 8005c96:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005ca0:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	091b      	lsrs	r3, r3, #4
 8005ca8:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1de      	bne.n	8005c6e <gen_numname+0x7a>
	ns[i] = '~';
 8005cb0:	f107 0214 	add.w	r2, r7, #20
 8005cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb6:	4413      	add	r3, r2
 8005cb8:	227e      	movs	r2, #126	; 0x7e
 8005cba:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8005cc0:	e002      	b.n	8005cc8 <gen_numname+0xd4>
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8005cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d205      	bcs.n	8005cdc <gen_numname+0xe8>
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	4413      	add	r3, r2
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	2b20      	cmp	r3, #32
 8005cda:	d1f2      	bne.n	8005cc2 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cde:	2b07      	cmp	r3, #7
 8005ce0:	d808      	bhi.n	8005cf4 <gen_numname+0x100>
 8005ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	62ba      	str	r2, [r7, #40]	; 0x28
 8005ce8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005cec:	4413      	add	r3, r2
 8005cee:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005cf2:	e000      	b.n	8005cf6 <gen_numname+0x102>
 8005cf4:	2120      	movs	r1, #32
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	1c5a      	adds	r2, r3, #1
 8005cfa:	627a      	str	r2, [r7, #36]	; 0x24
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	4413      	add	r3, r2
 8005d00:	460a      	mov	r2, r1
 8005d02:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	2b07      	cmp	r3, #7
 8005d08:	d9e8      	bls.n	8005cdc <gen_numname+0xe8>
}
 8005d0a:	bf00      	nop
 8005d0c:	3730      	adds	r7, #48	; 0x30
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b085      	sub	sp, #20
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005d1e:	230b      	movs	r3, #11
 8005d20:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8005d22:	7bfb      	ldrb	r3, [r7, #15]
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	0852      	lsrs	r2, r2, #1
 8005d28:	01db      	lsls	r3, r3, #7
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	1c59      	adds	r1, r3, #1
 8005d32:	6079      	str	r1, [r7, #4]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	4413      	add	r3, r2
 8005d38:	73fb      	strb	r3, [r7, #15]
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	60bb      	str	r3, [r7, #8]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1ed      	bne.n	8005d22 <sum_sfn+0x10>
	return sum;
 8005d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bc80      	pop	{r7}
 8005d50:	4770      	bx	lr

08005d52 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b086      	sub	sp, #24
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f7ff fb84 	bl	800546a <dir_sdi>
 8005d62:	4603      	mov	r3, r0
 8005d64:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005d66:	7dfb      	ldrb	r3, [r7, #23]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d001      	beq.n	8005d70 <dir_find+0x1e>
 8005d6c:	7dfb      	ldrb	r3, [r7, #23]
 8005d6e:	e0c1      	b.n	8005ef4 <dir_find+0x1a2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8005d70:	23ff      	movs	r3, #255	; 0xff
 8005d72:	753b      	strb	r3, [r7, #20]
 8005d74:	7d3b      	ldrb	r3, [r7, #20]
 8005d76:	757b      	strb	r3, [r7, #21]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005d7e:	3304      	adds	r3, #4
 8005d80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d84:	801a      	strh	r2, [r3, #0]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d94:	3310      	adds	r3, #16
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4619      	mov	r1, r3
 8005d9a:	4610      	mov	r0, r2
 8005d9c:	f7fe fe80 	bl	8004aa0 <move_window>
 8005da0:	4603      	mov	r3, r0
 8005da2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005da4:	7dfb      	ldrb	r3, [r7, #23]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f040 809e 	bne.w	8005ee8 <dir_find+0x196>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005db2:	3314      	adds	r3, #20
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005dbe:	7dbb      	ldrb	r3, [r7, #22]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d102      	bne.n	8005dca <dir_find+0x78>
 8005dc4:	2304      	movs	r3, #4
 8005dc6:	75fb      	strb	r3, [r7, #23]
 8005dc8:	e093      	b.n	8005ef2 <dir_find+0x1a0>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	330b      	adds	r3, #11
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dd4:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005dd6:	7dbb      	ldrb	r3, [r7, #22]
 8005dd8:	2be5      	cmp	r3, #229	; 0xe5
 8005dda:	d007      	beq.n	8005dec <dir_find+0x9a>
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
 8005dde:	f003 0308 	and.w	r3, r3, #8
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00c      	beq.n	8005e00 <dir_find+0xae>
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
 8005de8:	2b0f      	cmp	r3, #15
 8005dea:	d009      	beq.n	8005e00 <dir_find+0xae>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8005dec:	23ff      	movs	r3, #255	; 0xff
 8005dee:	757b      	strb	r3, [r7, #21]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005df6:	3304      	adds	r3, #4
 8005df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dfc:	801a      	strh	r2, [r3, #0]
 8005dfe:	e068      	b.n	8005ed2 <dir_find+0x180>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
 8005e02:	2b0f      	cmp	r3, #15
 8005e04:	d139      	bne.n	8005e7a <dir_find+0x128>
				if (dp->lfn) {
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d05f      	beq.n	8005ed2 <dir_find+0x180>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005e12:	7dbb      	ldrb	r3, [r7, #22]
 8005e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d012      	beq.n	8005e42 <dir_find+0xf0>
						sum = dir[LDIR_Chksum];
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	7b5b      	ldrb	r3, [r3, #13]
 8005e20:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8005e22:	7dbb      	ldrb	r3, [r7, #22]
 8005e24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e28:	75bb      	strb	r3, [r7, #22]
 8005e2a:	7dbb      	ldrb	r3, [r7, #22]
 8005e2c:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e34:	3306      	adds	r3, #6
 8005e36:	881a      	ldrh	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005e3e:	3304      	adds	r3, #4
 8005e40:	801a      	strh	r2, [r3, #0]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8005e42:	7dba      	ldrb	r2, [r7, #22]
 8005e44:	7d7b      	ldrb	r3, [r7, #21]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d114      	bne.n	8005e74 <dir_find+0x122>
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	330d      	adds	r3, #13
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	7d3a      	ldrb	r2, [r7, #20]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d10e      	bne.n	8005e74 <dir_find+0x122>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6939      	ldr	r1, [r7, #16]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7ff fde5 	bl	8005a30 <cmp_lfn>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d003      	beq.n	8005e74 <dir_find+0x122>
 8005e6c:	7d7b      	ldrb	r3, [r7, #21]
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	e000      	b.n	8005e76 <dir_find+0x124>
 8005e74:	23ff      	movs	r3, #255	; 0xff
 8005e76:	757b      	strb	r3, [r7, #21]
 8005e78:	e02b      	b.n	8005ed2 <dir_find+0x180>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8005e7a:	7d7b      	ldrb	r3, [r7, #21]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d107      	bne.n	8005e90 <dir_find+0x13e>
 8005e80:	6938      	ldr	r0, [r7, #16]
 8005e82:	f7ff ff46 	bl	8005d12 <sum_sfn>
 8005e86:	4603      	mov	r3, r0
 8005e88:	461a      	mov	r2, r3
 8005e8a:	7d3b      	ldrb	r3, [r7, #20]
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d02d      	beq.n	8005eec <dir_find+0x19a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e96:	3318      	adds	r3, #24
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	330b      	adds	r3, #11
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10c      	bne.n	8005ec0 <dir_find+0x16e>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eac:	3318      	adds	r3, #24
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	220b      	movs	r2, #11
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	6938      	ldr	r0, [r7, #16]
 8005eb6:	f7fe fb97 	bl	80045e8 <mem_cmp>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d017      	beq.n	8005ef0 <dir_find+0x19e>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8005ec0:	23ff      	movs	r3, #255	; 0xff
 8005ec2:	757b      	strb	r3, [r7, #21]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005eca:	3304      	adds	r3, #4
 8005ecc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ed0:	801a      	strh	r2, [r3, #0]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f7ff fba3 	bl	8005620 <dir_next>
 8005eda:	4603      	mov	r3, r0
 8005edc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005ede:	7dfb      	ldrb	r3, [r7, #23]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f43f af50 	beq.w	8005d86 <dir_find+0x34>
 8005ee6:	e004      	b.n	8005ef2 <dir_find+0x1a0>
		if (res != FR_OK) break;
 8005ee8:	bf00      	nop
 8005eea:	e002      	b.n	8005ef2 <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8005eec:	bf00      	nop
 8005eee:	e000      	b.n	8005ef2 <dir_find+0x1a0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8005ef0:	bf00      	nop

	return res;
 8005ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3718      	adds	r7, #24
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b08c      	sub	sp, #48	; 0x30
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f0a:	3318      	adds	r3, #24
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	623b      	str	r3, [r7, #32]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8005f1a:	f107 030c 	add.w	r3, r7, #12
 8005f1e:	220c      	movs	r2, #12
 8005f20:	6a39      	ldr	r1, [r7, #32]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fe fb2a 	bl	800457c <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005f28:	7dfb      	ldrb	r3, [r7, #23]
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d039      	beq.n	8005fa6 <dir_register+0xaa>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8005f32:	6a3b      	ldr	r3, [r7, #32]
 8005f34:	330b      	adds	r3, #11
 8005f36:	2200      	movs	r2, #0
 8005f38:	701a      	strb	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005f40:	2200      	movs	r2, #0
 8005f42:	601a      	str	r2, [r3, #0]
		for (n = 1; n < 100; n++) {
 8005f44:	2301      	movs	r3, #1
 8005f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f48:	e013      	b.n	8005f72 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8005f4a:	f107 010c 	add.w	r1, r7, #12
 8005f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f50:	69fa      	ldr	r2, [r7, #28]
 8005f52:	6a38      	ldr	r0, [r7, #32]
 8005f54:	f7ff fe4e 	bl	8005bf4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f7ff fefa 	bl	8005d52 <dir_find>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8005f64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d106      	bne.n	8005f7a <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8005f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6e:	3301      	adds	r3, #1
 8005f70:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f74:	2b63      	cmp	r3, #99	; 0x63
 8005f76:	d9e8      	bls.n	8005f4a <dir_register+0x4e>
 8005f78:	e000      	b.n	8005f7c <dir_register+0x80>
			if (res != FR_OK) break;
 8005f7a:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7e:	2b64      	cmp	r3, #100	; 0x64
 8005f80:	d101      	bne.n	8005f86 <dir_register+0x8a>
 8005f82:	2307      	movs	r3, #7
 8005f84:	e0e3      	b.n	800614e <dir_register+0x252>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005f86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f8a:	2b04      	cmp	r3, #4
 8005f8c:	d002      	beq.n	8005f94 <dir_register+0x98>
 8005f8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f92:	e0dc      	b.n	800614e <dir_register+0x252>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	330b      	adds	r3, #11
 8005f98:	7dfa      	ldrb	r2, [r7, #23]
 8005f9a:	701a      	strb	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005fa2:	69fa      	ldr	r2, [r7, #28]
 8005fa4:	601a      	str	r2, [r3, #0]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8005fa6:	7dfb      	ldrb	r3, [r7, #23]
 8005fa8:	f003 0302 	and.w	r3, r3, #2
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d014      	beq.n	8005fda <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fb4:	e002      	b.n	8005fbc <dir_register+0xc0>
 8005fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb8:	3301      	adds	r3, #1
 8005fba:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbe:	005b      	lsls	r3, r3, #1
 8005fc0:	69fa      	ldr	r2, [r7, #28]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	881b      	ldrh	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1f5      	bne.n	8005fb6 <dir_register+0xba>
		nent = (n + 25) / 13;
 8005fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fcc:	3319      	adds	r3, #25
 8005fce:	4a62      	ldr	r2, [pc, #392]	; (8006158 <dir_register+0x25c>)
 8005fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd4:	089b      	lsrs	r3, r3, #2
 8005fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8005fd8:	e001      	b.n	8005fde <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005fde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff fc7f 	bl	80058e4 <dir_alloc>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005fec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d160      	bne.n	80060b6 <dir_register+0x1ba>
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d05a      	beq.n	80060b6 <dir_register+0x1ba>
		res = dir_sdi(dp, dp->index - nent);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006006:	3306      	adds	r3, #6
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	461a      	mov	r2, r3
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	4619      	mov	r1, r3
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7ff fa29 	bl	800546a <dir_sdi>
 8006018:	4603      	mov	r3, r0
 800601a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800601e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006022:	2b00      	cmp	r3, #0
 8006024:	d147      	bne.n	80060b6 <dir_register+0x1ba>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800602c:	3318      	adds	r3, #24
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4618      	mov	r0, r3
 8006032:	f7ff fe6e 	bl	8005d12 <sum_sfn>
 8006036:	4603      	mov	r3, r0
 8006038:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006048:	3310      	adds	r3, #16
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4619      	mov	r1, r3
 800604e:	4610      	mov	r0, r2
 8006050:	f7fe fd26 	bl	8004aa0 <move_window>
 8006054:	4603      	mov	r3, r0
 8006056:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800605a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800605e:	2b00      	cmp	r3, #0
 8006060:	d128      	bne.n	80060b4 <dir_register+0x1b8>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006068:	6818      	ldr	r0, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006070:	3314      	adds	r3, #20
 8006072:	6819      	ldr	r1, [r3, #0]
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006076:	b2da      	uxtb	r2, r3
 8006078:	7efb      	ldrb	r3, [r7, #27]
 800607a:	f7ff fd47 	bl	8005b0c <fit_lfn>
				dp->fs->wflag = 1;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800608a:	3304      	adds	r3, #4
 800608c:	2201      	movs	r2, #1
 800608e:	701a      	strb	r2, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 8006090:	2100      	movs	r1, #0
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7ff fac4 	bl	8005620 <dir_next>
 8006098:	4603      	mov	r3, r0
 800609a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800609e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d107      	bne.n	80060b6 <dir_register+0x1ba>
 80060a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a8:	3b01      	subs	r3, #1
 80060aa:	627b      	str	r3, [r7, #36]	; 0x24
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1c3      	bne.n	800603a <dir_register+0x13e>
 80060b2:	e000      	b.n	80060b6 <dir_register+0x1ba>
				if (res != FR_OK) break;
 80060b4:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80060b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d145      	bne.n	800614a <dir_register+0x24e>
		res = move_window(dp->fs, dp->sect);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060cc:	3310      	adds	r3, #16
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4619      	mov	r1, r3
 80060d2:	4610      	mov	r0, r2
 80060d4:	f7fe fce4 	bl	8004aa0 <move_window>
 80060d8:	4603      	mov	r3, r0
 80060da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80060de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d131      	bne.n	800614a <dir_register+0x24e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ec:	3314      	adds	r3, #20
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2220      	movs	r2, #32
 80060f2:	2100      	movs	r1, #0
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7fe fa5e 	bl	80045b6 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006100:	3314      	adds	r3, #20
 8006102:	6818      	ldr	r0, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800610a:	3318      	adds	r3, #24
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	220b      	movs	r2, #11
 8006110:	4619      	mov	r1, r3
 8006112:	f7fe fa33 	bl	800457c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800611c:	3318      	adds	r3, #24
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	330b      	adds	r3, #11
 8006122:	781a      	ldrb	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800612a:	3314      	adds	r3, #20
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	330c      	adds	r3, #12
 8006130:	f002 0218 	and.w	r2, r2, #24
 8006134:	b2d2      	uxtb	r2, r2
 8006136:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006144:	3304      	adds	r3, #4
 8006146:	2201      	movs	r2, #1
 8006148:	701a      	strb	r2, [r3, #0]
		}
	}

	return res;
 800614a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800614e:	4618      	mov	r0, r3
 8006150:	3730      	adds	r7, #48	; 0x30
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	4ec4ec4f 	.word	0x4ec4ec4f

0800615c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b08a      	sub	sp, #40	; 0x28
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	613b      	str	r3, [r7, #16]
 800616c:	e002      	b.n	8006174 <create_name+0x18>
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	3301      	adds	r3, #1
 8006172:	613b      	str	r3, [r7, #16]
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2b2f      	cmp	r3, #47	; 0x2f
 800617a:	d0f8      	beq.n	800616e <create_name+0x12>
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	2b5c      	cmp	r3, #92	; 0x5c
 8006182:	d0f4      	beq.n	800616e <create_name+0x12>
	lfn = dp->lfn;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800618e:	2300      	movs	r3, #0
 8006190:	617b      	str	r3, [r7, #20]
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	1c5a      	adds	r2, r3, #1
 800619a:	61ba      	str	r2, [r7, #24]
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	4413      	add	r3, r2
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 80061a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061a6:	2b1f      	cmp	r3, #31
 80061a8:	d92f      	bls.n	800620a <create_name+0xae>
 80061aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061ac:	2b2f      	cmp	r3, #47	; 0x2f
 80061ae:	d02c      	beq.n	800620a <create_name+0xae>
 80061b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061b2:	2b5c      	cmp	r3, #92	; 0x5c
 80061b4:	d029      	beq.n	800620a <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	2bfe      	cmp	r3, #254	; 0xfe
 80061ba:	d901      	bls.n	80061c0 <create_name+0x64>
			return FR_INVALID_NAME;
 80061bc:	2306      	movs	r3, #6
 80061be:	e18b      	b.n	80064d8 <create_name+0x37c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80061c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80061c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061c8:	2101      	movs	r1, #1
 80061ca:	4618      	mov	r0, r3
 80061cc:	f001 fda6 	bl	8007d1c <ff_convert>
 80061d0:	4603      	mov	r3, r0
 80061d2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80061d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <create_name+0x82>
 80061da:	2306      	movs	r3, #6
 80061dc:	e17c      	b.n	80064d8 <create_name+0x37c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 80061de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061e0:	2b7f      	cmp	r3, #127	; 0x7f
 80061e2:	d809      	bhi.n	80061f8 <create_name+0x9c>
 80061e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061e6:	4619      	mov	r1, r3
 80061e8:	488f      	ldr	r0, [pc, #572]	; (8006428 <create_name+0x2cc>)
 80061ea:	f7fe fa23 	bl	8004634 <chk_chr>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d001      	beq.n	80061f8 <create_name+0x9c>
			return FR_INVALID_NAME;
 80061f4:	2306      	movs	r3, #6
 80061f6:	e16f      	b.n	80064d8 <create_name+0x37c>
		lfn[di++] = w;					/* Store the Unicode character */
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	1c5a      	adds	r2, r3, #1
 80061fc:	617a      	str	r2, [r7, #20]
 80061fe:	005b      	lsls	r3, r3, #1
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	4413      	add	r3, r2
 8006204:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006206:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006208:	e7c5      	b.n	8006196 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	441a      	add	r2, r3
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006214:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006216:	2b1f      	cmp	r3, #31
 8006218:	d801      	bhi.n	800621e <create_name+0xc2>
 800621a:	2304      	movs	r3, #4
 800621c:	e000      	b.n	8006220 <create_name+0xc4>
 800621e:	2300      	movs	r3, #0
 8006220:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8006224:	e011      	b.n	800624a <create_name+0xee>
		w = lfn[di - 1];
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800622c:	3b01      	subs	r3, #1
 800622e:	005b      	lsls	r3, r3, #1
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	4413      	add	r3, r2
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006238:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800623a:	2b20      	cmp	r3, #32
 800623c:	d002      	beq.n	8006244 <create_name+0xe8>
 800623e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006240:	2b2e      	cmp	r3, #46	; 0x2e
 8006242:	d106      	bne.n	8006252 <create_name+0xf6>
		di--;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	3b01      	subs	r3, #1
 8006248:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1ea      	bne.n	8006226 <create_name+0xca>
 8006250:	e000      	b.n	8006254 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8006252:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d101      	bne.n	800625e <create_name+0x102>
 800625a:	2306      	movs	r3, #6
 800625c:	e13c      	b.n	80064d8 <create_name+0x37c>

	lfn[di] = 0;						/* LFN is created */
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	4413      	add	r3, r2
 8006266:	2200      	movs	r2, #0
 8006268:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006270:	3318      	adds	r3, #24
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	220b      	movs	r2, #11
 8006276:	2120      	movs	r1, #32
 8006278:	4618      	mov	r0, r3
 800627a:	f7fe f99c 	bl	80045b6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800627e:	2300      	movs	r3, #0
 8006280:	61bb      	str	r3, [r7, #24]
 8006282:	e002      	b.n	800628a <create_name+0x12e>
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	3301      	adds	r3, #1
 8006288:	61bb      	str	r3, [r7, #24]
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	005b      	lsls	r3, r3, #1
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4413      	add	r3, r2
 8006292:	881b      	ldrh	r3, [r3, #0]
 8006294:	2b20      	cmp	r3, #32
 8006296:	d0f5      	beq.n	8006284 <create_name+0x128>
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	005b      	lsls	r3, r3, #1
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	4413      	add	r3, r2
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	2b2e      	cmp	r3, #46	; 0x2e
 80062a4:	d0ee      	beq.n	8006284 <create_name+0x128>
	if (si) cf |= NS_LOSS | NS_LFN;
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d009      	beq.n	80062c0 <create_name+0x164>
 80062ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80062b0:	f043 0303 	orr.w	r3, r3, #3
 80062b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80062b8:	e002      	b.n	80062c0 <create_name+0x164>
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	3b01      	subs	r3, #1
 80062be:	617b      	str	r3, [r7, #20]
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d009      	beq.n	80062da <create_name+0x17e>
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80062cc:	3b01      	subs	r3, #1
 80062ce:	005b      	lsls	r3, r3, #1
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	4413      	add	r3, r2
 80062d4:	881b      	ldrh	r3, [r3, #0]
 80062d6:	2b2e      	cmp	r3, #46	; 0x2e
 80062d8:	d1ef      	bne.n	80062ba <create_name+0x15e>

	b = i = 0; ni = 8;
 80062da:	2300      	movs	r3, #0
 80062dc:	623b      	str	r3, [r7, #32]
 80062de:	2300      	movs	r3, #0
 80062e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80062e4:	2308      	movs	r3, #8
 80062e6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	1c5a      	adds	r2, r3, #1
 80062ec:	61ba      	str	r2, [r7, #24]
 80062ee:	005b      	lsls	r3, r3, #1
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	4413      	add	r3, r2
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80062f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 8092 	beq.w	8006424 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006300:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006302:	2b20      	cmp	r3, #32
 8006304:	d006      	beq.n	8006314 <create_name+0x1b8>
 8006306:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006308:	2b2e      	cmp	r3, #46	; 0x2e
 800630a:	d10a      	bne.n	8006322 <create_name+0x1c6>
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	429a      	cmp	r2, r3
 8006312:	d006      	beq.n	8006322 <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN; continue;
 8006314:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006318:	f043 0303 	orr.w	r3, r3, #3
 800631c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006320:	e07f      	b.n	8006422 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006322:	6a3a      	ldr	r2, [r7, #32]
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	429a      	cmp	r2, r3
 8006328:	d203      	bcs.n	8006332 <create_name+0x1d6>
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	429a      	cmp	r2, r3
 8006330:	d123      	bne.n	800637a <create_name+0x21e>
			if (ni == 11) {				/* Long extension */
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	2b0b      	cmp	r3, #11
 8006336:	d106      	bne.n	8006346 <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN; break;
 8006338:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800633c:	f043 0303 	orr.w	r3, r3, #3
 8006340:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006344:	e077      	b.n	8006436 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	429a      	cmp	r2, r3
 800634c:	d005      	beq.n	800635a <create_name+0x1fe>
 800634e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006352:	f043 0303 	orr.w	r3, r3, #3
 8006356:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 800635a:	69ba      	ldr	r2, [r7, #24]
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	429a      	cmp	r2, r3
 8006360:	d868      	bhi.n	8006434 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	61bb      	str	r3, [r7, #24]
 8006366:	2308      	movs	r3, #8
 8006368:	623b      	str	r3, [r7, #32]
 800636a:	230b      	movs	r3, #11
 800636c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800636e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006378:	e053      	b.n	8006422 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800637a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800637c:	2b7f      	cmp	r3, #127	; 0x7f
 800637e:	d914      	bls.n	80063aa <create_name+0x24e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006380:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006382:	2100      	movs	r1, #0
 8006384:	4618      	mov	r0, r3
 8006386:	f001 fcc9 	bl	8007d1c <ff_convert>
 800638a:	4603      	mov	r3, r0
 800638c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800638e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006390:	2b00      	cmp	r3, #0
 8006392:	d004      	beq.n	800639e <create_name+0x242>
 8006394:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006396:	3b80      	subs	r3, #128	; 0x80
 8006398:	4a24      	ldr	r2, [pc, #144]	; (800642c <create_name+0x2d0>)
 800639a:	5cd3      	ldrb	r3, [r2, r3]
 800639c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800639e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80063a2:	f043 0302 	orr.w	r3, r3, #2
 80063a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80063aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d007      	beq.n	80063c0 <create_name+0x264>
 80063b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063b2:	4619      	mov	r1, r3
 80063b4:	481e      	ldr	r0, [pc, #120]	; (8006430 <create_name+0x2d4>)
 80063b6:	f7fe f93d 	bl	8004634 <chk_chr>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d008      	beq.n	80063d2 <create_name+0x276>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80063c0:	235f      	movs	r3, #95	; 0x5f
 80063c2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80063c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80063c8:	f043 0303 	orr.w	r3, r3, #3
 80063cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80063d0:	e01b      	b.n	800640a <create_name+0x2ae>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80063d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063d4:	2b40      	cmp	r3, #64	; 0x40
 80063d6:	d909      	bls.n	80063ec <create_name+0x290>
 80063d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063da:	2b5a      	cmp	r3, #90	; 0x5a
 80063dc:	d806      	bhi.n	80063ec <create_name+0x290>
					b |= 2;
 80063de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063e2:	f043 0302 	orr.w	r3, r3, #2
 80063e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80063ea:	e00e      	b.n	800640a <create_name+0x2ae>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80063ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063ee:	2b60      	cmp	r3, #96	; 0x60
 80063f0:	d90b      	bls.n	800640a <create_name+0x2ae>
 80063f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063f4:	2b7a      	cmp	r3, #122	; 0x7a
 80063f6:	d808      	bhi.n	800640a <create_name+0x2ae>
						b |= 1; w -= 0x20;
 80063f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063fc:	f043 0301 	orr.w	r3, r3, #1
 8006400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006404:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006406:	3b20      	subs	r3, #32
 8006408:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006410:	3318      	adds	r3, #24
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	1c59      	adds	r1, r3, #1
 8006418:	6239      	str	r1, [r7, #32]
 800641a:	4413      	add	r3, r2
 800641c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800641e:	b2d2      	uxtb	r2, r2
 8006420:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8006422:	e761      	b.n	80062e8 <create_name+0x18c>
		if (!w) break;					/* Break on end of the LFN */
 8006424:	bf00      	nop
 8006426:	e006      	b.n	8006436 <create_name+0x2da>
 8006428:	08009044 	.word	0x08009044
 800642c:	080090a4 	.word	0x080090a4
 8006430:	08009050 	.word	0x08009050
			if (si > di) break;			/* No extension */
 8006434:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800643c:	3318      	adds	r3, #24
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	2be5      	cmp	r3, #229	; 0xe5
 8006444:	d106      	bne.n	8006454 <create_name+0x2f8>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800644c:	3318      	adds	r3, #24
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2205      	movs	r2, #5
 8006452:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	2b08      	cmp	r3, #8
 8006458:	d104      	bne.n	8006464 <create_name+0x308>
 800645a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8006464:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006468:	f003 030c 	and.w	r3, r3, #12
 800646c:	2b0c      	cmp	r3, #12
 800646e:	d005      	beq.n	800647c <create_name+0x320>
 8006470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006474:	f003 0303 	and.w	r3, r3, #3
 8006478:	2b03      	cmp	r3, #3
 800647a:	d105      	bne.n	8006488 <create_name+0x32c>
		cf |= NS_LFN;
 800647c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006480:	f043 0302 	orr.w	r3, r3, #2
 8006484:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006488:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	2b00      	cmp	r3, #0
 8006492:	d117      	bne.n	80064c4 <create_name+0x368>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006498:	f003 0303 	and.w	r3, r3, #3
 800649c:	2b01      	cmp	r3, #1
 800649e:	d105      	bne.n	80064ac <create_name+0x350>
 80064a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80064a4:	f043 0310 	orr.w	r3, r3, #16
 80064a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80064ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064b0:	f003 030c 	and.w	r3, r3, #12
 80064b4:	2b04      	cmp	r3, #4
 80064b6:	d105      	bne.n	80064c4 <create_name+0x368>
 80064b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80064bc:	f043 0308 	orr.w	r3, r3, #8
 80064c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064ca:	3318      	adds	r3, #24
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	330b      	adds	r3, #11
 80064d0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80064d4:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80064d6:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3728      	adds	r7, #40	; 0x28
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	2b2f      	cmp	r3, #47	; 0x2f
 80064f0:	d003      	beq.n	80064fa <follow_path+0x1a>
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	2b5c      	cmp	r3, #92	; 0x5c
 80064f8:	d102      	bne.n	8006500 <follow_path+0x20>
		path++;
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	3301      	adds	r3, #1
 80064fe:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006506:	3308      	adds	r3, #8
 8006508:	2200      	movs	r2, #0
 800650a:	601a      	str	r2, [r3, #0]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	2b1f      	cmp	r3, #31
 8006512:	d80c      	bhi.n	800652e <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8006514:	2100      	movs	r1, #0
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7fe ffa7 	bl	800546a <dir_sdi>
 800651c:	4603      	mov	r3, r0
 800651e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006526:	3314      	adds	r3, #20
 8006528:	2200      	movs	r2, #0
 800652a:	601a      	str	r2, [r3, #0]
 800652c:	e04c      	b.n	80065c8 <follow_path+0xe8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800652e:	463b      	mov	r3, r7
 8006530:	4619      	mov	r1, r3
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f7ff fe12 	bl	800615c <create_name>
 8006538:	4603      	mov	r3, r0
 800653a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800653c:	7bfb      	ldrb	r3, [r7, #15]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d13d      	bne.n	80065be <follow_path+0xde>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f7ff fc05 	bl	8005d52 <dir_find>
 8006548:	4603      	mov	r3, r0
 800654a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006552:	3318      	adds	r3, #24
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	7adb      	ldrb	r3, [r3, #11]
 8006558:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800655a:	7bfb      	ldrb	r3, [r7, #15]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00a      	beq.n	8006576 <follow_path+0x96>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006560:	7bfb      	ldrb	r3, [r7, #15]
 8006562:	2b04      	cmp	r3, #4
 8006564:	d12d      	bne.n	80065c2 <follow_path+0xe2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006566:	7bbb      	ldrb	r3, [r7, #14]
 8006568:	f003 0304 	and.w	r3, r3, #4
 800656c:	2b00      	cmp	r3, #0
 800656e:	d128      	bne.n	80065c2 <follow_path+0xe2>
 8006570:	2305      	movs	r3, #5
 8006572:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8006574:	e025      	b.n	80065c2 <follow_path+0xe2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006576:	7bbb      	ldrb	r3, [r7, #14]
 8006578:	f003 0304 	and.w	r3, r3, #4
 800657c:	2b00      	cmp	r3, #0
 800657e:	d122      	bne.n	80065c6 <follow_path+0xe6>
			dir = dp->dir;						/* Follow the sub-directory */
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006586:	3314      	adds	r3, #20
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	330b      	adds	r3, #11
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	f003 0310 	and.w	r3, r3, #16
 8006596:	2b00      	cmp	r3, #0
 8006598:	d102      	bne.n	80065a0 <follow_path+0xc0>
				res = FR_NO_PATH; break;
 800659a:	2305      	movs	r3, #5
 800659c:	73fb      	strb	r3, [r7, #15]
 800659e:	e013      	b.n	80065c8 <follow_path+0xe8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68b9      	ldr	r1, [r7, #8]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7ff f9eb 	bl	8005986 <ld_clust>
 80065b0:	4602      	mov	r2, r0
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065b8:	3308      	adds	r3, #8
 80065ba:	601a      	str	r2, [r3, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80065bc:	e7b7      	b.n	800652e <follow_path+0x4e>
			if (res != FR_OK) break;
 80065be:	bf00      	nop
 80065c0:	e002      	b.n	80065c8 <follow_path+0xe8>
				break;
 80065c2:	bf00      	nop
 80065c4:	e000      	b.n	80065c8 <follow_path+0xe8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80065c6:	bf00      	nop
		}
	}

	return res;
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b087      	sub	sp, #28
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80065da:	f04f 33ff 	mov.w	r3, #4294967295
 80065de:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d031      	beq.n	800664c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	617b      	str	r3, [r7, #20]
 80065ee:	e002      	b.n	80065f6 <get_ldnumber+0x24>
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	3301      	adds	r3, #1
 80065f4:	617b      	str	r3, [r7, #20]
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	2b1f      	cmp	r3, #31
 80065fc:	d903      	bls.n	8006606 <get_ldnumber+0x34>
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	2b3a      	cmp	r3, #58	; 0x3a
 8006604:	d1f4      	bne.n	80065f0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	2b3a      	cmp	r3, #58	; 0x3a
 800660c:	d11c      	bne.n	8006648 <get_ldnumber+0x76>
			tp = *path;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	1c5a      	adds	r2, r3, #1
 8006618:	60fa      	str	r2, [r7, #12]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	3b30      	subs	r3, #48	; 0x30
 800661e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2b09      	cmp	r3, #9
 8006624:	d80e      	bhi.n	8006644 <get_ldnumber+0x72>
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	429a      	cmp	r2, r3
 800662c:	d10a      	bne.n	8006644 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d107      	bne.n	8006644 <get_ldnumber+0x72>
					vol = (int)i;
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	3301      	adds	r3, #1
 800663c:	617b      	str	r3, [r7, #20]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	e002      	b.n	800664e <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006648:	2300      	movs	r3, #0
 800664a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800664c:	693b      	ldr	r3, [r7, #16]
}
 800664e:	4618      	mov	r0, r3
 8006650:	371c      	adds	r7, #28
 8006652:	46bd      	mov	sp, r7
 8006654:	bc80      	pop	{r7}
 8006656:	4770      	bx	lr

08006658 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006668:	3304      	adds	r3, #4
 800666a:	2200      	movs	r2, #0
 800666c:	701a      	strb	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006674:	330c      	adds	r3, #12
 8006676:	f04f 32ff 	mov.w	r2, #4294967295
 800667a:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800667c:	6839      	ldr	r1, [r7, #0]
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7fe fa0e 	bl	8004aa0 <move_window>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d001      	beq.n	800668e <check_fs+0x36>
		return 3;
 800668a:	2303      	movs	r3, #3
 800668c:	e04a      	b.n	8006724 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006694:	3301      	adds	r3, #1
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	021b      	lsls	r3, r3, #8
 800669a:	b21a      	sxth	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80066a2:	b21b      	sxth	r3, r3
 80066a4:	4313      	orrs	r3, r2
 80066a6:	b21b      	sxth	r3, r3
 80066a8:	4a20      	ldr	r2, [pc, #128]	; (800672c <check_fs+0xd4>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d001      	beq.n	80066b2 <check_fs+0x5a>
		return 2;
 80066ae:	2302      	movs	r3, #2
 80066b0:	e038      	b.n	8006724 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	3336      	adds	r3, #54	; 0x36
 80066b6:	3303      	adds	r3, #3
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	061a      	lsls	r2, r3, #24
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	3336      	adds	r3, #54	; 0x36
 80066c0:	3302      	adds	r3, #2
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	041b      	lsls	r3, r3, #16
 80066c6:	4313      	orrs	r3, r2
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	3236      	adds	r2, #54	; 0x36
 80066cc:	3201      	adds	r2, #1
 80066ce:	7812      	ldrb	r2, [r2, #0]
 80066d0:	0212      	lsls	r2, r2, #8
 80066d2:	4313      	orrs	r3, r2
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80066da:	4313      	orrs	r3, r2
 80066dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80066e0:	4a13      	ldr	r2, [pc, #76]	; (8006730 <check_fs+0xd8>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d101      	bne.n	80066ea <check_fs+0x92>
		return 0;
 80066e6:	2300      	movs	r3, #0
 80066e8:	e01c      	b.n	8006724 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	3352      	adds	r3, #82	; 0x52
 80066ee:	3303      	adds	r3, #3
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	061a      	lsls	r2, r3, #24
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	3352      	adds	r3, #82	; 0x52
 80066f8:	3302      	adds	r3, #2
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	041b      	lsls	r3, r3, #16
 80066fe:	4313      	orrs	r3, r2
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	3252      	adds	r2, #82	; 0x52
 8006704:	3201      	adds	r2, #1
 8006706:	7812      	ldrb	r2, [r2, #0]
 8006708:	0212      	lsls	r2, r2, #8
 800670a:	4313      	orrs	r3, r2
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8006712:	4313      	orrs	r3, r2
 8006714:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006718:	4a05      	ldr	r2, [pc, #20]	; (8006730 <check_fs+0xd8>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d101      	bne.n	8006722 <check_fs+0xca>
		return 0;
 800671e:	2300      	movs	r3, #0
 8006720:	e000      	b.n	8006724 <check_fs+0xcc>

	return 1;
 8006722:	2301      	movs	r3, #1
}
 8006724:	4618      	mov	r0, r3
 8006726:	3708      	adds	r7, #8
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	ffffaa55 	.word	0xffffaa55
 8006730:	00544146 	.word	0x00544146

08006734 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b096      	sub	sp, #88	; 0x58
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	4613      	mov	r3, r2
 8006740:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006748:	68b8      	ldr	r0, [r7, #8]
 800674a:	f7ff ff42 	bl	80065d2 <get_ldnumber>
 800674e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006752:	2b00      	cmp	r3, #0
 8006754:	da01      	bge.n	800675a <find_volume+0x26>
 8006756:	230b      	movs	r3, #11
 8006758:	e33c      	b.n	8006dd4 <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800675a:	4ab3      	ldr	r2, [pc, #716]	; (8006a28 <find_volume+0x2f4>)
 800675c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800675e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006762:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006766:	2b00      	cmp	r3, #0
 8006768:	d101      	bne.n	800676e <find_volume+0x3a>
 800676a:	230c      	movs	r3, #12
 800676c:	e332      	b.n	8006dd4 <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006772:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8006774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d01d      	beq.n	80067bc <find_volume+0x88>
		stat = disk_status(fs->drv);
 8006780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006786:	3301      	adds	r3, #1
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	4618      	mov	r0, r3
 800678c:	f7fd fe58 	bl	8004440 <disk_status>
 8006790:	4603      	mov	r3, r0
 8006792:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006796:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10c      	bne.n	80067bc <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80067a2:	79fb      	ldrb	r3, [r7, #7]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d007      	beq.n	80067b8 <find_volume+0x84>
 80067a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80067ac:	f003 0304 	and.w	r3, r3, #4
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d001      	beq.n	80067b8 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 80067b4:	230a      	movs	r3, #10
 80067b6:	e30d      	b.n	8006dd4 <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 80067b8:	2300      	movs	r3, #0
 80067ba:	e30b      	b.n	8006dd4 <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80067bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067c2:	2200      	movs	r2, #0
 80067c4:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80067c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067d0:	3301      	adds	r3, #1
 80067d2:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80067d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067da:	3301      	adds	r3, #1
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	4618      	mov	r0, r3
 80067e0:	f7fd fe48 	bl	8004474 <disk_initialize>
 80067e4:	4603      	mov	r3, r0
 80067e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80067ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d001      	beq.n	80067fa <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80067f6:	2303      	movs	r3, #3
 80067f8:	e2ec      	b.n	8006dd4 <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80067fa:	79fb      	ldrb	r3, [r7, #7]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d007      	beq.n	8006810 <find_volume+0xdc>
 8006800:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006804:	f003 0304 	and.w	r3, r3, #4
 8006808:	2b00      	cmp	r3, #0
 800680a:	d001      	beq.n	8006810 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800680c:	230a      	movs	r3, #10
 800680e:	e2e1      	b.n	8006dd4 <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8006810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006816:	3301      	adds	r3, #1
 8006818:	7818      	ldrb	r0, [r3, #0]
 800681a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006820:	330a      	adds	r3, #10
 8006822:	461a      	mov	r2, r3
 8006824:	2102      	movs	r1, #2
 8006826:	f7fd fe8b 	bl	8004540 <disk_ioctl>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10f      	bne.n	8006850 <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8006830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006836:	330a      	adds	r3, #10
 8006838:	881b      	ldrh	r3, [r3, #0]
 800683a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800683e:	d307      	bcc.n	8006850 <find_volume+0x11c>
 8006840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006846:	330a      	adds	r3, #10
 8006848:	881b      	ldrh	r3, [r3, #0]
 800684a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800684e:	d901      	bls.n	8006854 <find_volume+0x120>
 8006850:	2301      	movs	r3, #1
 8006852:	e2bf      	b.n	8006dd4 <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8006854:	2300      	movs	r3, #0
 8006856:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8006858:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800685a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800685c:	f7ff fefc 	bl	8006658 <check_fs>
 8006860:	4603      	mov	r3, r0
 8006862:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8006866:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800686a:	2b01      	cmp	r3, #1
 800686c:	d155      	bne.n	800691a <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800686e:	2300      	movs	r3, #0
 8006870:	643b      	str	r3, [r7, #64]	; 0x40
 8006872:	e029      	b.n	80068c8 <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8006874:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006878:	011b      	lsls	r3, r3, #4
 800687a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800687e:	4413      	add	r3, r2
 8006880:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8006882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006884:	3304      	adds	r3, #4
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d012      	beq.n	80068b2 <find_volume+0x17e>
 800688c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688e:	330b      	adds	r3, #11
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	061a      	lsls	r2, r3, #24
 8006894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006896:	330a      	adds	r3, #10
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	041b      	lsls	r3, r3, #16
 800689c:	4313      	orrs	r3, r2
 800689e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068a0:	3209      	adds	r2, #9
 80068a2:	7812      	ldrb	r2, [r2, #0]
 80068a4:	0212      	lsls	r2, r2, #8
 80068a6:	4313      	orrs	r3, r2
 80068a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068aa:	3208      	adds	r2, #8
 80068ac:	7812      	ldrb	r2, [r2, #0]
 80068ae:	431a      	orrs	r2, r3
 80068b0:	e000      	b.n	80068b4 <find_volume+0x180>
 80068b2:	2200      	movs	r2, #0
 80068b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80068bc:	440b      	add	r3, r1
 80068be:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80068c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068c4:	3301      	adds	r3, #1
 80068c6:	643b      	str	r3, [r7, #64]	; 0x40
 80068c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068ca:	2b03      	cmp	r3, #3
 80068cc:	d9d2      	bls.n	8006874 <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80068ce:	2300      	movs	r3, #0
 80068d0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80068d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d002      	beq.n	80068de <find_volume+0x1aa>
 80068d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068da:	3b01      	subs	r3, #1
 80068dc:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80068de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80068e6:	4413      	add	r3, r2
 80068e8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80068ec:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80068ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d005      	beq.n	8006900 <find_volume+0x1cc>
 80068f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80068f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80068f8:	f7ff feae 	bl	8006658 <check_fs>
 80068fc:	4603      	mov	r3, r0
 80068fe:	e000      	b.n	8006902 <find_volume+0x1ce>
 8006900:	2302      	movs	r3, #2
 8006902:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006906:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800690a:	2b00      	cmp	r3, #0
 800690c:	d005      	beq.n	800691a <find_volume+0x1e6>
 800690e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006910:	3301      	adds	r3, #1
 8006912:	643b      	str	r3, [r7, #64]	; 0x40
 8006914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006916:	2b03      	cmp	r3, #3
 8006918:	d9e1      	bls.n	80068de <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800691a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800691e:	2b03      	cmp	r3, #3
 8006920:	d101      	bne.n	8006926 <find_volume+0x1f2>
 8006922:	2301      	movs	r3, #1
 8006924:	e256      	b.n	8006dd4 <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8006926:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <find_volume+0x1fe>
 800692e:	230d      	movs	r3, #13
 8006930:	e250      	b.n	8006dd4 <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006934:	7b1b      	ldrb	r3, [r3, #12]
 8006936:	021b      	lsls	r3, r3, #8
 8006938:	b21a      	sxth	r2, r3
 800693a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693c:	7adb      	ldrb	r3, [r3, #11]
 800693e:	b21b      	sxth	r3, r3
 8006940:	4313      	orrs	r3, r2
 8006942:	b21b      	sxth	r3, r3
 8006944:	b29a      	uxth	r2, r3
 8006946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800694c:	330a      	adds	r3, #10
 800694e:	881b      	ldrh	r3, [r3, #0]
 8006950:	429a      	cmp	r2, r3
 8006952:	d001      	beq.n	8006958 <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 8006954:	230d      	movs	r3, #13
 8006956:	e23d      	b.n	8006dd4 <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8006958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695a:	7ddb      	ldrb	r3, [r3, #23]
 800695c:	021b      	lsls	r3, r3, #8
 800695e:	b21a      	sxth	r2, r3
 8006960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006962:	7d9b      	ldrb	r3, [r3, #22]
 8006964:	b21b      	sxth	r3, r3
 8006966:	4313      	orrs	r3, r2
 8006968:	b21b      	sxth	r3, r3
 800696a:	b29b      	uxth	r3, r3
 800696c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800696e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006970:	2b00      	cmp	r3, #0
 8006972:	d112      	bne.n	800699a <find_volume+0x266>
 8006974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006976:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800697a:	061a      	lsls	r2, r3, #24
 800697c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006982:	041b      	lsls	r3, r3, #16
 8006984:	4313      	orrs	r3, r2
 8006986:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006988:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800698c:	0212      	lsls	r2, r2, #8
 800698e:	4313      	orrs	r3, r2
 8006990:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006992:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8006996:	4313      	orrs	r3, r2
 8006998:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800699a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069a0:	3318      	adds	r3, #24
 80069a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80069a4:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80069a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a8:	7c1a      	ldrb	r2, [r3, #16]
 80069aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069b0:	3303      	adds	r3, #3
 80069b2:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80069b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069ba:	3303      	adds	r3, #3
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d008      	beq.n	80069d4 <find_volume+0x2a0>
 80069c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069c8:	3303      	adds	r3, #3
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d001      	beq.n	80069d4 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 80069d0:	230d      	movs	r3, #13
 80069d2:	e1ff      	b.n	8006dd4 <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80069d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069da:	3303      	adds	r3, #3
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	461a      	mov	r2, r3
 80069e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069e2:	fb02 f303 	mul.w	r3, r2, r3
 80069e6:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80069e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ea:	7b5a      	ldrb	r2, [r3, #13]
 80069ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069f2:	3302      	adds	r3, #2
 80069f4:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80069f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069fc:	3302      	adds	r3, #2
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00e      	beq.n	8006a22 <find_volume+0x2ee>
 8006a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a0a:	3302      	adds	r3, #2
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a16:	3302      	adds	r3, #2
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d004      	beq.n	8006a2c <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 8006a22:	230d      	movs	r3, #13
 8006a24:	e1d6      	b.n	8006dd4 <find_volume+0x6a0>
 8006a26:	bf00      	nop
 8006a28:	200000b8 	.word	0x200000b8

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8006a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2e:	7c9b      	ldrb	r3, [r3, #18]
 8006a30:	021b      	lsls	r3, r3, #8
 8006a32:	b21a      	sxth	r2, r3
 8006a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a36:	7c5b      	ldrb	r3, [r3, #17]
 8006a38:	b21b      	sxth	r3, r3
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	b21b      	sxth	r3, r3
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a46:	3308      	adds	r3, #8
 8006a48:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a50:	3308      	adds	r3, #8
 8006a52:	881a      	ldrh	r2, [r3, #0]
 8006a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a5a:	330a      	adds	r3, #10
 8006a5c:	881b      	ldrh	r3, [r3, #0]
 8006a5e:	095b      	lsrs	r3, r3, #5
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	fbb2 f1f3 	udiv	r1, r2, r3
 8006a66:	fb03 f301 	mul.w	r3, r3, r1
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 8006a72:	230d      	movs	r3, #13
 8006a74:	e1ae      	b.n	8006dd4 <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8006a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a78:	7d1b      	ldrb	r3, [r3, #20]
 8006a7a:	021b      	lsls	r3, r3, #8
 8006a7c:	b21a      	sxth	r2, r3
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a80:	7cdb      	ldrb	r3, [r3, #19]
 8006a82:	b21b      	sxth	r3, r3
 8006a84:	4313      	orrs	r3, r2
 8006a86:	b21b      	sxth	r3, r3
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8006a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d112      	bne.n	8006ab8 <find_volume+0x384>
 8006a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a94:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006a98:	061a      	lsls	r2, r3, #24
 8006a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006aa0:	041b      	lsls	r3, r3, #16
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006aa6:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8006aaa:	0212      	lsls	r2, r2, #8
 8006aac:	4313      	orrs	r3, r2
 8006aae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ab0:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8006ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aba:	7bdb      	ldrb	r3, [r3, #15]
 8006abc:	021b      	lsls	r3, r3, #8
 8006abe:	b21a      	sxth	r2, r3
 8006ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac2:	7b9b      	ldrb	r3, [r3, #14]
 8006ac4:	b21b      	sxth	r3, r3
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	b21b      	sxth	r3, r3
 8006aca:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8006acc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <find_volume+0x3a2>
 8006ad2:	230d      	movs	r3, #13
 8006ad4:	e17e      	b.n	8006dd4 <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8006ad6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ada:	441a      	add	r2, r3
 8006adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ae2:	3308      	adds	r3, #8
 8006ae4:	8819      	ldrh	r1, [r3, #0]
 8006ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aec:	330a      	adds	r3, #10
 8006aee:	881b      	ldrh	r3, [r3, #0]
 8006af0:	095b      	lsrs	r3, r3, #5
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	fbb1 f3f3 	udiv	r3, r1, r3
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	4413      	add	r3, r2
 8006afc:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006afe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d201      	bcs.n	8006b0a <find_volume+0x3d6>
 8006b06:	230d      	movs	r3, #13
 8006b08:	e164      	b.n	8006dd4 <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8006b0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0e:	1ad2      	subs	r2, r2, r3
 8006b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b16:	3302      	adds	r3, #2
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b1e:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d101      	bne.n	8006b2a <find_volume+0x3f6>
 8006b26:	230d      	movs	r3, #13
 8006b28:	e154      	b.n	8006dd4 <find_volume+0x6a0>
	fmt = FS_FAT12;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8006b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b32:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d902      	bls.n	8006b40 <find_volume+0x40c>
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8006b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b42:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d902      	bls.n	8006b50 <find_volume+0x41c>
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	1c9a      	adds	r2, r3, #2
 8006b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b5a:	3314      	adds	r3, #20
 8006b5c:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 8006b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b64:	331c      	adds	r3, #28
 8006b66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006b68:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006b6a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b6e:	441a      	add	r2, r3
 8006b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b72:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006b76:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 8006b78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7c:	441a      	add	r2, r3
 8006b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b80:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006b84:	3308      	adds	r3, #8
 8006b86:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 8006b88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b8c:	2b03      	cmp	r3, #3
 8006b8e:	d127      	bne.n	8006be0 <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b96:	3308      	adds	r3, #8
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <find_volume+0x46e>
 8006b9e:	230d      	movs	r3, #13
 8006ba0:	e118      	b.n	8006dd4 <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8006ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006ba8:	061a      	lsls	r2, r3, #24
 8006baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bac:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006bb0:	041b      	lsls	r3, r3, #16
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bb6:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8006bba:	0212      	lsls	r2, r2, #8
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bc0:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006bcc:	3304      	adds	r3, #4
 8006bce:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8006bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bd6:	3314      	adds	r3, #20
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	647b      	str	r3, [r7, #68]	; 0x44
 8006bde:	e030      	b.n	8006c42 <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8006be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006be6:	3308      	adds	r3, #8
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d101      	bne.n	8006bf2 <find_volume+0x4be>
 8006bee:	230d      	movs	r3, #13
 8006bf0:	e0f0      	b.n	8006dd4 <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8006bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bfc:	441a      	add	r2, r3
 8006bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c00:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006c04:	3304      	adds	r3, #4
 8006c06:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006c08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d106      	bne.n	8006c1e <find_volume+0x4ea>
 8006c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c16:	3314      	adds	r3, #20
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	005b      	lsls	r3, r3, #1
 8006c1c:	e010      	b.n	8006c40 <find_volume+0x50c>
 8006c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c24:	3314      	adds	r3, #20
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	005b      	lsls	r3, r3, #1
 8006c2c:	4413      	add	r3, r2
 8006c2e:	085a      	lsrs	r2, r3, #1
 8006c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c36:	3314      	adds	r3, #20
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8006c40:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8006c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c48:	3318      	adds	r3, #24
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c52:	330a      	adds	r3, #10
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	4619      	mov	r1, r3
 8006c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c5a:	440b      	add	r3, r1
 8006c5c:	1e59      	subs	r1, r3, #1
 8006c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c64:	330a      	adds	r3, #10
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d201      	bcs.n	8006c74 <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 8006c70:	230d      	movs	r3, #13
 8006c72:	e0af      	b.n	8006dd4 <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c7a:	3310      	adds	r3, #16
 8006c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c80:	601a      	str	r2, [r3, #0]
 8006c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c88:	3310      	adds	r3, #16
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c92:	330c      	adds	r3, #12
 8006c94:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8006c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c9c:	3305      	adds	r3, #5
 8006c9e:	2280      	movs	r2, #128	; 0x80
 8006ca0:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8006ca2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ca6:	2b03      	cmp	r3, #3
 8006ca8:	d17d      	bne.n	8006da6 <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8006caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006cb0:	021b      	lsls	r3, r3, #8
 8006cb2:	b21a      	sxth	r2, r3
 8006cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006cba:	b21b      	sxth	r3, r3
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	b21b      	sxth	r3, r3
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d170      	bne.n	8006da6 <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 8006cc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	4619      	mov	r1, r3
 8006cca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006ccc:	f7fd fee8 	bl	8004aa0 <move_window>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d167      	bne.n	8006da6 <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 8006cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cdc:	3305      	adds	r3, #5
 8006cde:	2200      	movs	r2, #0
 8006ce0:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce4:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8006ce8:	021b      	lsls	r3, r3, #8
 8006cea:	b21a      	sxth	r2, r3
 8006cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cee:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006cf2:	b21b      	sxth	r3, r3
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	b21b      	sxth	r3, r3
 8006cf8:	4a38      	ldr	r2, [pc, #224]	; (8006ddc <find_volume+0x6a8>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d153      	bne.n	8006da6 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8006cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d00:	78db      	ldrb	r3, [r3, #3]
 8006d02:	061a      	lsls	r2, r3, #24
 8006d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d06:	789b      	ldrb	r3, [r3, #2]
 8006d08:	041b      	lsls	r3, r3, #16
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d0e:	7852      	ldrb	r2, [r2, #1]
 8006d10:	0212      	lsls	r2, r2, #8
 8006d12:	4313      	orrs	r3, r2
 8006d14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d16:	7812      	ldrb	r2, [r2, #0]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	4a31      	ldr	r2, [pc, #196]	; (8006de0 <find_volume+0x6ac>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d142      	bne.n	8006da6 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8006d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d22:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8006d26:	061a      	lsls	r2, r3, #24
 8006d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2a:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8006d2e:	041b      	lsls	r3, r3, #16
 8006d30:	4313      	orrs	r3, r2
 8006d32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d34:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8006d38:	0212      	lsls	r2, r2, #8
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d3e:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8006d42:	4313      	orrs	r3, r2
 8006d44:	4a27      	ldr	r2, [pc, #156]	; (8006de4 <find_volume+0x6b0>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d12d      	bne.n	8006da6 <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8006d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4c:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8006d50:	061a      	lsls	r2, r3, #24
 8006d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d54:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8006d58:	041b      	lsls	r3, r3, #16
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d5e:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8006d62:	0212      	lsls	r2, r2, #8
 8006d64:	4313      	orrs	r3, r2
 8006d66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d68:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8006d6c:	431a      	orrs	r2, r3
 8006d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d74:	3310      	adds	r3, #16
 8006d76:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8006d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7a:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8006d7e:	061a      	lsls	r2, r3, #24
 8006d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d82:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8006d86:	041b      	lsls	r3, r3, #16
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d8c:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8006d90:	0212      	lsls	r2, r2, #8
 8006d92:	4313      	orrs	r3, r2
 8006d94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d96:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006da2:	330c      	adds	r3, #12
 8006da4:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8006da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dac:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006db0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8006db2:	4b0d      	ldr	r3, [pc, #52]	; (8006de8 <find_volume+0x6b4>)
 8006db4:	881b      	ldrh	r3, [r3, #0]
 8006db6:	3301      	adds	r3, #1
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	4b0b      	ldr	r3, [pc, #44]	; (8006de8 <find_volume+0x6b4>)
 8006dbc:	801a      	strh	r2, [r3, #0]
 8006dbe:	4b0a      	ldr	r3, [pc, #40]	; (8006de8 <find_volume+0x6b4>)
 8006dc0:	881a      	ldrh	r2, [r3, #0]
 8006dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dc8:	3306      	adds	r3, #6
 8006dca:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8006dcc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006dce:	f7fd fde5 	bl	800499c <clear_lock>
#endif

	return FR_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3758      	adds	r7, #88	; 0x58
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	ffffaa55 	.word	0xffffaa55
 8006de0:	41615252 	.word	0x41615252
 8006de4:	61417272 	.word	0x61417272
 8006de8:	200000bc 	.word	0x200000bc

08006dec <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d02d      	beq.n	8006e5a <validate+0x6e>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d027      	beq.n	8006e5a <validate+0x6e>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d01e      	beq.n	8006e5a <validate+0x6e>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e28:	3306      	adds	r3, #6
 8006e2a:	881a      	ldrh	r2, [r3, #0]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e32:	3304      	adds	r3, #4
 8006e34:	881b      	ldrh	r3, [r3, #0]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d10f      	bne.n	8006e5a <validate+0x6e>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e46:	3301      	adds	r3, #1
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fd faf8 	bl	8004440 <disk_status>
 8006e50:	4603      	mov	r3, r0
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d001      	beq.n	8006e5e <validate+0x72>
		return FR_INVALID_OBJECT;
 8006e5a:	2309      	movs	r3, #9
 8006e5c:	e000      	b.n	8006e60 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b088      	sub	sp, #32
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	4613      	mov	r3, r2
 8006e74:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8006e7a:	f107 0310 	add.w	r3, r7, #16
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7ff fba7 	bl	80065d2 <get_ldnumber>
 8006e84:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	da01      	bge.n	8006e90 <f_mount+0x28>
 8006e8c:	230b      	movs	r3, #11
 8006e8e:	e02f      	b.n	8006ef0 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006e90:	4a19      	ldr	r2, [pc, #100]	; (8006ef8 <f_mount+0x90>)
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e98:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d007      	beq.n	8006eb0 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8006ea0:	69b8      	ldr	r0, [r7, #24]
 8006ea2:	f7fd fd7b 	bl	800499c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eac:	2200      	movs	r2, #0
 8006eae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d004      	beq.n	8006ec0 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	490d      	ldr	r1, [pc, #52]	; (8006ef8 <f_mount+0x90>)
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d002      	beq.n	8006ed6 <f_mount+0x6e>
 8006ed0:	79fb      	ldrb	r3, [r7, #7]
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d001      	beq.n	8006eda <f_mount+0x72>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	e00a      	b.n	8006ef0 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8006eda:	f107 0108 	add.w	r1, r7, #8
 8006ede:	f107 030c 	add.w	r3, r7, #12
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7ff fc25 	bl	8006734 <find_volume>
 8006eea:	4603      	mov	r3, r0
 8006eec:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3720      	adds	r7, #32
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	200000b8 	.word	0x200000b8

08006efc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	f107 0318 	add.w	r3, r7, #24
 8006f0a:	3b0c      	subs	r3, #12
 8006f0c:	6018      	str	r0, [r3, #0]
 8006f0e:	f107 0318 	add.w	r3, r7, #24
 8006f12:	3b10      	subs	r3, #16
 8006f14:	6019      	str	r1, [r3, #0]
 8006f16:	f107 0318 	add.w	r3, r7, #24
 8006f1a:	3b11      	subs	r3, #17
 8006f1c:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8006f1e:	f107 0318 	add.w	r3, r7, #24
 8006f22:	3b0c      	subs	r3, #12
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d101      	bne.n	8006f2e <f_open+0x32>
 8006f2a:	2309      	movs	r3, #9
 8006f2c:	e319      	b.n	8007562 <f_open+0x666>
	fp->fs = 0;			/* Clear file object */
 8006f2e:	f107 0318 	add.w	r3, r7, #24
 8006f32:	3b0c      	subs	r3, #12
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8006f3e:	f107 0318 	add.w	r3, r7, #24
 8006f42:	3b11      	subs	r3, #17
 8006f44:	f107 0218 	add.w	r2, r7, #24
 8006f48:	3a11      	subs	r2, #17
 8006f4a:	7812      	ldrb	r2, [r2, #0]
 8006f4c:	f002 021f 	and.w	r2, r2, #31
 8006f50:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8006f52:	f107 0318 	add.w	r3, r7, #24
 8006f56:	3b11      	subs	r3, #17
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	f023 0301 	bic.w	r3, r3, #1
 8006f5e:	b2da      	uxtb	r2, r3
 8006f60:	f107 0118 	add.w	r1, r7, #24
 8006f64:	3910      	subs	r1, #16
 8006f66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006f6a:	3b18      	subs	r3, #24
 8006f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7ff fbdf 	bl	8006734 <find_volume>
 8006f76:	4603      	mov	r3, r0
 8006f78:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006f7c:	f102 0217 	add.w	r2, r2, #23
 8006f80:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8006f82:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006f86:	f103 0317 	add.w	r3, r3, #23
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f040 82e3 	bne.w	8007558 <f_open+0x65c>
		INIT_BUF(dj);
 8006f92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006f96:	3b18      	subs	r3, #24
 8006f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f9c:	3318      	adds	r3, #24
 8006f9e:	f107 0218 	add.w	r2, r7, #24
 8006fa2:	3a04      	subs	r2, #4
 8006fa4:	601a      	str	r2, [r3, #0]
 8006fa6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006faa:	3b18      	subs	r3, #24
 8006fac:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006fb0:	4ad1      	ldr	r2, [pc, #836]	; (80072f8 <f_open+0x3fc>)
 8006fb2:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 8006fb4:	f107 0318 	add.w	r3, r7, #24
 8006fb8:	3b10      	subs	r3, #16
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006fc0:	3b18      	subs	r3, #24
 8006fc2:	4611      	mov	r1, r2
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7ff fa8b 	bl	80064e0 <follow_path>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006fd0:	f102 0217 	add.w	r2, r2, #23
 8006fd4:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8006fd6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006fda:	3b18      	subs	r3, #24
 8006fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fe0:	3314      	adds	r3, #20
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006fe8:	f102 0210 	add.w	r2, r2, #16
 8006fec:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006fee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006ff2:	f103 0317 	add.w	r3, r3, #23
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d126      	bne.n	800704a <f_open+0x14e>
			if (!dir)	/* Default directory itself */
 8006ffc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007000:	f103 0310 	add.w	r3, r3, #16
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d106      	bne.n	8007018 <f_open+0x11c>
				res = FR_INVALID_NAME;
 800700a:	2306      	movs	r3, #6
 800700c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007010:	f102 0217 	add.w	r2, r2, #23
 8007014:	7013      	strb	r3, [r2, #0]
 8007016:	e018      	b.n	800704a <f_open+0x14e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007018:	f107 0318 	add.w	r3, r7, #24
 800701c:	3b11      	subs	r3, #17
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	f023 0301 	bic.w	r3, r3, #1
 8007024:	2b00      	cmp	r3, #0
 8007026:	bf14      	ite	ne
 8007028:	2301      	movne	r3, #1
 800702a:	2300      	moveq	r3, #0
 800702c:	b2db      	uxtb	r3, r3
 800702e:	461a      	mov	r2, r3
 8007030:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007034:	3b18      	subs	r3, #24
 8007036:	4611      	mov	r1, r2
 8007038:	4618      	mov	r0, r3
 800703a:	f7fd fb15 	bl	8004668 <chk_lock>
 800703e:	4603      	mov	r3, r0
 8007040:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007044:	f102 0217 	add.w	r2, r2, #23
 8007048:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800704a:	f107 0318 	add.w	r3, r7, #24
 800704e:	3b11      	subs	r3, #17
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	f003 031c 	and.w	r3, r3, #28
 8007056:	2b00      	cmp	r3, #0
 8007058:	f000 8150 	beq.w	80072fc <f_open+0x400>
			if (res != FR_OK) {					/* No file, create new */
 800705c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007060:	f103 0317 	add.w	r3, r3, #23
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d030      	beq.n	80070cc <f_open+0x1d0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800706a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800706e:	f103 0317 	add.w	r3, r3, #23
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	2b04      	cmp	r3, #4
 8007076:	d112      	bne.n	800709e <f_open+0x1a2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007078:	f7fd fb68 	bl	800474c <enq_lock>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d007      	beq.n	8007092 <f_open+0x196>
 8007082:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007086:	3b18      	subs	r3, #24
 8007088:	4618      	mov	r0, r3
 800708a:	f7fe ff37 	bl	8005efc <dir_register>
 800708e:	4603      	mov	r3, r0
 8007090:	e000      	b.n	8007094 <f_open+0x198>
 8007092:	2312      	movs	r3, #18
 8007094:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007098:	f102 0217 	add.w	r2, r2, #23
 800709c:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800709e:	f107 0318 	add.w	r3, r7, #24
 80070a2:	3b11      	subs	r3, #17
 80070a4:	f107 0218 	add.w	r2, r7, #24
 80070a8:	3a11      	subs	r2, #17
 80070aa:	7812      	ldrb	r2, [r2, #0]
 80070ac:	f042 0208 	orr.w	r2, r2, #8
 80070b0:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 80070b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80070b6:	3b18      	subs	r3, #24
 80070b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070bc:	3314      	adds	r3, #20
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80070c4:	f102 0210 	add.w	r2, r2, #16
 80070c8:	6013      	str	r3, [r2, #0]
 80070ca:	e01f      	b.n	800710c <f_open+0x210>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80070cc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80070d0:	f103 0310 	add.w	r3, r3, #16
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	330b      	adds	r3, #11
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	f003 0311 	and.w	r3, r3, #17
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d006      	beq.n	80070f0 <f_open+0x1f4>
					res = FR_DENIED;
 80070e2:	2307      	movs	r3, #7
 80070e4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80070e8:	f102 0217 	add.w	r2, r2, #23
 80070ec:	7013      	strb	r3, [r2, #0]
 80070ee:	e00d      	b.n	800710c <f_open+0x210>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80070f0:	f107 0318 	add.w	r3, r7, #24
 80070f4:	3b11      	subs	r3, #17
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	f003 0304 	and.w	r3, r3, #4
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d005      	beq.n	800710c <f_open+0x210>
						res = FR_EXIST;
 8007100:	2308      	movs	r3, #8
 8007102:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007106:	f102 0217 	add.w	r2, r2, #23
 800710a:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800710c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007110:	f103 0317 	add.w	r3, r3, #23
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	f040 8122 	bne.w	8007360 <f_open+0x464>
 800711c:	f107 0318 	add.w	r3, r7, #24
 8007120:	3b11      	subs	r3, #17
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	f003 0308 	and.w	r3, r3, #8
 8007128:	2b00      	cmp	r3, #0
 800712a:	f000 8119 	beq.w	8007360 <f_open+0x464>
				dw = GET_FATTIME();				/* Created time */
 800712e:	f7fd f97f 	bl	8004430 <get_fattime>
 8007132:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007136:	f103 030c 	add.w	r3, r3, #12
 800713a:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800713c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007140:	f103 0310 	add.w	r3, r3, #16
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	330e      	adds	r3, #14
 8007148:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800714c:	f102 020c 	add.w	r2, r2, #12
 8007150:	6812      	ldr	r2, [r2, #0]
 8007152:	b2d2      	uxtb	r2, r2
 8007154:	701a      	strb	r2, [r3, #0]
 8007156:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800715a:	f103 030c 	add.w	r3, r3, #12
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	b29b      	uxth	r3, r3
 8007162:	0a1b      	lsrs	r3, r3, #8
 8007164:	b29a      	uxth	r2, r3
 8007166:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800716a:	f103 0310 	add.w	r3, r3, #16
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	330f      	adds	r3, #15
 8007172:	b2d2      	uxtb	r2, r2
 8007174:	701a      	strb	r2, [r3, #0]
 8007176:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800717a:	f103 030c 	add.w	r3, r3, #12
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	0c1a      	lsrs	r2, r3, #16
 8007182:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007186:	f103 0310 	add.w	r3, r3, #16
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	3310      	adds	r3, #16
 800718e:	b2d2      	uxtb	r2, r2
 8007190:	701a      	strb	r2, [r3, #0]
 8007192:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007196:	f103 030c 	add.w	r3, r3, #12
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	0e1a      	lsrs	r2, r3, #24
 800719e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80071a2:	f103 0310 	add.w	r3, r3, #16
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	3311      	adds	r3, #17
 80071aa:	b2d2      	uxtb	r2, r2
 80071ac:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80071ae:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80071b2:	f103 0310 	add.w	r3, r3, #16
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	330b      	adds	r3, #11
 80071ba:	2200      	movs	r2, #0
 80071bc:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80071be:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80071c2:	f103 0310 	add.w	r3, r3, #16
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	331c      	adds	r3, #28
 80071ca:	2200      	movs	r2, #0
 80071cc:	701a      	strb	r2, [r3, #0]
 80071ce:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80071d2:	f103 0310 	add.w	r3, r3, #16
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	331d      	adds	r3, #29
 80071da:	2200      	movs	r2, #0
 80071dc:	701a      	strb	r2, [r3, #0]
 80071de:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80071e2:	f103 0310 	add.w	r3, r3, #16
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	331e      	adds	r3, #30
 80071ea:	2200      	movs	r2, #0
 80071ec:	701a      	strb	r2, [r3, #0]
 80071ee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80071f2:	f103 0310 	add.w	r3, r3, #16
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	331f      	adds	r3, #31
 80071fa:	2200      	movs	r2, #0
 80071fc:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80071fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007202:	3b18      	subs	r3, #24
 8007204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800720e:	f102 0210 	add.w	r2, r2, #16
 8007212:	6811      	ldr	r1, [r2, #0]
 8007214:	4618      	mov	r0, r3
 8007216:	f7fe fbb6 	bl	8005986 <ld_clust>
 800721a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800721e:	f103 0308 	add.w	r3, r3, #8
 8007222:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8007224:	2100      	movs	r1, #0
 8007226:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800722a:	f103 0310 	add.w	r3, r3, #16
 800722e:	6818      	ldr	r0, [r3, #0]
 8007230:	f7fe fbd7 	bl	80059e2 <st_clust>
				dj.fs->wflag = 1;
 8007234:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007238:	3b18      	subs	r3, #24
 800723a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007244:	3304      	adds	r3, #4
 8007246:	2201      	movs	r2, #1
 8007248:	701a      	strb	r2, [r3, #0]
				if (cl) {						/* Remove the cluster chain if exist */
 800724a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800724e:	f103 0308 	add.w	r3, r3, #8
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 8083 	beq.w	8007360 <f_open+0x464>
					dw = dj.fs->winsect;
 800725a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800725e:	3b18      	subs	r3, #24
 8007260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800726a:	330c      	adds	r3, #12
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007272:	f102 020c 	add.w	r2, r2, #12
 8007276:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8007278:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800727c:	3b18      	subs	r3, #24
 800727e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007288:	f102 0208 	add.w	r2, r2, #8
 800728c:	6811      	ldr	r1, [r2, #0]
 800728e:	4618      	mov	r0, r3
 8007290:	f7fd ff8f 	bl	80051b2 <remove_chain>
 8007294:	4603      	mov	r3, r0
 8007296:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800729a:	f102 0217 	add.w	r2, r2, #23
 800729e:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 80072a0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80072a4:	f103 0317 	add.w	r3, r3, #23
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d158      	bne.n	8007360 <f_open+0x464>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80072ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80072b2:	3b18      	subs	r3, #24
 80072b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80072be:	f102 0208 	add.w	r2, r2, #8
 80072c2:	6812      	ldr	r2, [r2, #0]
 80072c4:	3a01      	subs	r2, #1
 80072c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072ca:	330c      	adds	r3, #12
 80072cc:	601a      	str	r2, [r3, #0]
						res = move_window(dj.fs, dw);
 80072ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80072d2:	3b18      	subs	r3, #24
 80072d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80072de:	f102 020c 	add.w	r2, r2, #12
 80072e2:	6811      	ldr	r1, [r2, #0]
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7fd fbdb 	bl	8004aa0 <move_window>
 80072ea:	4603      	mov	r3, r0
 80072ec:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80072f0:	f102 0217 	add.w	r2, r2, #23
 80072f4:	7013      	strb	r3, [r2, #0]
 80072f6:	e033      	b.n	8007360 <f_open+0x464>
 80072f8:	200000d8 	.word	0x200000d8
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80072fc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007300:	f103 0317 	add.w	r3, r3, #23
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d12a      	bne.n	8007360 <f_open+0x464>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800730a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800730e:	f103 0310 	add.w	r3, r3, #16
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	330b      	adds	r3, #11
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	f003 0310 	and.w	r3, r3, #16
 800731c:	2b00      	cmp	r3, #0
 800731e:	d006      	beq.n	800732e <f_open+0x432>
					res = FR_NO_FILE;
 8007320:	2304      	movs	r3, #4
 8007322:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007326:	f102 0217 	add.w	r2, r2, #23
 800732a:	7013      	strb	r3, [r2, #0]
 800732c:	e018      	b.n	8007360 <f_open+0x464>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800732e:	f107 0318 	add.w	r3, r7, #24
 8007332:	3b11      	subs	r3, #17
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	f003 0302 	and.w	r3, r3, #2
 800733a:	2b00      	cmp	r3, #0
 800733c:	d010      	beq.n	8007360 <f_open+0x464>
 800733e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007342:	f103 0310 	add.w	r3, r3, #16
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	330b      	adds	r3, #11
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	f003 0301 	and.w	r3, r3, #1
 8007350:	2b00      	cmp	r3, #0
 8007352:	d005      	beq.n	8007360 <f_open+0x464>
						res = FR_DENIED;
 8007354:	2307      	movs	r3, #7
 8007356:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800735a:	f102 0217 	add.w	r2, r2, #23
 800735e:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8007360:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007364:	f103 0317 	add.w	r3, r3, #23
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d15b      	bne.n	8007426 <f_open+0x52a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800736e:	f107 0318 	add.w	r3, r7, #24
 8007372:	3b11      	subs	r3, #17
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	f003 0308 	and.w	r3, r3, #8
 800737a:	2b00      	cmp	r3, #0
 800737c:	d009      	beq.n	8007392 <f_open+0x496>
				mode |= FA__WRITTEN;
 800737e:	f107 0318 	add.w	r3, r7, #24
 8007382:	3b11      	subs	r3, #17
 8007384:	f107 0218 	add.w	r2, r7, #24
 8007388:	3a11      	subs	r2, #17
 800738a:	7812      	ldrb	r2, [r2, #0]
 800738c:	f042 0220 	orr.w	r2, r2, #32
 8007390:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8007392:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007396:	3b18      	subs	r3, #24
 8007398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80073a2:	330c      	adds	r3, #12
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	f107 0318 	add.w	r3, r7, #24
 80073aa:	3b0c      	subs	r3, #12
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073b2:	331c      	adds	r3, #28
 80073b4:	601a      	str	r2, [r3, #0]
			fp->dir_ptr = dir;
 80073b6:	f107 0318 	add.w	r3, r7, #24
 80073ba:	3b0c      	subs	r3, #12
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80073c2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80073c6:	f102 0210 	add.w	r2, r2, #16
 80073ca:	6812      	ldr	r2, [r2, #0]
 80073cc:	601a      	str	r2, [r3, #0]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80073ce:	f107 0318 	add.w	r3, r7, #24
 80073d2:	3b11      	subs	r3, #17
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	f023 0301 	bic.w	r3, r3, #1
 80073da:	2b00      	cmp	r3, #0
 80073dc:	bf14      	ite	ne
 80073de:	2301      	movne	r3, #1
 80073e0:	2300      	moveq	r3, #0
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	461a      	mov	r2, r3
 80073e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80073ea:	3b18      	subs	r3, #24
 80073ec:	4611      	mov	r1, r2
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7fd f9d0 	bl	8004794 <inc_lock>
 80073f4:	4602      	mov	r2, r0
 80073f6:	f107 0318 	add.w	r3, r7, #24
 80073fa:	3b0c      	subs	r3, #12
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007402:	3308      	adds	r3, #8
 8007404:	601a      	str	r2, [r3, #0]
			if (!fp->lockid) res = FR_INT_ERR;
 8007406:	f107 0318 	add.w	r3, r7, #24
 800740a:	3b0c      	subs	r3, #12
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007412:	3308      	adds	r3, #8
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d105      	bne.n	8007426 <f_open+0x52a>
 800741a:	2302      	movs	r3, #2
 800741c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007420:	f102 0217 	add.w	r2, r2, #23
 8007424:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8007426:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800742a:	f103 0317 	add.w	r3, r3, #23
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	f040 8091 	bne.w	8007558 <f_open+0x65c>
			fp->flag = mode;					/* File access mode */
 8007436:	f107 0318 	add.w	r3, r7, #24
 800743a:	3b0c      	subs	r3, #12
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007442:	3306      	adds	r3, #6
 8007444:	f107 0218 	add.w	r2, r7, #24
 8007448:	3a11      	subs	r2, #17
 800744a:	7812      	ldrb	r2, [r2, #0]
 800744c:	701a      	strb	r2, [r3, #0]
			fp->err = 0;						/* Clear error flag */
 800744e:	f107 0318 	add.w	r3, r7, #24
 8007452:	3b0c      	subs	r3, #12
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800745a:	3307      	adds	r3, #7
 800745c:	2200      	movs	r2, #0
 800745e:	701a      	strb	r2, [r3, #0]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8007460:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007464:	3b18      	subs	r3, #24
 8007466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007470:	f102 0210 	add.w	r2, r2, #16
 8007474:	6811      	ldr	r1, [r2, #0]
 8007476:	4618      	mov	r0, r3
 8007478:	f7fe fa85 	bl	8005986 <ld_clust>
 800747c:	4602      	mov	r2, r0
 800747e:	f107 0318 	add.w	r3, r7, #24
 8007482:	3b0c      	subs	r3, #12
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800748a:	3310      	adds	r3, #16
 800748c:	601a      	str	r2, [r3, #0]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800748e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007492:	f103 0310 	add.w	r3, r3, #16
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	331f      	adds	r3, #31
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	061a      	lsls	r2, r3, #24
 800749e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80074a2:	f103 0310 	add.w	r3, r3, #16
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	331e      	adds	r3, #30
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	041b      	lsls	r3, r3, #16
 80074ae:	4313      	orrs	r3, r2
 80074b0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80074b4:	f102 0210 	add.w	r2, r2, #16
 80074b8:	6812      	ldr	r2, [r2, #0]
 80074ba:	321d      	adds	r2, #29
 80074bc:	7812      	ldrb	r2, [r2, #0]
 80074be:	0212      	lsls	r2, r2, #8
 80074c0:	4313      	orrs	r3, r2
 80074c2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80074c6:	f102 0210 	add.w	r2, r2, #16
 80074ca:	6812      	ldr	r2, [r2, #0]
 80074cc:	321c      	adds	r2, #28
 80074ce:	7812      	ldrb	r2, [r2, #0]
 80074d0:	431a      	orrs	r2, r3
 80074d2:	f107 0318 	add.w	r3, r7, #24
 80074d6:	3b0c      	subs	r3, #12
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074de:	330c      	adds	r3, #12
 80074e0:	601a      	str	r2, [r3, #0]
			fp->fptr = 0;						/* File pointer */
 80074e2:	f107 0318 	add.w	r3, r7, #24
 80074e6:	3b0c      	subs	r3, #12
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ee:	3308      	adds	r3, #8
 80074f0:	2200      	movs	r2, #0
 80074f2:	601a      	str	r2, [r3, #0]
			fp->dsect = 0;
 80074f4:	f107 0318 	add.w	r3, r7, #24
 80074f8:	3b0c      	subs	r3, #12
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007500:	3318      	adds	r3, #24
 8007502:	2200      	movs	r2, #0
 8007504:	601a      	str	r2, [r3, #0]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8007506:	f107 0318 	add.w	r3, r7, #24
 800750a:	3b0c      	subs	r3, #12
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007512:	3304      	adds	r3, #4
 8007514:	2200      	movs	r2, #0
 8007516:	601a      	str	r2, [r3, #0]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007518:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800751c:	3b18      	subs	r3, #24
 800751e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	f107 0318 	add.w	r3, r7, #24
 8007528:	3b0c      	subs	r3, #12
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007530:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 8007532:	f107 0318 	add.w	r3, r7, #24
 8007536:	3b0c      	subs	r3, #12
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007544:	3306      	adds	r3, #6
 8007546:	881a      	ldrh	r2, [r3, #0]
 8007548:	f107 0318 	add.w	r3, r7, #24
 800754c:	3b0c      	subs	r3, #12
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007554:	3304      	adds	r3, #4
 8007556:	801a      	strh	r2, [r3, #0]
		}
	}

	LEAVE_FF(dj.fs, res);
 8007558:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800755c:	f103 0317 	add.w	r3, r3, #23
 8007560:	781b      	ldrb	r3, [r3, #0]
}
 8007562:	4618      	mov	r0, r3
 8007564:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8007568:	3718      	adds	r7, #24
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop

08007570 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b08a      	sub	sp, #40	; 0x28
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
 800757c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2200      	movs	r2, #0
 8007586:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f7ff fc2f 	bl	8006dec <validate>
 800758e:	4603      	mov	r3, r0
 8007590:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007592:	7dfb      	ldrb	r3, [r7, #23]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d001      	beq.n	800759c <f_write+0x2c>
 8007598:	7dfb      	ldrb	r3, [r7, #23]
 800759a:	e258      	b.n	8007a4e <f_write+0x4de>
	if (fp->err)							/* Check error */
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075a2:	3307      	adds	r3, #7
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d005      	beq.n	80075b6 <f_write+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075b0:	3307      	adds	r3, #7
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	e24b      	b.n	8007a4e <f_write+0x4de>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075bc:	3306      	adds	r3, #6
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	f003 0302 	and.w	r3, r3, #2
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d101      	bne.n	80075cc <f_write+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 80075c8:	2307      	movs	r3, #7
 80075ca:	e240      	b.n	8007a4e <f_write+0x4de>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075d2:	3308      	adds	r3, #8
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	441a      	add	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075e0:	3308      	adds	r3, #8
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	f080 8208 	bcs.w	80079fa <f_write+0x48a>
 80075ea:	2300      	movs	r3, #0
 80075ec:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80075ee:	e204      	b.n	80079fa <f_write+0x48a>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075f6:	3308      	adds	r3, #8
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007606:	330a      	adds	r3, #10
 8007608:	881b      	ldrh	r3, [r3, #0]
 800760a:	fbb2 f1f3 	udiv	r1, r2, r3
 800760e:	fb03 f301 	mul.w	r3, r3, r1
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	2b00      	cmp	r3, #0
 8007616:	f040 818d 	bne.w	8007934 <f_write+0x3c4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007620:	3308      	adds	r3, #8
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007630:	330a      	adds	r3, #10
 8007632:	881b      	ldrh	r3, [r3, #0]
 8007634:	fbb2 f3f3 	udiv	r3, r2, r3
 8007638:	b2da      	uxtb	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007646:	3302      	adds	r3, #2
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	3b01      	subs	r3, #1
 800764c:	b2db      	uxtb	r3, r3
 800764e:	4013      	ands	r3, r2
 8007650:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8007652:	7dbb      	ldrb	r3, [r7, #22]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d167      	bne.n	8007728 <f_write+0x1b8>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800765e:	3308      	adds	r3, #8
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d112      	bne.n	800768c <f_write+0x11c>
					clst = fp->sclust;		/* Follow from the origin */
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800766c:	3310      	adds	r3, #16
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8007672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007674:	2b00      	cmp	r3, #0
 8007676:	d129      	bne.n	80076cc <f_write+0x15c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2100      	movs	r1, #0
 8007682:	4618      	mov	r0, r3
 8007684:	f7fd fdfd 	bl	8005282 <create_chain>
 8007688:	6278      	str	r0, [r7, #36]	; 0x24
 800768a:	e01f      	b.n	80076cc <f_write+0x15c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007692:	3304      	adds	r3, #4
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00a      	beq.n	80076b0 <f_write+0x140>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076a0:	3308      	adds	r3, #8
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4619      	mov	r1, r3
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f7fd fe9c 	bl	80053e4 <clmt_clust>
 80076ac:	6278      	str	r0, [r7, #36]	; 0x24
 80076ae:	e00d      	b.n	80076cc <f_write+0x15c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076be:	3314      	adds	r3, #20
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4619      	mov	r1, r3
 80076c4:	4610      	mov	r0, r2
 80076c6:	f7fd fddc 	bl	8005282 <create_chain>
 80076ca:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80076cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 8198 	beq.w	8007a04 <f_write+0x494>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80076d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d107      	bne.n	80076ea <f_write+0x17a>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076e0:	3307      	adds	r3, #7
 80076e2:	2202      	movs	r2, #2
 80076e4:	701a      	strb	r2, [r3, #0]
 80076e6:	2302      	movs	r3, #2
 80076e8:	e1b1      	b.n	8007a4e <f_write+0x4de>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80076ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f0:	d107      	bne.n	8007702 <f_write+0x192>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076f8:	3307      	adds	r3, #7
 80076fa:	2201      	movs	r2, #1
 80076fc:	701a      	strb	r2, [r3, #0]
 80076fe:	2301      	movs	r3, #1
 8007700:	e1a5      	b.n	8007a4e <f_write+0x4de>
				fp->clust = clst;			/* Update current cluster */
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007708:	3314      	adds	r3, #20
 800770a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800770c:	601a      	str	r2, [r3, #0]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007714:	3310      	adds	r3, #16
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d105      	bne.n	8007728 <f_write+0x1b8>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007722:	3310      	adds	r3, #16
 8007724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007726:	601a      	str	r2, [r3, #0]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800772e:	3306      	adds	r3, #6
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007736:	2b00      	cmp	r3, #0
 8007738:	d028      	beq.n	800778c <f_write+0x21c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007746:	3301      	adds	r3, #1
 8007748:	7818      	ldrb	r0, [r3, #0]
 800774a:	68f9      	ldr	r1, [r7, #12]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007752:	3318      	adds	r3, #24
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	2301      	movs	r3, #1
 8007758:	f7fc fed2 	bl	8004500 <disk_write>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d007      	beq.n	8007772 <f_write+0x202>
					ABORT(fp->fs, FR_DISK_ERR);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007768:	3307      	adds	r3, #7
 800776a:	2201      	movs	r2, #1
 800776c:	701a      	strb	r2, [r3, #0]
 800776e:	2301      	movs	r3, #1
 8007770:	e16d      	b.n	8007a4e <f_write+0x4de>
				fp->flag &= ~FA__DIRTY;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007778:	3306      	adds	r3, #6
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007780:	b2da      	uxtb	r2, r3
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007788:	3306      	adds	r3, #6
 800778a:	701a      	strb	r2, [r3, #0]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800779a:	3314      	adds	r3, #20
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4619      	mov	r1, r3
 80077a0:	4610      	mov	r0, r2
 80077a2:	f7fd fa80 	bl	8004ca6 <clust2sect>
 80077a6:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d107      	bne.n	80077be <f_write+0x24e>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077b4:	3307      	adds	r3, #7
 80077b6:	2202      	movs	r2, #2
 80077b8:	701a      	strb	r2, [r3, #0]
 80077ba:	2302      	movs	r3, #2
 80077bc:	e147      	b.n	8007a4e <f_write+0x4de>
			sect += csect;
 80077be:	7dbb      	ldrb	r3, [r7, #22]
 80077c0:	693a      	ldr	r2, [r7, #16]
 80077c2:	4413      	add	r3, r2
 80077c4:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077d2:	330a      	adds	r3, #10
 80077d4:	881b      	ldrh	r3, [r3, #0]
 80077d6:	461a      	mov	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	fbb3 f3f2 	udiv	r3, r3, r2
 80077de:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d074      	beq.n	80078d0 <f_write+0x360>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80077e6:	7dba      	ldrb	r2, [r7, #22]
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	441a      	add	r2, r3
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077f8:	3302      	adds	r3, #2
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d90b      	bls.n	8007818 <f_write+0x2a8>
					cc = fp->fs->csize - csect;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800780c:	3302      	adds	r3, #2
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	461a      	mov	r2, r3
 8007812:	7dbb      	ldrb	r3, [r7, #22]
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007824:	3301      	adds	r3, #1
 8007826:	7818      	ldrb	r0, [r3, #0]
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	693a      	ldr	r2, [r7, #16]
 800782c:	69b9      	ldr	r1, [r7, #24]
 800782e:	f7fc fe67 	bl	8004500 <disk_write>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d007      	beq.n	8007848 <f_write+0x2d8>
					ABORT(fp->fs, FR_DISK_ERR);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800783e:	3307      	adds	r3, #7
 8007840:	2201      	movs	r2, #1
 8007842:	701a      	strb	r2, [r3, #0]
 8007844:	2301      	movs	r3, #1
 8007846:	e102      	b.n	8007a4e <f_write+0x4de>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800784e:	3318      	adds	r3, #24
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	69fa      	ldr	r2, [r7, #28]
 8007858:	429a      	cmp	r2, r3
 800785a:	d92b      	bls.n	80078b4 <f_write+0x344>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007864:	3318      	adds	r3, #24
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	1ad2      	subs	r2, r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007878:	330a      	adds	r3, #10
 800787a:	881b      	ldrh	r3, [r3, #0]
 800787c:	fb03 f302 	mul.w	r3, r3, r2
 8007880:	69ba      	ldr	r2, [r7, #24]
 8007882:	18d1      	adds	r1, r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007890:	330a      	adds	r3, #10
 8007892:	881b      	ldrh	r3, [r3, #0]
 8007894:	461a      	mov	r2, r3
 8007896:	f7fc fe71 	bl	800457c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078a0:	3306      	adds	r3, #6
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078a8:	b2da      	uxtb	r2, r3
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078b0:	3306      	adds	r3, #6
 80078b2:	701a      	strb	r2, [r3, #0]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078c0:	330a      	adds	r3, #10
 80078c2:	881b      	ldrh	r3, [r3, #0]
 80078c4:	461a      	mov	r2, r3
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	fb02 f303 	mul.w	r3, r2, r3
 80078cc:	623b      	str	r3, [r7, #32]
				continue;
 80078ce:	e07a      	b.n	80079c6 <f_write+0x456>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078d6:	3318      	adds	r3, #24
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	693a      	ldr	r2, [r7, #16]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d023      	beq.n	8007928 <f_write+0x3b8>
				if (fp->fptr < fp->fsize &&
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078e6:	3308      	adds	r3, #8
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078f0:	330c      	adds	r3, #12
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d217      	bcs.n	8007928 <f_write+0x3b8>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007904:	3301      	adds	r3, #1
 8007906:	7818      	ldrb	r0, [r3, #0]
 8007908:	68f9      	ldr	r1, [r7, #12]
 800790a:	2301      	movs	r3, #1
 800790c:	693a      	ldr	r2, [r7, #16]
 800790e:	f7fc fdd7 	bl	80044c0 <disk_read>
 8007912:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8007914:	2b00      	cmp	r3, #0
 8007916:	d007      	beq.n	8007928 <f_write+0x3b8>
						ABORT(fp->fs, FR_DISK_ERR);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800791e:	3307      	adds	r3, #7
 8007920:	2201      	movs	r2, #1
 8007922:	701a      	strb	r2, [r3, #0]
 8007924:	2301      	movs	r3, #1
 8007926:	e092      	b.n	8007a4e <f_write+0x4de>
			}
#endif
			fp->dsect = sect;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800792e:	3318      	adds	r3, #24
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	601a      	str	r2, [r3, #0]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007940:	330a      	adds	r3, #10
 8007942:	881b      	ldrh	r3, [r3, #0]
 8007944:	4618      	mov	r0, r3
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800794c:	3308      	adds	r3, #8
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800795c:	330a      	adds	r3, #10
 800795e:	881b      	ldrh	r3, [r3, #0]
 8007960:	fbb2 f1f3 	udiv	r1, r2, r3
 8007964:	fb03 f301 	mul.w	r3, r3, r1
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	1ac3      	subs	r3, r0, r3
 800796c:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800796e:	6a3a      	ldr	r2, [r7, #32]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	429a      	cmp	r2, r3
 8007974:	d901      	bls.n	800797a <f_write+0x40a>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007980:	3308      	adds	r3, #8
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007990:	330a      	adds	r3, #10
 8007992:	881b      	ldrh	r3, [r3, #0]
 8007994:	fbb2 f1f3 	udiv	r1, r2, r3
 8007998:	fb03 f301 	mul.w	r3, r3, r1
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	4413      	add	r3, r2
 80079a2:	6a3a      	ldr	r2, [r7, #32]
 80079a4:	69b9      	ldr	r1, [r7, #24]
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fc fde8 	bl	800457c <mem_cpy>
		fp->flag |= FA__DIRTY;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079b2:	3306      	adds	r3, #6
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079ba:	b2da      	uxtb	r2, r3
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079c2:	3306      	adds	r3, #6
 80079c4:	701a      	strb	r2, [r3, #0]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80079c6:	69ba      	ldr	r2, [r7, #24]
 80079c8:	6a3b      	ldr	r3, [r7, #32]
 80079ca:	4413      	add	r3, r2
 80079cc:	61bb      	str	r3, [r7, #24]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079d4:	3308      	adds	r3, #8
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	6a3b      	ldr	r3, [r7, #32]
 80079da:	441a      	add	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079e2:	3308      	adds	r3, #8
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	6a3b      	ldr	r3, [r7, #32]
 80079ec:	441a      	add	r2, r3
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	601a      	str	r2, [r3, #0]
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	6a3b      	ldr	r3, [r7, #32]
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f47f adf7 	bne.w	80075f0 <f_write+0x80>
 8007a02:	e000      	b.n	8007a06 <f_write+0x496>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007a04:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a0c:	3308      	adds	r3, #8
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a16:	330c      	adds	r3, #12
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d909      	bls.n	8007a32 <f_write+0x4c2>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a24:	3308      	adds	r3, #8
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a2e:	330c      	adds	r3, #12
 8007a30:	601a      	str	r2, [r3, #0]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a38:	3306      	adds	r3, #6
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	f043 0320 	orr.w	r3, r3, #32
 8007a40:	b2da      	uxtb	r2, r3
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a48:	3306      	adds	r3, #6
 8007a4a:	701a      	strb	r2, [r3, #0]

	LEAVE_FF(fp->fs, FR_OK);
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3728      	adds	r7, #40	; 0x28
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b086      	sub	sp, #24
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f7ff f9c4 	bl	8006dec <validate>
 8007a64:	4603      	mov	r3, r0
 8007a66:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007a68:	7dfb      	ldrb	r3, [r7, #23]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f040 80cc 	bne.w	8007c08 <f_sync+0x1b2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a76:	3306      	adds	r3, #6
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	f003 0320 	and.w	r3, r3, #32
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f000 80c2 	beq.w	8007c08 <f_sync+0x1b2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a8a:	3306      	adds	r3, #6
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d022      	beq.n	8007adc <f_sync+0x86>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	7818      	ldrb	r0, [r3, #0]
 8007aa6:	6879      	ldr	r1, [r7, #4]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aae:	3318      	adds	r3, #24
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	f7fc fd24 	bl	8004500 <disk_write>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d001      	beq.n	8007ac2 <f_sync+0x6c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e0a3      	b.n	8007c0a <f_sync+0x1b4>
				fp->flag &= ~FA__DIRTY;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ac8:	3306      	adds	r3, #6
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ad8:	3306      	adds	r3, #6
 8007ada:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aea:	331c      	adds	r3, #28
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4619      	mov	r1, r3
 8007af0:	4610      	mov	r0, r2
 8007af2:	f7fc ffd5 	bl	8004aa0 <move_window>
 8007af6:	4603      	mov	r3, r0
 8007af8:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8007afa:	7dfb      	ldrb	r3, [r7, #23]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f040 8083 	bne.w	8007c08 <f_sync+0x1b2>
				dir = fp->dir_ptr;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	330b      	adds	r3, #11
 8007b10:	781a      	ldrb	r2, [r3, #0]
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	330b      	adds	r3, #11
 8007b16:	f042 0220 	orr.w	r2, r2, #32
 8007b1a:	b2d2      	uxtb	r2, r2
 8007b1c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b24:	330c      	adds	r3, #12
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	331c      	adds	r3, #28
 8007b2c:	b2d2      	uxtb	r2, r2
 8007b2e:	701a      	strb	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b36:	330c      	adds	r3, #12
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	0a1b      	lsrs	r3, r3, #8
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	331d      	adds	r3, #29
 8007b44:	b2d2      	uxtb	r2, r2
 8007b46:	701a      	strb	r2, [r3, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b4e:	330c      	adds	r3, #12
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	0c1a      	lsrs	r2, r3, #16
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	331e      	adds	r3, #30
 8007b58:	b2d2      	uxtb	r2, r2
 8007b5a:	701a      	strb	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b62:	330c      	adds	r3, #12
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	0e1a      	lsrs	r2, r3, #24
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	331f      	adds	r3, #31
 8007b6c:	b2d2      	uxtb	r2, r2
 8007b6e:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b76:	3310      	adds	r3, #16
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	6938      	ldr	r0, [r7, #16]
 8007b7e:	f7fd ff30 	bl	80059e2 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8007b82:	f7fc fc55 	bl	8004430 <get_fattime>
 8007b86:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	3316      	adds	r3, #22
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	b2d2      	uxtb	r2, r2
 8007b90:	701a      	strb	r2, [r3, #0]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	0a1b      	lsrs	r3, r3, #8
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	3317      	adds	r3, #23
 8007b9e:	b2d2      	uxtb	r2, r2
 8007ba0:	701a      	strb	r2, [r3, #0]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	0c1a      	lsrs	r2, r3, #16
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	3318      	adds	r3, #24
 8007baa:	b2d2      	uxtb	r2, r2
 8007bac:	701a      	strb	r2, [r3, #0]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	0e1a      	lsrs	r2, r3, #24
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	3319      	adds	r3, #25
 8007bb6:	b2d2      	uxtb	r2, r2
 8007bb8:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	3312      	adds	r3, #18
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	701a      	strb	r2, [r3, #0]
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	3313      	adds	r3, #19
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bd0:	3306      	adds	r3, #6
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	f023 0320 	bic.w	r3, r3, #32
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007be0:	3306      	adds	r3, #6
 8007be2:	701a      	strb	r2, [r3, #0]
				fp->fs->wflag = 1;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bf0:	3304      	adds	r3, #4
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	701a      	strb	r2, [r3, #0]
				res = sync_fs(fp->fs);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fc ff82 	bl	8004b08 <sync_fs>
 8007c04:	4603      	mov	r3, r0
 8007c06:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8007c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3718      	adds	r7, #24
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b084      	sub	sp, #16
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7ff ff1b 	bl	8007a56 <f_sync>
 8007c20:	4603      	mov	r3, r0
 8007c22:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007c24:	7bfb      	ldrb	r3, [r7, #15]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d119      	bne.n	8007c5e <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f7ff f8de 	bl	8006dec <validate>
 8007c30:	4603      	mov	r3, r0
 8007c32:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007c34:	7bfb      	ldrb	r3, [r7, #15]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d111      	bne.n	8007c5e <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007c40:	3308      	adds	r3, #8
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7fc fe65 	bl	8004914 <dec_lock>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007c4e:	7bfb      	ldrb	r3, [r7, #15]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d104      	bne.n	8007c5e <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b087      	sub	sp, #28
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	4613      	mov	r3, r2
 8007c74:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007c76:	2301      	movs	r3, #1
 8007c78:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8007c7e:	4b1e      	ldr	r3, [pc, #120]	; (8007cf8 <FATFS_LinkDriverEx+0x90>)
 8007c80:	7a5b      	ldrb	r3, [r3, #9]
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d831      	bhi.n	8007cec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007c88:	4b1b      	ldr	r3, [pc, #108]	; (8007cf8 <FATFS_LinkDriverEx+0x90>)
 8007c8a:	7a5b      	ldrb	r3, [r3, #9]
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	461a      	mov	r2, r3
 8007c90:	4b19      	ldr	r3, [pc, #100]	; (8007cf8 <FATFS_LinkDriverEx+0x90>)
 8007c92:	2100      	movs	r1, #0
 8007c94:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8007c96:	4b18      	ldr	r3, [pc, #96]	; (8007cf8 <FATFS_LinkDriverEx+0x90>)
 8007c98:	7a5b      	ldrb	r3, [r3, #9]
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	4a16      	ldr	r2, [pc, #88]	; (8007cf8 <FATFS_LinkDriverEx+0x90>)
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	4413      	add	r3, r2
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8007ca6:	4b14      	ldr	r3, [pc, #80]	; (8007cf8 <FATFS_LinkDriverEx+0x90>)
 8007ca8:	7a5b      	ldrb	r3, [r3, #9]
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	461a      	mov	r2, r3
 8007cae:	4b12      	ldr	r3, [pc, #72]	; (8007cf8 <FATFS_LinkDriverEx+0x90>)
 8007cb0:	4413      	add	r3, r2
 8007cb2:	79fa      	ldrb	r2, [r7, #7]
 8007cb4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007cb6:	4b10      	ldr	r3, [pc, #64]	; (8007cf8 <FATFS_LinkDriverEx+0x90>)
 8007cb8:	7a5b      	ldrb	r3, [r3, #9]
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	1c5a      	adds	r2, r3, #1
 8007cbe:	b2d1      	uxtb	r1, r2
 8007cc0:	4a0d      	ldr	r2, [pc, #52]	; (8007cf8 <FATFS_LinkDriverEx+0x90>)
 8007cc2:	7251      	strb	r1, [r2, #9]
 8007cc4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007cc6:	7dbb      	ldrb	r3, [r7, #22]
 8007cc8:	3330      	adds	r3, #48	; 0x30
 8007cca:	b2da      	uxtb	r2, r3
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	223a      	movs	r2, #58	; 0x3a
 8007cd6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	3302      	adds	r3, #2
 8007cdc:	222f      	movs	r2, #47	; 0x2f
 8007cde:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	3303      	adds	r3, #3
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8007cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	371c      	adds	r7, #28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bc80      	pop	{r7}
 8007cf6:	4770      	bx	lr
 8007cf8:	200002d8 	.word	0x200002d8

08007cfc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007d06:	2200      	movs	r2, #0
 8007d08:	6839      	ldr	r1, [r7, #0]
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f7ff ffac 	bl	8007c68 <FATFS_LinkDriverEx>
 8007d10:	4603      	mov	r3, r0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
	...

08007d1c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	4603      	mov	r3, r0
 8007d24:	6039      	str	r1, [r7, #0]
 8007d26:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007d28:	88fb      	ldrh	r3, [r7, #6]
 8007d2a:	2b7f      	cmp	r3, #127	; 0x7f
 8007d2c:	d802      	bhi.n	8007d34 <ff_convert+0x18>
		c = chr;
 8007d2e:	88fb      	ldrh	r3, [r7, #6]
 8007d30:	81fb      	strh	r3, [r7, #14]
 8007d32:	e025      	b.n	8007d80 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00b      	beq.n	8007d52 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007d3a:	88fb      	ldrh	r3, [r7, #6]
 8007d3c:	2bff      	cmp	r3, #255	; 0xff
 8007d3e:	d805      	bhi.n	8007d4c <ff_convert+0x30>
 8007d40:	88fb      	ldrh	r3, [r7, #6]
 8007d42:	3b80      	subs	r3, #128	; 0x80
 8007d44:	4a11      	ldr	r2, [pc, #68]	; (8007d8c <ff_convert+0x70>)
 8007d46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d4a:	e000      	b.n	8007d4e <ff_convert+0x32>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	81fb      	strh	r3, [r7, #14]
 8007d50:	e016      	b.n	8007d80 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8007d52:	2300      	movs	r3, #0
 8007d54:	81fb      	strh	r3, [r7, #14]
 8007d56:	e009      	b.n	8007d6c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007d58:	89fb      	ldrh	r3, [r7, #14]
 8007d5a:	4a0c      	ldr	r2, [pc, #48]	; (8007d8c <ff_convert+0x70>)
 8007d5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d60:	88fa      	ldrh	r2, [r7, #6]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d006      	beq.n	8007d74 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007d66:	89fb      	ldrh	r3, [r7, #14]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	81fb      	strh	r3, [r7, #14]
 8007d6c:	89fb      	ldrh	r3, [r7, #14]
 8007d6e:	2b7f      	cmp	r3, #127	; 0x7f
 8007d70:	d9f2      	bls.n	8007d58 <ff_convert+0x3c>
 8007d72:	e000      	b.n	8007d76 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007d74:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007d76:	89fb      	ldrh	r3, [r7, #14]
 8007d78:	3380      	adds	r3, #128	; 0x80
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007d80:	89fb      	ldrh	r3, [r7, #14]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3714      	adds	r7, #20
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bc80      	pop	{r7}
 8007d8a:	4770      	bx	lr
 8007d8c:	08009134 	.word	0x08009134

08007d90 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	4603      	mov	r3, r0
 8007d98:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	60fb      	str	r3, [r7, #12]
 8007d9e:	e002      	b.n	8007da6 <ff_wtoupper+0x16>
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	3301      	adds	r3, #1
 8007da4:	60fb      	str	r3, [r7, #12]
 8007da6:	4a0f      	ldr	r2, [pc, #60]	; (8007de4 <ff_wtoupper+0x54>)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d006      	beq.n	8007dc0 <ff_wtoupper+0x30>
 8007db2:	4a0c      	ldr	r2, [pc, #48]	; (8007de4 <ff_wtoupper+0x54>)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dba:	88fa      	ldrh	r2, [r7, #6]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d1ef      	bne.n	8007da0 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8007dc0:	4a08      	ldr	r2, [pc, #32]	; (8007de4 <ff_wtoupper+0x54>)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d004      	beq.n	8007dd6 <ff_wtoupper+0x46>
 8007dcc:	4a06      	ldr	r2, [pc, #24]	; (8007de8 <ff_wtoupper+0x58>)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dd4:	e000      	b.n	8007dd8 <ff_wtoupper+0x48>
 8007dd6:	88fb      	ldrh	r3, [r7, #6]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bc80      	pop	{r7}
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	08009234 	.word	0x08009234
 8007de8:	08009414 	.word	0x08009414

08007dec <__errno>:
 8007dec:	4b01      	ldr	r3, [pc, #4]	; (8007df4 <__errno+0x8>)
 8007dee:	6818      	ldr	r0, [r3, #0]
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	20000024 	.word	0x20000024

08007df8 <__sflush_r>:
 8007df8:	898a      	ldrh	r2, [r1, #12]
 8007dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dfe:	4605      	mov	r5, r0
 8007e00:	0710      	lsls	r0, r2, #28
 8007e02:	460c      	mov	r4, r1
 8007e04:	d458      	bmi.n	8007eb8 <__sflush_r+0xc0>
 8007e06:	684b      	ldr	r3, [r1, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	dc05      	bgt.n	8007e18 <__sflush_r+0x20>
 8007e0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	dc02      	bgt.n	8007e18 <__sflush_r+0x20>
 8007e12:	2000      	movs	r0, #0
 8007e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e1a:	2e00      	cmp	r6, #0
 8007e1c:	d0f9      	beq.n	8007e12 <__sflush_r+0x1a>
 8007e1e:	2300      	movs	r3, #0
 8007e20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e24:	682f      	ldr	r7, [r5, #0]
 8007e26:	6a21      	ldr	r1, [r4, #32]
 8007e28:	602b      	str	r3, [r5, #0]
 8007e2a:	d032      	beq.n	8007e92 <__sflush_r+0x9a>
 8007e2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e2e:	89a3      	ldrh	r3, [r4, #12]
 8007e30:	075a      	lsls	r2, r3, #29
 8007e32:	d505      	bpl.n	8007e40 <__sflush_r+0x48>
 8007e34:	6863      	ldr	r3, [r4, #4]
 8007e36:	1ac0      	subs	r0, r0, r3
 8007e38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e3a:	b10b      	cbz	r3, 8007e40 <__sflush_r+0x48>
 8007e3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e3e:	1ac0      	subs	r0, r0, r3
 8007e40:	2300      	movs	r3, #0
 8007e42:	4602      	mov	r2, r0
 8007e44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e46:	6a21      	ldr	r1, [r4, #32]
 8007e48:	4628      	mov	r0, r5
 8007e4a:	47b0      	blx	r6
 8007e4c:	1c43      	adds	r3, r0, #1
 8007e4e:	89a3      	ldrh	r3, [r4, #12]
 8007e50:	d106      	bne.n	8007e60 <__sflush_r+0x68>
 8007e52:	6829      	ldr	r1, [r5, #0]
 8007e54:	291d      	cmp	r1, #29
 8007e56:	d848      	bhi.n	8007eea <__sflush_r+0xf2>
 8007e58:	4a29      	ldr	r2, [pc, #164]	; (8007f00 <__sflush_r+0x108>)
 8007e5a:	40ca      	lsrs	r2, r1
 8007e5c:	07d6      	lsls	r6, r2, #31
 8007e5e:	d544      	bpl.n	8007eea <__sflush_r+0xf2>
 8007e60:	2200      	movs	r2, #0
 8007e62:	6062      	str	r2, [r4, #4]
 8007e64:	6922      	ldr	r2, [r4, #16]
 8007e66:	04d9      	lsls	r1, r3, #19
 8007e68:	6022      	str	r2, [r4, #0]
 8007e6a:	d504      	bpl.n	8007e76 <__sflush_r+0x7e>
 8007e6c:	1c42      	adds	r2, r0, #1
 8007e6e:	d101      	bne.n	8007e74 <__sflush_r+0x7c>
 8007e70:	682b      	ldr	r3, [r5, #0]
 8007e72:	b903      	cbnz	r3, 8007e76 <__sflush_r+0x7e>
 8007e74:	6560      	str	r0, [r4, #84]	; 0x54
 8007e76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e78:	602f      	str	r7, [r5, #0]
 8007e7a:	2900      	cmp	r1, #0
 8007e7c:	d0c9      	beq.n	8007e12 <__sflush_r+0x1a>
 8007e7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e82:	4299      	cmp	r1, r3
 8007e84:	d002      	beq.n	8007e8c <__sflush_r+0x94>
 8007e86:	4628      	mov	r0, r5
 8007e88:	f000 f96e 	bl	8008168 <_free_r>
 8007e8c:	2000      	movs	r0, #0
 8007e8e:	6360      	str	r0, [r4, #52]	; 0x34
 8007e90:	e7c0      	b.n	8007e14 <__sflush_r+0x1c>
 8007e92:	2301      	movs	r3, #1
 8007e94:	4628      	mov	r0, r5
 8007e96:	47b0      	blx	r6
 8007e98:	1c41      	adds	r1, r0, #1
 8007e9a:	d1c8      	bne.n	8007e2e <__sflush_r+0x36>
 8007e9c:	682b      	ldr	r3, [r5, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d0c5      	beq.n	8007e2e <__sflush_r+0x36>
 8007ea2:	2b1d      	cmp	r3, #29
 8007ea4:	d001      	beq.n	8007eaa <__sflush_r+0xb2>
 8007ea6:	2b16      	cmp	r3, #22
 8007ea8:	d101      	bne.n	8007eae <__sflush_r+0xb6>
 8007eaa:	602f      	str	r7, [r5, #0]
 8007eac:	e7b1      	b.n	8007e12 <__sflush_r+0x1a>
 8007eae:	89a3      	ldrh	r3, [r4, #12]
 8007eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eb4:	81a3      	strh	r3, [r4, #12]
 8007eb6:	e7ad      	b.n	8007e14 <__sflush_r+0x1c>
 8007eb8:	690f      	ldr	r7, [r1, #16]
 8007eba:	2f00      	cmp	r7, #0
 8007ebc:	d0a9      	beq.n	8007e12 <__sflush_r+0x1a>
 8007ebe:	0793      	lsls	r3, r2, #30
 8007ec0:	bf18      	it	ne
 8007ec2:	2300      	movne	r3, #0
 8007ec4:	680e      	ldr	r6, [r1, #0]
 8007ec6:	bf08      	it	eq
 8007ec8:	694b      	ldreq	r3, [r1, #20]
 8007eca:	eba6 0807 	sub.w	r8, r6, r7
 8007ece:	600f      	str	r7, [r1, #0]
 8007ed0:	608b      	str	r3, [r1, #8]
 8007ed2:	f1b8 0f00 	cmp.w	r8, #0
 8007ed6:	dd9c      	ble.n	8007e12 <__sflush_r+0x1a>
 8007ed8:	4643      	mov	r3, r8
 8007eda:	463a      	mov	r2, r7
 8007edc:	6a21      	ldr	r1, [r4, #32]
 8007ede:	4628      	mov	r0, r5
 8007ee0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ee2:	47b0      	blx	r6
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	dc06      	bgt.n	8007ef6 <__sflush_r+0xfe>
 8007ee8:	89a3      	ldrh	r3, [r4, #12]
 8007eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eee:	81a3      	strh	r3, [r4, #12]
 8007ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef4:	e78e      	b.n	8007e14 <__sflush_r+0x1c>
 8007ef6:	4407      	add	r7, r0
 8007ef8:	eba8 0800 	sub.w	r8, r8, r0
 8007efc:	e7e9      	b.n	8007ed2 <__sflush_r+0xda>
 8007efe:	bf00      	nop
 8007f00:	20400001 	.word	0x20400001

08007f04 <_fflush_r>:
 8007f04:	b538      	push	{r3, r4, r5, lr}
 8007f06:	690b      	ldr	r3, [r1, #16]
 8007f08:	4605      	mov	r5, r0
 8007f0a:	460c      	mov	r4, r1
 8007f0c:	b1db      	cbz	r3, 8007f46 <_fflush_r+0x42>
 8007f0e:	b118      	cbz	r0, 8007f18 <_fflush_r+0x14>
 8007f10:	6983      	ldr	r3, [r0, #24]
 8007f12:	b90b      	cbnz	r3, 8007f18 <_fflush_r+0x14>
 8007f14:	f000 f872 	bl	8007ffc <__sinit>
 8007f18:	4b0c      	ldr	r3, [pc, #48]	; (8007f4c <_fflush_r+0x48>)
 8007f1a:	429c      	cmp	r4, r3
 8007f1c:	d109      	bne.n	8007f32 <_fflush_r+0x2e>
 8007f1e:	686c      	ldr	r4, [r5, #4]
 8007f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f24:	b17b      	cbz	r3, 8007f46 <_fflush_r+0x42>
 8007f26:	4621      	mov	r1, r4
 8007f28:	4628      	mov	r0, r5
 8007f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f2e:	f7ff bf63 	b.w	8007df8 <__sflush_r>
 8007f32:	4b07      	ldr	r3, [pc, #28]	; (8007f50 <_fflush_r+0x4c>)
 8007f34:	429c      	cmp	r4, r3
 8007f36:	d101      	bne.n	8007f3c <_fflush_r+0x38>
 8007f38:	68ac      	ldr	r4, [r5, #8]
 8007f3a:	e7f1      	b.n	8007f20 <_fflush_r+0x1c>
 8007f3c:	4b05      	ldr	r3, [pc, #20]	; (8007f54 <_fflush_r+0x50>)
 8007f3e:	429c      	cmp	r4, r3
 8007f40:	bf08      	it	eq
 8007f42:	68ec      	ldreq	r4, [r5, #12]
 8007f44:	e7ec      	b.n	8007f20 <_fflush_r+0x1c>
 8007f46:	2000      	movs	r0, #0
 8007f48:	bd38      	pop	{r3, r4, r5, pc}
 8007f4a:	bf00      	nop
 8007f4c:	08009614 	.word	0x08009614
 8007f50:	08009634 	.word	0x08009634
 8007f54:	080095f4 	.word	0x080095f4

08007f58 <fflush>:
 8007f58:	4601      	mov	r1, r0
 8007f5a:	b920      	cbnz	r0, 8007f66 <fflush+0xe>
 8007f5c:	4b04      	ldr	r3, [pc, #16]	; (8007f70 <fflush+0x18>)
 8007f5e:	4905      	ldr	r1, [pc, #20]	; (8007f74 <fflush+0x1c>)
 8007f60:	6818      	ldr	r0, [r3, #0]
 8007f62:	f000 b8b7 	b.w	80080d4 <_fwalk_reent>
 8007f66:	4b04      	ldr	r3, [pc, #16]	; (8007f78 <fflush+0x20>)
 8007f68:	6818      	ldr	r0, [r3, #0]
 8007f6a:	f7ff bfcb 	b.w	8007f04 <_fflush_r>
 8007f6e:	bf00      	nop
 8007f70:	08009654 	.word	0x08009654
 8007f74:	08007f05 	.word	0x08007f05
 8007f78:	20000024 	.word	0x20000024

08007f7c <std>:
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	b510      	push	{r4, lr}
 8007f80:	4604      	mov	r4, r0
 8007f82:	e9c0 3300 	strd	r3, r3, [r0]
 8007f86:	6083      	str	r3, [r0, #8]
 8007f88:	8181      	strh	r1, [r0, #12]
 8007f8a:	6643      	str	r3, [r0, #100]	; 0x64
 8007f8c:	81c2      	strh	r2, [r0, #14]
 8007f8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f92:	6183      	str	r3, [r0, #24]
 8007f94:	4619      	mov	r1, r3
 8007f96:	2208      	movs	r2, #8
 8007f98:	305c      	adds	r0, #92	; 0x5c
 8007f9a:	f000 f8dd 	bl	8008158 <memset>
 8007f9e:	4b05      	ldr	r3, [pc, #20]	; (8007fb4 <std+0x38>)
 8007fa0:	6224      	str	r4, [r4, #32]
 8007fa2:	6263      	str	r3, [r4, #36]	; 0x24
 8007fa4:	4b04      	ldr	r3, [pc, #16]	; (8007fb8 <std+0x3c>)
 8007fa6:	62a3      	str	r3, [r4, #40]	; 0x28
 8007fa8:	4b04      	ldr	r3, [pc, #16]	; (8007fbc <std+0x40>)
 8007faa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007fac:	4b04      	ldr	r3, [pc, #16]	; (8007fc0 <std+0x44>)
 8007fae:	6323      	str	r3, [r4, #48]	; 0x30
 8007fb0:	bd10      	pop	{r4, pc}
 8007fb2:	bf00      	nop
 8007fb4:	08008345 	.word	0x08008345
 8007fb8:	08008367 	.word	0x08008367
 8007fbc:	0800839f 	.word	0x0800839f
 8007fc0:	080083c3 	.word	0x080083c3

08007fc4 <_cleanup_r>:
 8007fc4:	4901      	ldr	r1, [pc, #4]	; (8007fcc <_cleanup_r+0x8>)
 8007fc6:	f000 b885 	b.w	80080d4 <_fwalk_reent>
 8007fca:	bf00      	nop
 8007fcc:	08007f05 	.word	0x08007f05

08007fd0 <__sfmoreglue>:
 8007fd0:	b570      	push	{r4, r5, r6, lr}
 8007fd2:	2568      	movs	r5, #104	; 0x68
 8007fd4:	1e4a      	subs	r2, r1, #1
 8007fd6:	4355      	muls	r5, r2
 8007fd8:	460e      	mov	r6, r1
 8007fda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007fde:	f000 f90f 	bl	8008200 <_malloc_r>
 8007fe2:	4604      	mov	r4, r0
 8007fe4:	b140      	cbz	r0, 8007ff8 <__sfmoreglue+0x28>
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	e9c0 1600 	strd	r1, r6, [r0]
 8007fec:	300c      	adds	r0, #12
 8007fee:	60a0      	str	r0, [r4, #8]
 8007ff0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ff4:	f000 f8b0 	bl	8008158 <memset>
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	bd70      	pop	{r4, r5, r6, pc}

08007ffc <__sinit>:
 8007ffc:	6983      	ldr	r3, [r0, #24]
 8007ffe:	b510      	push	{r4, lr}
 8008000:	4604      	mov	r4, r0
 8008002:	bb33      	cbnz	r3, 8008052 <__sinit+0x56>
 8008004:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008008:	6503      	str	r3, [r0, #80]	; 0x50
 800800a:	4b12      	ldr	r3, [pc, #72]	; (8008054 <__sinit+0x58>)
 800800c:	4a12      	ldr	r2, [pc, #72]	; (8008058 <__sinit+0x5c>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6282      	str	r2, [r0, #40]	; 0x28
 8008012:	4298      	cmp	r0, r3
 8008014:	bf04      	itt	eq
 8008016:	2301      	moveq	r3, #1
 8008018:	6183      	streq	r3, [r0, #24]
 800801a:	f000 f81f 	bl	800805c <__sfp>
 800801e:	6060      	str	r0, [r4, #4]
 8008020:	4620      	mov	r0, r4
 8008022:	f000 f81b 	bl	800805c <__sfp>
 8008026:	60a0      	str	r0, [r4, #8]
 8008028:	4620      	mov	r0, r4
 800802a:	f000 f817 	bl	800805c <__sfp>
 800802e:	2200      	movs	r2, #0
 8008030:	60e0      	str	r0, [r4, #12]
 8008032:	2104      	movs	r1, #4
 8008034:	6860      	ldr	r0, [r4, #4]
 8008036:	f7ff ffa1 	bl	8007f7c <std>
 800803a:	2201      	movs	r2, #1
 800803c:	2109      	movs	r1, #9
 800803e:	68a0      	ldr	r0, [r4, #8]
 8008040:	f7ff ff9c 	bl	8007f7c <std>
 8008044:	2202      	movs	r2, #2
 8008046:	2112      	movs	r1, #18
 8008048:	68e0      	ldr	r0, [r4, #12]
 800804a:	f7ff ff97 	bl	8007f7c <std>
 800804e:	2301      	movs	r3, #1
 8008050:	61a3      	str	r3, [r4, #24]
 8008052:	bd10      	pop	{r4, pc}
 8008054:	08009654 	.word	0x08009654
 8008058:	08007fc5 	.word	0x08007fc5

0800805c <__sfp>:
 800805c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805e:	4b1b      	ldr	r3, [pc, #108]	; (80080cc <__sfp+0x70>)
 8008060:	4607      	mov	r7, r0
 8008062:	681e      	ldr	r6, [r3, #0]
 8008064:	69b3      	ldr	r3, [r6, #24]
 8008066:	b913      	cbnz	r3, 800806e <__sfp+0x12>
 8008068:	4630      	mov	r0, r6
 800806a:	f7ff ffc7 	bl	8007ffc <__sinit>
 800806e:	3648      	adds	r6, #72	; 0x48
 8008070:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008074:	3b01      	subs	r3, #1
 8008076:	d503      	bpl.n	8008080 <__sfp+0x24>
 8008078:	6833      	ldr	r3, [r6, #0]
 800807a:	b133      	cbz	r3, 800808a <__sfp+0x2e>
 800807c:	6836      	ldr	r6, [r6, #0]
 800807e:	e7f7      	b.n	8008070 <__sfp+0x14>
 8008080:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008084:	b16d      	cbz	r5, 80080a2 <__sfp+0x46>
 8008086:	3468      	adds	r4, #104	; 0x68
 8008088:	e7f4      	b.n	8008074 <__sfp+0x18>
 800808a:	2104      	movs	r1, #4
 800808c:	4638      	mov	r0, r7
 800808e:	f7ff ff9f 	bl	8007fd0 <__sfmoreglue>
 8008092:	6030      	str	r0, [r6, #0]
 8008094:	2800      	cmp	r0, #0
 8008096:	d1f1      	bne.n	800807c <__sfp+0x20>
 8008098:	230c      	movs	r3, #12
 800809a:	4604      	mov	r4, r0
 800809c:	603b      	str	r3, [r7, #0]
 800809e:	4620      	mov	r0, r4
 80080a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080a2:	4b0b      	ldr	r3, [pc, #44]	; (80080d0 <__sfp+0x74>)
 80080a4:	6665      	str	r5, [r4, #100]	; 0x64
 80080a6:	e9c4 5500 	strd	r5, r5, [r4]
 80080aa:	60a5      	str	r5, [r4, #8]
 80080ac:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80080b0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80080b4:	2208      	movs	r2, #8
 80080b6:	4629      	mov	r1, r5
 80080b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80080bc:	f000 f84c 	bl	8008158 <memset>
 80080c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80080c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80080c8:	e7e9      	b.n	800809e <__sfp+0x42>
 80080ca:	bf00      	nop
 80080cc:	08009654 	.word	0x08009654
 80080d0:	ffff0001 	.word	0xffff0001

080080d4 <_fwalk_reent>:
 80080d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080d8:	4680      	mov	r8, r0
 80080da:	4689      	mov	r9, r1
 80080dc:	2600      	movs	r6, #0
 80080de:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80080e2:	b914      	cbnz	r4, 80080ea <_fwalk_reent+0x16>
 80080e4:	4630      	mov	r0, r6
 80080e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080ea:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80080ee:	3f01      	subs	r7, #1
 80080f0:	d501      	bpl.n	80080f6 <_fwalk_reent+0x22>
 80080f2:	6824      	ldr	r4, [r4, #0]
 80080f4:	e7f5      	b.n	80080e2 <_fwalk_reent+0xe>
 80080f6:	89ab      	ldrh	r3, [r5, #12]
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d907      	bls.n	800810c <_fwalk_reent+0x38>
 80080fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008100:	3301      	adds	r3, #1
 8008102:	d003      	beq.n	800810c <_fwalk_reent+0x38>
 8008104:	4629      	mov	r1, r5
 8008106:	4640      	mov	r0, r8
 8008108:	47c8      	blx	r9
 800810a:	4306      	orrs	r6, r0
 800810c:	3568      	adds	r5, #104	; 0x68
 800810e:	e7ee      	b.n	80080ee <_fwalk_reent+0x1a>

08008110 <__libc_init_array>:
 8008110:	b570      	push	{r4, r5, r6, lr}
 8008112:	2500      	movs	r5, #0
 8008114:	4e0c      	ldr	r6, [pc, #48]	; (8008148 <__libc_init_array+0x38>)
 8008116:	4c0d      	ldr	r4, [pc, #52]	; (800814c <__libc_init_array+0x3c>)
 8008118:	1ba4      	subs	r4, r4, r6
 800811a:	10a4      	asrs	r4, r4, #2
 800811c:	42a5      	cmp	r5, r4
 800811e:	d109      	bne.n	8008134 <__libc_init_array+0x24>
 8008120:	f000 ff5a 	bl	8008fd8 <_init>
 8008124:	2500      	movs	r5, #0
 8008126:	4e0a      	ldr	r6, [pc, #40]	; (8008150 <__libc_init_array+0x40>)
 8008128:	4c0a      	ldr	r4, [pc, #40]	; (8008154 <__libc_init_array+0x44>)
 800812a:	1ba4      	subs	r4, r4, r6
 800812c:	10a4      	asrs	r4, r4, #2
 800812e:	42a5      	cmp	r5, r4
 8008130:	d105      	bne.n	800813e <__libc_init_array+0x2e>
 8008132:	bd70      	pop	{r4, r5, r6, pc}
 8008134:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008138:	4798      	blx	r3
 800813a:	3501      	adds	r5, #1
 800813c:	e7ee      	b.n	800811c <__libc_init_array+0xc>
 800813e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008142:	4798      	blx	r3
 8008144:	3501      	adds	r5, #1
 8008146:	e7f2      	b.n	800812e <__libc_init_array+0x1e>
 8008148:	0800968c 	.word	0x0800968c
 800814c:	0800968c 	.word	0x0800968c
 8008150:	0800968c 	.word	0x0800968c
 8008154:	08009690 	.word	0x08009690

08008158 <memset>:
 8008158:	4603      	mov	r3, r0
 800815a:	4402      	add	r2, r0
 800815c:	4293      	cmp	r3, r2
 800815e:	d100      	bne.n	8008162 <memset+0xa>
 8008160:	4770      	bx	lr
 8008162:	f803 1b01 	strb.w	r1, [r3], #1
 8008166:	e7f9      	b.n	800815c <memset+0x4>

08008168 <_free_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	4605      	mov	r5, r0
 800816c:	2900      	cmp	r1, #0
 800816e:	d043      	beq.n	80081f8 <_free_r+0x90>
 8008170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008174:	1f0c      	subs	r4, r1, #4
 8008176:	2b00      	cmp	r3, #0
 8008178:	bfb8      	it	lt
 800817a:	18e4      	addlt	r4, r4, r3
 800817c:	f000 f95a 	bl	8008434 <__malloc_lock>
 8008180:	4a1e      	ldr	r2, [pc, #120]	; (80081fc <_free_r+0x94>)
 8008182:	6813      	ldr	r3, [r2, #0]
 8008184:	4610      	mov	r0, r2
 8008186:	b933      	cbnz	r3, 8008196 <_free_r+0x2e>
 8008188:	6063      	str	r3, [r4, #4]
 800818a:	6014      	str	r4, [r2, #0]
 800818c:	4628      	mov	r0, r5
 800818e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008192:	f000 b950 	b.w	8008436 <__malloc_unlock>
 8008196:	42a3      	cmp	r3, r4
 8008198:	d90b      	bls.n	80081b2 <_free_r+0x4a>
 800819a:	6821      	ldr	r1, [r4, #0]
 800819c:	1862      	adds	r2, r4, r1
 800819e:	4293      	cmp	r3, r2
 80081a0:	bf01      	itttt	eq
 80081a2:	681a      	ldreq	r2, [r3, #0]
 80081a4:	685b      	ldreq	r3, [r3, #4]
 80081a6:	1852      	addeq	r2, r2, r1
 80081a8:	6022      	streq	r2, [r4, #0]
 80081aa:	6063      	str	r3, [r4, #4]
 80081ac:	6004      	str	r4, [r0, #0]
 80081ae:	e7ed      	b.n	800818c <_free_r+0x24>
 80081b0:	4613      	mov	r3, r2
 80081b2:	685a      	ldr	r2, [r3, #4]
 80081b4:	b10a      	cbz	r2, 80081ba <_free_r+0x52>
 80081b6:	42a2      	cmp	r2, r4
 80081b8:	d9fa      	bls.n	80081b0 <_free_r+0x48>
 80081ba:	6819      	ldr	r1, [r3, #0]
 80081bc:	1858      	adds	r0, r3, r1
 80081be:	42a0      	cmp	r0, r4
 80081c0:	d10b      	bne.n	80081da <_free_r+0x72>
 80081c2:	6820      	ldr	r0, [r4, #0]
 80081c4:	4401      	add	r1, r0
 80081c6:	1858      	adds	r0, r3, r1
 80081c8:	4282      	cmp	r2, r0
 80081ca:	6019      	str	r1, [r3, #0]
 80081cc:	d1de      	bne.n	800818c <_free_r+0x24>
 80081ce:	6810      	ldr	r0, [r2, #0]
 80081d0:	6852      	ldr	r2, [r2, #4]
 80081d2:	4401      	add	r1, r0
 80081d4:	6019      	str	r1, [r3, #0]
 80081d6:	605a      	str	r2, [r3, #4]
 80081d8:	e7d8      	b.n	800818c <_free_r+0x24>
 80081da:	d902      	bls.n	80081e2 <_free_r+0x7a>
 80081dc:	230c      	movs	r3, #12
 80081de:	602b      	str	r3, [r5, #0]
 80081e0:	e7d4      	b.n	800818c <_free_r+0x24>
 80081e2:	6820      	ldr	r0, [r4, #0]
 80081e4:	1821      	adds	r1, r4, r0
 80081e6:	428a      	cmp	r2, r1
 80081e8:	bf01      	itttt	eq
 80081ea:	6811      	ldreq	r1, [r2, #0]
 80081ec:	6852      	ldreq	r2, [r2, #4]
 80081ee:	1809      	addeq	r1, r1, r0
 80081f0:	6021      	streq	r1, [r4, #0]
 80081f2:	6062      	str	r2, [r4, #4]
 80081f4:	605c      	str	r4, [r3, #4]
 80081f6:	e7c9      	b.n	800818c <_free_r+0x24>
 80081f8:	bd38      	pop	{r3, r4, r5, pc}
 80081fa:	bf00      	nop
 80081fc:	200002e4 	.word	0x200002e4

08008200 <_malloc_r>:
 8008200:	b570      	push	{r4, r5, r6, lr}
 8008202:	1ccd      	adds	r5, r1, #3
 8008204:	f025 0503 	bic.w	r5, r5, #3
 8008208:	3508      	adds	r5, #8
 800820a:	2d0c      	cmp	r5, #12
 800820c:	bf38      	it	cc
 800820e:	250c      	movcc	r5, #12
 8008210:	2d00      	cmp	r5, #0
 8008212:	4606      	mov	r6, r0
 8008214:	db01      	blt.n	800821a <_malloc_r+0x1a>
 8008216:	42a9      	cmp	r1, r5
 8008218:	d903      	bls.n	8008222 <_malloc_r+0x22>
 800821a:	230c      	movs	r3, #12
 800821c:	6033      	str	r3, [r6, #0]
 800821e:	2000      	movs	r0, #0
 8008220:	bd70      	pop	{r4, r5, r6, pc}
 8008222:	f000 f907 	bl	8008434 <__malloc_lock>
 8008226:	4a21      	ldr	r2, [pc, #132]	; (80082ac <_malloc_r+0xac>)
 8008228:	6814      	ldr	r4, [r2, #0]
 800822a:	4621      	mov	r1, r4
 800822c:	b991      	cbnz	r1, 8008254 <_malloc_r+0x54>
 800822e:	4c20      	ldr	r4, [pc, #128]	; (80082b0 <_malloc_r+0xb0>)
 8008230:	6823      	ldr	r3, [r4, #0]
 8008232:	b91b      	cbnz	r3, 800823c <_malloc_r+0x3c>
 8008234:	4630      	mov	r0, r6
 8008236:	f000 f855 	bl	80082e4 <_sbrk_r>
 800823a:	6020      	str	r0, [r4, #0]
 800823c:	4629      	mov	r1, r5
 800823e:	4630      	mov	r0, r6
 8008240:	f000 f850 	bl	80082e4 <_sbrk_r>
 8008244:	1c43      	adds	r3, r0, #1
 8008246:	d124      	bne.n	8008292 <_malloc_r+0x92>
 8008248:	230c      	movs	r3, #12
 800824a:	4630      	mov	r0, r6
 800824c:	6033      	str	r3, [r6, #0]
 800824e:	f000 f8f2 	bl	8008436 <__malloc_unlock>
 8008252:	e7e4      	b.n	800821e <_malloc_r+0x1e>
 8008254:	680b      	ldr	r3, [r1, #0]
 8008256:	1b5b      	subs	r3, r3, r5
 8008258:	d418      	bmi.n	800828c <_malloc_r+0x8c>
 800825a:	2b0b      	cmp	r3, #11
 800825c:	d90f      	bls.n	800827e <_malloc_r+0x7e>
 800825e:	600b      	str	r3, [r1, #0]
 8008260:	18cc      	adds	r4, r1, r3
 8008262:	50cd      	str	r5, [r1, r3]
 8008264:	4630      	mov	r0, r6
 8008266:	f000 f8e6 	bl	8008436 <__malloc_unlock>
 800826a:	f104 000b 	add.w	r0, r4, #11
 800826e:	1d23      	adds	r3, r4, #4
 8008270:	f020 0007 	bic.w	r0, r0, #7
 8008274:	1ac3      	subs	r3, r0, r3
 8008276:	d0d3      	beq.n	8008220 <_malloc_r+0x20>
 8008278:	425a      	negs	r2, r3
 800827a:	50e2      	str	r2, [r4, r3]
 800827c:	e7d0      	b.n	8008220 <_malloc_r+0x20>
 800827e:	684b      	ldr	r3, [r1, #4]
 8008280:	428c      	cmp	r4, r1
 8008282:	bf16      	itet	ne
 8008284:	6063      	strne	r3, [r4, #4]
 8008286:	6013      	streq	r3, [r2, #0]
 8008288:	460c      	movne	r4, r1
 800828a:	e7eb      	b.n	8008264 <_malloc_r+0x64>
 800828c:	460c      	mov	r4, r1
 800828e:	6849      	ldr	r1, [r1, #4]
 8008290:	e7cc      	b.n	800822c <_malloc_r+0x2c>
 8008292:	1cc4      	adds	r4, r0, #3
 8008294:	f024 0403 	bic.w	r4, r4, #3
 8008298:	42a0      	cmp	r0, r4
 800829a:	d005      	beq.n	80082a8 <_malloc_r+0xa8>
 800829c:	1a21      	subs	r1, r4, r0
 800829e:	4630      	mov	r0, r6
 80082a0:	f000 f820 	bl	80082e4 <_sbrk_r>
 80082a4:	3001      	adds	r0, #1
 80082a6:	d0cf      	beq.n	8008248 <_malloc_r+0x48>
 80082a8:	6025      	str	r5, [r4, #0]
 80082aa:	e7db      	b.n	8008264 <_malloc_r+0x64>
 80082ac:	200002e4 	.word	0x200002e4
 80082b0:	200002e8 	.word	0x200002e8

080082b4 <iprintf>:
 80082b4:	b40f      	push	{r0, r1, r2, r3}
 80082b6:	4b0a      	ldr	r3, [pc, #40]	; (80082e0 <iprintf+0x2c>)
 80082b8:	b513      	push	{r0, r1, r4, lr}
 80082ba:	681c      	ldr	r4, [r3, #0]
 80082bc:	b124      	cbz	r4, 80082c8 <iprintf+0x14>
 80082be:	69a3      	ldr	r3, [r4, #24]
 80082c0:	b913      	cbnz	r3, 80082c8 <iprintf+0x14>
 80082c2:	4620      	mov	r0, r4
 80082c4:	f7ff fe9a 	bl	8007ffc <__sinit>
 80082c8:	ab05      	add	r3, sp, #20
 80082ca:	9a04      	ldr	r2, [sp, #16]
 80082cc:	68a1      	ldr	r1, [r4, #8]
 80082ce:	4620      	mov	r0, r4
 80082d0:	9301      	str	r3, [sp, #4]
 80082d2:	f000 fa2b 	bl	800872c <_vfiprintf_r>
 80082d6:	b002      	add	sp, #8
 80082d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082dc:	b004      	add	sp, #16
 80082de:	4770      	bx	lr
 80082e0:	20000024 	.word	0x20000024

080082e4 <_sbrk_r>:
 80082e4:	b538      	push	{r3, r4, r5, lr}
 80082e6:	2300      	movs	r3, #0
 80082e8:	4c05      	ldr	r4, [pc, #20]	; (8008300 <_sbrk_r+0x1c>)
 80082ea:	4605      	mov	r5, r0
 80082ec:	4608      	mov	r0, r1
 80082ee:	6023      	str	r3, [r4, #0]
 80082f0:	f7f9 f94a 	bl	8001588 <_sbrk>
 80082f4:	1c43      	adds	r3, r0, #1
 80082f6:	d102      	bne.n	80082fe <_sbrk_r+0x1a>
 80082f8:	6823      	ldr	r3, [r4, #0]
 80082fa:	b103      	cbz	r3, 80082fe <_sbrk_r+0x1a>
 80082fc:	602b      	str	r3, [r5, #0]
 80082fe:	bd38      	pop	{r3, r4, r5, pc}
 8008300:	2000491c 	.word	0x2000491c

08008304 <siprintf>:
 8008304:	b40e      	push	{r1, r2, r3}
 8008306:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800830a:	b500      	push	{lr}
 800830c:	b09c      	sub	sp, #112	; 0x70
 800830e:	ab1d      	add	r3, sp, #116	; 0x74
 8008310:	9002      	str	r0, [sp, #8]
 8008312:	9006      	str	r0, [sp, #24]
 8008314:	9107      	str	r1, [sp, #28]
 8008316:	9104      	str	r1, [sp, #16]
 8008318:	4808      	ldr	r0, [pc, #32]	; (800833c <siprintf+0x38>)
 800831a:	4909      	ldr	r1, [pc, #36]	; (8008340 <siprintf+0x3c>)
 800831c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008320:	9105      	str	r1, [sp, #20]
 8008322:	6800      	ldr	r0, [r0, #0]
 8008324:	a902      	add	r1, sp, #8
 8008326:	9301      	str	r3, [sp, #4]
 8008328:	f000 f8e0 	bl	80084ec <_svfiprintf_r>
 800832c:	2200      	movs	r2, #0
 800832e:	9b02      	ldr	r3, [sp, #8]
 8008330:	701a      	strb	r2, [r3, #0]
 8008332:	b01c      	add	sp, #112	; 0x70
 8008334:	f85d eb04 	ldr.w	lr, [sp], #4
 8008338:	b003      	add	sp, #12
 800833a:	4770      	bx	lr
 800833c:	20000024 	.word	0x20000024
 8008340:	ffff0208 	.word	0xffff0208

08008344 <__sread>:
 8008344:	b510      	push	{r4, lr}
 8008346:	460c      	mov	r4, r1
 8008348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800834c:	f000 fc8c 	bl	8008c68 <_read_r>
 8008350:	2800      	cmp	r0, #0
 8008352:	bfab      	itete	ge
 8008354:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008356:	89a3      	ldrhlt	r3, [r4, #12]
 8008358:	181b      	addge	r3, r3, r0
 800835a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800835e:	bfac      	ite	ge
 8008360:	6563      	strge	r3, [r4, #84]	; 0x54
 8008362:	81a3      	strhlt	r3, [r4, #12]
 8008364:	bd10      	pop	{r4, pc}

08008366 <__swrite>:
 8008366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800836a:	461f      	mov	r7, r3
 800836c:	898b      	ldrh	r3, [r1, #12]
 800836e:	4605      	mov	r5, r0
 8008370:	05db      	lsls	r3, r3, #23
 8008372:	460c      	mov	r4, r1
 8008374:	4616      	mov	r6, r2
 8008376:	d505      	bpl.n	8008384 <__swrite+0x1e>
 8008378:	2302      	movs	r3, #2
 800837a:	2200      	movs	r2, #0
 800837c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008380:	f000 f846 	bl	8008410 <_lseek_r>
 8008384:	89a3      	ldrh	r3, [r4, #12]
 8008386:	4632      	mov	r2, r6
 8008388:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800838c:	81a3      	strh	r3, [r4, #12]
 800838e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008392:	463b      	mov	r3, r7
 8008394:	4628      	mov	r0, r5
 8008396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800839a:	f000 b817 	b.w	80083cc <_write_r>

0800839e <__sseek>:
 800839e:	b510      	push	{r4, lr}
 80083a0:	460c      	mov	r4, r1
 80083a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083a6:	f000 f833 	bl	8008410 <_lseek_r>
 80083aa:	1c43      	adds	r3, r0, #1
 80083ac:	89a3      	ldrh	r3, [r4, #12]
 80083ae:	bf15      	itete	ne
 80083b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80083b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083ba:	81a3      	strheq	r3, [r4, #12]
 80083bc:	bf18      	it	ne
 80083be:	81a3      	strhne	r3, [r4, #12]
 80083c0:	bd10      	pop	{r4, pc}

080083c2 <__sclose>:
 80083c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083c6:	f000 b813 	b.w	80083f0 <_close_r>
	...

080083cc <_write_r>:
 80083cc:	b538      	push	{r3, r4, r5, lr}
 80083ce:	4605      	mov	r5, r0
 80083d0:	4608      	mov	r0, r1
 80083d2:	4611      	mov	r1, r2
 80083d4:	2200      	movs	r2, #0
 80083d6:	4c05      	ldr	r4, [pc, #20]	; (80083ec <_write_r+0x20>)
 80083d8:	6022      	str	r2, [r4, #0]
 80083da:	461a      	mov	r2, r3
 80083dc:	f7f9 f887 	bl	80014ee <_write>
 80083e0:	1c43      	adds	r3, r0, #1
 80083e2:	d102      	bne.n	80083ea <_write_r+0x1e>
 80083e4:	6823      	ldr	r3, [r4, #0]
 80083e6:	b103      	cbz	r3, 80083ea <_write_r+0x1e>
 80083e8:	602b      	str	r3, [r5, #0]
 80083ea:	bd38      	pop	{r3, r4, r5, pc}
 80083ec:	2000491c 	.word	0x2000491c

080083f0 <_close_r>:
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	2300      	movs	r3, #0
 80083f4:	4c05      	ldr	r4, [pc, #20]	; (800840c <_close_r+0x1c>)
 80083f6:	4605      	mov	r5, r0
 80083f8:	4608      	mov	r0, r1
 80083fa:	6023      	str	r3, [r4, #0]
 80083fc:	f7f9 f893 	bl	8001526 <_close>
 8008400:	1c43      	adds	r3, r0, #1
 8008402:	d102      	bne.n	800840a <_close_r+0x1a>
 8008404:	6823      	ldr	r3, [r4, #0]
 8008406:	b103      	cbz	r3, 800840a <_close_r+0x1a>
 8008408:	602b      	str	r3, [r5, #0]
 800840a:	bd38      	pop	{r3, r4, r5, pc}
 800840c:	2000491c 	.word	0x2000491c

08008410 <_lseek_r>:
 8008410:	b538      	push	{r3, r4, r5, lr}
 8008412:	4605      	mov	r5, r0
 8008414:	4608      	mov	r0, r1
 8008416:	4611      	mov	r1, r2
 8008418:	2200      	movs	r2, #0
 800841a:	4c05      	ldr	r4, [pc, #20]	; (8008430 <_lseek_r+0x20>)
 800841c:	6022      	str	r2, [r4, #0]
 800841e:	461a      	mov	r2, r3
 8008420:	f7f9 f8a5 	bl	800156e <_lseek>
 8008424:	1c43      	adds	r3, r0, #1
 8008426:	d102      	bne.n	800842e <_lseek_r+0x1e>
 8008428:	6823      	ldr	r3, [r4, #0]
 800842a:	b103      	cbz	r3, 800842e <_lseek_r+0x1e>
 800842c:	602b      	str	r3, [r5, #0]
 800842e:	bd38      	pop	{r3, r4, r5, pc}
 8008430:	2000491c 	.word	0x2000491c

08008434 <__malloc_lock>:
 8008434:	4770      	bx	lr

08008436 <__malloc_unlock>:
 8008436:	4770      	bx	lr

08008438 <__ssputs_r>:
 8008438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800843c:	688e      	ldr	r6, [r1, #8]
 800843e:	4682      	mov	sl, r0
 8008440:	429e      	cmp	r6, r3
 8008442:	460c      	mov	r4, r1
 8008444:	4690      	mov	r8, r2
 8008446:	4699      	mov	r9, r3
 8008448:	d837      	bhi.n	80084ba <__ssputs_r+0x82>
 800844a:	898a      	ldrh	r2, [r1, #12]
 800844c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008450:	d031      	beq.n	80084b6 <__ssputs_r+0x7e>
 8008452:	2302      	movs	r3, #2
 8008454:	6825      	ldr	r5, [r4, #0]
 8008456:	6909      	ldr	r1, [r1, #16]
 8008458:	1a6f      	subs	r7, r5, r1
 800845a:	6965      	ldr	r5, [r4, #20]
 800845c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008460:	fb95 f5f3 	sdiv	r5, r5, r3
 8008464:	f109 0301 	add.w	r3, r9, #1
 8008468:	443b      	add	r3, r7
 800846a:	429d      	cmp	r5, r3
 800846c:	bf38      	it	cc
 800846e:	461d      	movcc	r5, r3
 8008470:	0553      	lsls	r3, r2, #21
 8008472:	d530      	bpl.n	80084d6 <__ssputs_r+0x9e>
 8008474:	4629      	mov	r1, r5
 8008476:	f7ff fec3 	bl	8008200 <_malloc_r>
 800847a:	4606      	mov	r6, r0
 800847c:	b950      	cbnz	r0, 8008494 <__ssputs_r+0x5c>
 800847e:	230c      	movs	r3, #12
 8008480:	f04f 30ff 	mov.w	r0, #4294967295
 8008484:	f8ca 3000 	str.w	r3, [sl]
 8008488:	89a3      	ldrh	r3, [r4, #12]
 800848a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800848e:	81a3      	strh	r3, [r4, #12]
 8008490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008494:	463a      	mov	r2, r7
 8008496:	6921      	ldr	r1, [r4, #16]
 8008498:	f000 fd2a 	bl	8008ef0 <memcpy>
 800849c:	89a3      	ldrh	r3, [r4, #12]
 800849e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80084a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084a6:	81a3      	strh	r3, [r4, #12]
 80084a8:	6126      	str	r6, [r4, #16]
 80084aa:	443e      	add	r6, r7
 80084ac:	6026      	str	r6, [r4, #0]
 80084ae:	464e      	mov	r6, r9
 80084b0:	6165      	str	r5, [r4, #20]
 80084b2:	1bed      	subs	r5, r5, r7
 80084b4:	60a5      	str	r5, [r4, #8]
 80084b6:	454e      	cmp	r6, r9
 80084b8:	d900      	bls.n	80084bc <__ssputs_r+0x84>
 80084ba:	464e      	mov	r6, r9
 80084bc:	4632      	mov	r2, r6
 80084be:	4641      	mov	r1, r8
 80084c0:	6820      	ldr	r0, [r4, #0]
 80084c2:	f000 fd20 	bl	8008f06 <memmove>
 80084c6:	68a3      	ldr	r3, [r4, #8]
 80084c8:	2000      	movs	r0, #0
 80084ca:	1b9b      	subs	r3, r3, r6
 80084cc:	60a3      	str	r3, [r4, #8]
 80084ce:	6823      	ldr	r3, [r4, #0]
 80084d0:	441e      	add	r6, r3
 80084d2:	6026      	str	r6, [r4, #0]
 80084d4:	e7dc      	b.n	8008490 <__ssputs_r+0x58>
 80084d6:	462a      	mov	r2, r5
 80084d8:	f000 fd2e 	bl	8008f38 <_realloc_r>
 80084dc:	4606      	mov	r6, r0
 80084de:	2800      	cmp	r0, #0
 80084e0:	d1e2      	bne.n	80084a8 <__ssputs_r+0x70>
 80084e2:	6921      	ldr	r1, [r4, #16]
 80084e4:	4650      	mov	r0, sl
 80084e6:	f7ff fe3f 	bl	8008168 <_free_r>
 80084ea:	e7c8      	b.n	800847e <__ssputs_r+0x46>

080084ec <_svfiprintf_r>:
 80084ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f0:	461d      	mov	r5, r3
 80084f2:	898b      	ldrh	r3, [r1, #12]
 80084f4:	b09d      	sub	sp, #116	; 0x74
 80084f6:	061f      	lsls	r7, r3, #24
 80084f8:	4680      	mov	r8, r0
 80084fa:	460c      	mov	r4, r1
 80084fc:	4616      	mov	r6, r2
 80084fe:	d50f      	bpl.n	8008520 <_svfiprintf_r+0x34>
 8008500:	690b      	ldr	r3, [r1, #16]
 8008502:	b96b      	cbnz	r3, 8008520 <_svfiprintf_r+0x34>
 8008504:	2140      	movs	r1, #64	; 0x40
 8008506:	f7ff fe7b 	bl	8008200 <_malloc_r>
 800850a:	6020      	str	r0, [r4, #0]
 800850c:	6120      	str	r0, [r4, #16]
 800850e:	b928      	cbnz	r0, 800851c <_svfiprintf_r+0x30>
 8008510:	230c      	movs	r3, #12
 8008512:	f8c8 3000 	str.w	r3, [r8]
 8008516:	f04f 30ff 	mov.w	r0, #4294967295
 800851a:	e0c8      	b.n	80086ae <_svfiprintf_r+0x1c2>
 800851c:	2340      	movs	r3, #64	; 0x40
 800851e:	6163      	str	r3, [r4, #20]
 8008520:	2300      	movs	r3, #0
 8008522:	9309      	str	r3, [sp, #36]	; 0x24
 8008524:	2320      	movs	r3, #32
 8008526:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800852a:	2330      	movs	r3, #48	; 0x30
 800852c:	f04f 0b01 	mov.w	fp, #1
 8008530:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008534:	9503      	str	r5, [sp, #12]
 8008536:	4637      	mov	r7, r6
 8008538:	463d      	mov	r5, r7
 800853a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800853e:	b10b      	cbz	r3, 8008544 <_svfiprintf_r+0x58>
 8008540:	2b25      	cmp	r3, #37	; 0x25
 8008542:	d13e      	bne.n	80085c2 <_svfiprintf_r+0xd6>
 8008544:	ebb7 0a06 	subs.w	sl, r7, r6
 8008548:	d00b      	beq.n	8008562 <_svfiprintf_r+0x76>
 800854a:	4653      	mov	r3, sl
 800854c:	4632      	mov	r2, r6
 800854e:	4621      	mov	r1, r4
 8008550:	4640      	mov	r0, r8
 8008552:	f7ff ff71 	bl	8008438 <__ssputs_r>
 8008556:	3001      	adds	r0, #1
 8008558:	f000 80a4 	beq.w	80086a4 <_svfiprintf_r+0x1b8>
 800855c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800855e:	4453      	add	r3, sl
 8008560:	9309      	str	r3, [sp, #36]	; 0x24
 8008562:	783b      	ldrb	r3, [r7, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	f000 809d 	beq.w	80086a4 <_svfiprintf_r+0x1b8>
 800856a:	2300      	movs	r3, #0
 800856c:	f04f 32ff 	mov.w	r2, #4294967295
 8008570:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008574:	9304      	str	r3, [sp, #16]
 8008576:	9307      	str	r3, [sp, #28]
 8008578:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800857c:	931a      	str	r3, [sp, #104]	; 0x68
 800857e:	462f      	mov	r7, r5
 8008580:	2205      	movs	r2, #5
 8008582:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008586:	4850      	ldr	r0, [pc, #320]	; (80086c8 <_svfiprintf_r+0x1dc>)
 8008588:	f000 fca4 	bl	8008ed4 <memchr>
 800858c:	9b04      	ldr	r3, [sp, #16]
 800858e:	b9d0      	cbnz	r0, 80085c6 <_svfiprintf_r+0xda>
 8008590:	06d9      	lsls	r1, r3, #27
 8008592:	bf44      	itt	mi
 8008594:	2220      	movmi	r2, #32
 8008596:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800859a:	071a      	lsls	r2, r3, #28
 800859c:	bf44      	itt	mi
 800859e:	222b      	movmi	r2, #43	; 0x2b
 80085a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80085a4:	782a      	ldrb	r2, [r5, #0]
 80085a6:	2a2a      	cmp	r2, #42	; 0x2a
 80085a8:	d015      	beq.n	80085d6 <_svfiprintf_r+0xea>
 80085aa:	462f      	mov	r7, r5
 80085ac:	2000      	movs	r0, #0
 80085ae:	250a      	movs	r5, #10
 80085b0:	9a07      	ldr	r2, [sp, #28]
 80085b2:	4639      	mov	r1, r7
 80085b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085b8:	3b30      	subs	r3, #48	; 0x30
 80085ba:	2b09      	cmp	r3, #9
 80085bc:	d94d      	bls.n	800865a <_svfiprintf_r+0x16e>
 80085be:	b1b8      	cbz	r0, 80085f0 <_svfiprintf_r+0x104>
 80085c0:	e00f      	b.n	80085e2 <_svfiprintf_r+0xf6>
 80085c2:	462f      	mov	r7, r5
 80085c4:	e7b8      	b.n	8008538 <_svfiprintf_r+0x4c>
 80085c6:	4a40      	ldr	r2, [pc, #256]	; (80086c8 <_svfiprintf_r+0x1dc>)
 80085c8:	463d      	mov	r5, r7
 80085ca:	1a80      	subs	r0, r0, r2
 80085cc:	fa0b f000 	lsl.w	r0, fp, r0
 80085d0:	4318      	orrs	r0, r3
 80085d2:	9004      	str	r0, [sp, #16]
 80085d4:	e7d3      	b.n	800857e <_svfiprintf_r+0x92>
 80085d6:	9a03      	ldr	r2, [sp, #12]
 80085d8:	1d11      	adds	r1, r2, #4
 80085da:	6812      	ldr	r2, [r2, #0]
 80085dc:	9103      	str	r1, [sp, #12]
 80085de:	2a00      	cmp	r2, #0
 80085e0:	db01      	blt.n	80085e6 <_svfiprintf_r+0xfa>
 80085e2:	9207      	str	r2, [sp, #28]
 80085e4:	e004      	b.n	80085f0 <_svfiprintf_r+0x104>
 80085e6:	4252      	negs	r2, r2
 80085e8:	f043 0302 	orr.w	r3, r3, #2
 80085ec:	9207      	str	r2, [sp, #28]
 80085ee:	9304      	str	r3, [sp, #16]
 80085f0:	783b      	ldrb	r3, [r7, #0]
 80085f2:	2b2e      	cmp	r3, #46	; 0x2e
 80085f4:	d10c      	bne.n	8008610 <_svfiprintf_r+0x124>
 80085f6:	787b      	ldrb	r3, [r7, #1]
 80085f8:	2b2a      	cmp	r3, #42	; 0x2a
 80085fa:	d133      	bne.n	8008664 <_svfiprintf_r+0x178>
 80085fc:	9b03      	ldr	r3, [sp, #12]
 80085fe:	3702      	adds	r7, #2
 8008600:	1d1a      	adds	r2, r3, #4
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	9203      	str	r2, [sp, #12]
 8008606:	2b00      	cmp	r3, #0
 8008608:	bfb8      	it	lt
 800860a:	f04f 33ff 	movlt.w	r3, #4294967295
 800860e:	9305      	str	r3, [sp, #20]
 8008610:	4d2e      	ldr	r5, [pc, #184]	; (80086cc <_svfiprintf_r+0x1e0>)
 8008612:	2203      	movs	r2, #3
 8008614:	7839      	ldrb	r1, [r7, #0]
 8008616:	4628      	mov	r0, r5
 8008618:	f000 fc5c 	bl	8008ed4 <memchr>
 800861c:	b138      	cbz	r0, 800862e <_svfiprintf_r+0x142>
 800861e:	2340      	movs	r3, #64	; 0x40
 8008620:	1b40      	subs	r0, r0, r5
 8008622:	fa03 f000 	lsl.w	r0, r3, r0
 8008626:	9b04      	ldr	r3, [sp, #16]
 8008628:	3701      	adds	r7, #1
 800862a:	4303      	orrs	r3, r0
 800862c:	9304      	str	r3, [sp, #16]
 800862e:	7839      	ldrb	r1, [r7, #0]
 8008630:	2206      	movs	r2, #6
 8008632:	4827      	ldr	r0, [pc, #156]	; (80086d0 <_svfiprintf_r+0x1e4>)
 8008634:	1c7e      	adds	r6, r7, #1
 8008636:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800863a:	f000 fc4b 	bl	8008ed4 <memchr>
 800863e:	2800      	cmp	r0, #0
 8008640:	d038      	beq.n	80086b4 <_svfiprintf_r+0x1c8>
 8008642:	4b24      	ldr	r3, [pc, #144]	; (80086d4 <_svfiprintf_r+0x1e8>)
 8008644:	bb13      	cbnz	r3, 800868c <_svfiprintf_r+0x1a0>
 8008646:	9b03      	ldr	r3, [sp, #12]
 8008648:	3307      	adds	r3, #7
 800864a:	f023 0307 	bic.w	r3, r3, #7
 800864e:	3308      	adds	r3, #8
 8008650:	9303      	str	r3, [sp, #12]
 8008652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008654:	444b      	add	r3, r9
 8008656:	9309      	str	r3, [sp, #36]	; 0x24
 8008658:	e76d      	b.n	8008536 <_svfiprintf_r+0x4a>
 800865a:	fb05 3202 	mla	r2, r5, r2, r3
 800865e:	2001      	movs	r0, #1
 8008660:	460f      	mov	r7, r1
 8008662:	e7a6      	b.n	80085b2 <_svfiprintf_r+0xc6>
 8008664:	2300      	movs	r3, #0
 8008666:	250a      	movs	r5, #10
 8008668:	4619      	mov	r1, r3
 800866a:	3701      	adds	r7, #1
 800866c:	9305      	str	r3, [sp, #20]
 800866e:	4638      	mov	r0, r7
 8008670:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008674:	3a30      	subs	r2, #48	; 0x30
 8008676:	2a09      	cmp	r2, #9
 8008678:	d903      	bls.n	8008682 <_svfiprintf_r+0x196>
 800867a:	2b00      	cmp	r3, #0
 800867c:	d0c8      	beq.n	8008610 <_svfiprintf_r+0x124>
 800867e:	9105      	str	r1, [sp, #20]
 8008680:	e7c6      	b.n	8008610 <_svfiprintf_r+0x124>
 8008682:	fb05 2101 	mla	r1, r5, r1, r2
 8008686:	2301      	movs	r3, #1
 8008688:	4607      	mov	r7, r0
 800868a:	e7f0      	b.n	800866e <_svfiprintf_r+0x182>
 800868c:	ab03      	add	r3, sp, #12
 800868e:	9300      	str	r3, [sp, #0]
 8008690:	4622      	mov	r2, r4
 8008692:	4b11      	ldr	r3, [pc, #68]	; (80086d8 <_svfiprintf_r+0x1ec>)
 8008694:	a904      	add	r1, sp, #16
 8008696:	4640      	mov	r0, r8
 8008698:	f3af 8000 	nop.w
 800869c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80086a0:	4681      	mov	r9, r0
 80086a2:	d1d6      	bne.n	8008652 <_svfiprintf_r+0x166>
 80086a4:	89a3      	ldrh	r3, [r4, #12]
 80086a6:	065b      	lsls	r3, r3, #25
 80086a8:	f53f af35 	bmi.w	8008516 <_svfiprintf_r+0x2a>
 80086ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086ae:	b01d      	add	sp, #116	; 0x74
 80086b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b4:	ab03      	add	r3, sp, #12
 80086b6:	9300      	str	r3, [sp, #0]
 80086b8:	4622      	mov	r2, r4
 80086ba:	4b07      	ldr	r3, [pc, #28]	; (80086d8 <_svfiprintf_r+0x1ec>)
 80086bc:	a904      	add	r1, sp, #16
 80086be:	4640      	mov	r0, r8
 80086c0:	f000 f9c0 	bl	8008a44 <_printf_i>
 80086c4:	e7ea      	b.n	800869c <_svfiprintf_r+0x1b0>
 80086c6:	bf00      	nop
 80086c8:	08009658 	.word	0x08009658
 80086cc:	0800965e 	.word	0x0800965e
 80086d0:	08009662 	.word	0x08009662
 80086d4:	00000000 	.word	0x00000000
 80086d8:	08008439 	.word	0x08008439

080086dc <__sfputc_r>:
 80086dc:	6893      	ldr	r3, [r2, #8]
 80086de:	b410      	push	{r4}
 80086e0:	3b01      	subs	r3, #1
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	6093      	str	r3, [r2, #8]
 80086e6:	da07      	bge.n	80086f8 <__sfputc_r+0x1c>
 80086e8:	6994      	ldr	r4, [r2, #24]
 80086ea:	42a3      	cmp	r3, r4
 80086ec:	db01      	blt.n	80086f2 <__sfputc_r+0x16>
 80086ee:	290a      	cmp	r1, #10
 80086f0:	d102      	bne.n	80086f8 <__sfputc_r+0x1c>
 80086f2:	bc10      	pop	{r4}
 80086f4:	f000 baca 	b.w	8008c8c <__swbuf_r>
 80086f8:	6813      	ldr	r3, [r2, #0]
 80086fa:	1c58      	adds	r0, r3, #1
 80086fc:	6010      	str	r0, [r2, #0]
 80086fe:	7019      	strb	r1, [r3, #0]
 8008700:	4608      	mov	r0, r1
 8008702:	bc10      	pop	{r4}
 8008704:	4770      	bx	lr

08008706 <__sfputs_r>:
 8008706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008708:	4606      	mov	r6, r0
 800870a:	460f      	mov	r7, r1
 800870c:	4614      	mov	r4, r2
 800870e:	18d5      	adds	r5, r2, r3
 8008710:	42ac      	cmp	r4, r5
 8008712:	d101      	bne.n	8008718 <__sfputs_r+0x12>
 8008714:	2000      	movs	r0, #0
 8008716:	e007      	b.n	8008728 <__sfputs_r+0x22>
 8008718:	463a      	mov	r2, r7
 800871a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800871e:	4630      	mov	r0, r6
 8008720:	f7ff ffdc 	bl	80086dc <__sfputc_r>
 8008724:	1c43      	adds	r3, r0, #1
 8008726:	d1f3      	bne.n	8008710 <__sfputs_r+0xa>
 8008728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800872c <_vfiprintf_r>:
 800872c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008730:	460c      	mov	r4, r1
 8008732:	b09d      	sub	sp, #116	; 0x74
 8008734:	4617      	mov	r7, r2
 8008736:	461d      	mov	r5, r3
 8008738:	4606      	mov	r6, r0
 800873a:	b118      	cbz	r0, 8008744 <_vfiprintf_r+0x18>
 800873c:	6983      	ldr	r3, [r0, #24]
 800873e:	b90b      	cbnz	r3, 8008744 <_vfiprintf_r+0x18>
 8008740:	f7ff fc5c 	bl	8007ffc <__sinit>
 8008744:	4b7c      	ldr	r3, [pc, #496]	; (8008938 <_vfiprintf_r+0x20c>)
 8008746:	429c      	cmp	r4, r3
 8008748:	d158      	bne.n	80087fc <_vfiprintf_r+0xd0>
 800874a:	6874      	ldr	r4, [r6, #4]
 800874c:	89a3      	ldrh	r3, [r4, #12]
 800874e:	0718      	lsls	r0, r3, #28
 8008750:	d55e      	bpl.n	8008810 <_vfiprintf_r+0xe4>
 8008752:	6923      	ldr	r3, [r4, #16]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d05b      	beq.n	8008810 <_vfiprintf_r+0xe4>
 8008758:	2300      	movs	r3, #0
 800875a:	9309      	str	r3, [sp, #36]	; 0x24
 800875c:	2320      	movs	r3, #32
 800875e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008762:	2330      	movs	r3, #48	; 0x30
 8008764:	f04f 0b01 	mov.w	fp, #1
 8008768:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800876c:	9503      	str	r5, [sp, #12]
 800876e:	46b8      	mov	r8, r7
 8008770:	4645      	mov	r5, r8
 8008772:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008776:	b10b      	cbz	r3, 800877c <_vfiprintf_r+0x50>
 8008778:	2b25      	cmp	r3, #37	; 0x25
 800877a:	d154      	bne.n	8008826 <_vfiprintf_r+0xfa>
 800877c:	ebb8 0a07 	subs.w	sl, r8, r7
 8008780:	d00b      	beq.n	800879a <_vfiprintf_r+0x6e>
 8008782:	4653      	mov	r3, sl
 8008784:	463a      	mov	r2, r7
 8008786:	4621      	mov	r1, r4
 8008788:	4630      	mov	r0, r6
 800878a:	f7ff ffbc 	bl	8008706 <__sfputs_r>
 800878e:	3001      	adds	r0, #1
 8008790:	f000 80c2 	beq.w	8008918 <_vfiprintf_r+0x1ec>
 8008794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008796:	4453      	add	r3, sl
 8008798:	9309      	str	r3, [sp, #36]	; 0x24
 800879a:	f898 3000 	ldrb.w	r3, [r8]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	f000 80ba 	beq.w	8008918 <_vfiprintf_r+0x1ec>
 80087a4:	2300      	movs	r3, #0
 80087a6:	f04f 32ff 	mov.w	r2, #4294967295
 80087aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087ae:	9304      	str	r3, [sp, #16]
 80087b0:	9307      	str	r3, [sp, #28]
 80087b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087b6:	931a      	str	r3, [sp, #104]	; 0x68
 80087b8:	46a8      	mov	r8, r5
 80087ba:	2205      	movs	r2, #5
 80087bc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80087c0:	485e      	ldr	r0, [pc, #376]	; (800893c <_vfiprintf_r+0x210>)
 80087c2:	f000 fb87 	bl	8008ed4 <memchr>
 80087c6:	9b04      	ldr	r3, [sp, #16]
 80087c8:	bb78      	cbnz	r0, 800882a <_vfiprintf_r+0xfe>
 80087ca:	06d9      	lsls	r1, r3, #27
 80087cc:	bf44      	itt	mi
 80087ce:	2220      	movmi	r2, #32
 80087d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80087d4:	071a      	lsls	r2, r3, #28
 80087d6:	bf44      	itt	mi
 80087d8:	222b      	movmi	r2, #43	; 0x2b
 80087da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80087de:	782a      	ldrb	r2, [r5, #0]
 80087e0:	2a2a      	cmp	r2, #42	; 0x2a
 80087e2:	d02a      	beq.n	800883a <_vfiprintf_r+0x10e>
 80087e4:	46a8      	mov	r8, r5
 80087e6:	2000      	movs	r0, #0
 80087e8:	250a      	movs	r5, #10
 80087ea:	9a07      	ldr	r2, [sp, #28]
 80087ec:	4641      	mov	r1, r8
 80087ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087f2:	3b30      	subs	r3, #48	; 0x30
 80087f4:	2b09      	cmp	r3, #9
 80087f6:	d969      	bls.n	80088cc <_vfiprintf_r+0x1a0>
 80087f8:	b360      	cbz	r0, 8008854 <_vfiprintf_r+0x128>
 80087fa:	e024      	b.n	8008846 <_vfiprintf_r+0x11a>
 80087fc:	4b50      	ldr	r3, [pc, #320]	; (8008940 <_vfiprintf_r+0x214>)
 80087fe:	429c      	cmp	r4, r3
 8008800:	d101      	bne.n	8008806 <_vfiprintf_r+0xda>
 8008802:	68b4      	ldr	r4, [r6, #8]
 8008804:	e7a2      	b.n	800874c <_vfiprintf_r+0x20>
 8008806:	4b4f      	ldr	r3, [pc, #316]	; (8008944 <_vfiprintf_r+0x218>)
 8008808:	429c      	cmp	r4, r3
 800880a:	bf08      	it	eq
 800880c:	68f4      	ldreq	r4, [r6, #12]
 800880e:	e79d      	b.n	800874c <_vfiprintf_r+0x20>
 8008810:	4621      	mov	r1, r4
 8008812:	4630      	mov	r0, r6
 8008814:	f000 fa8c 	bl	8008d30 <__swsetup_r>
 8008818:	2800      	cmp	r0, #0
 800881a:	d09d      	beq.n	8008758 <_vfiprintf_r+0x2c>
 800881c:	f04f 30ff 	mov.w	r0, #4294967295
 8008820:	b01d      	add	sp, #116	; 0x74
 8008822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008826:	46a8      	mov	r8, r5
 8008828:	e7a2      	b.n	8008770 <_vfiprintf_r+0x44>
 800882a:	4a44      	ldr	r2, [pc, #272]	; (800893c <_vfiprintf_r+0x210>)
 800882c:	4645      	mov	r5, r8
 800882e:	1a80      	subs	r0, r0, r2
 8008830:	fa0b f000 	lsl.w	r0, fp, r0
 8008834:	4318      	orrs	r0, r3
 8008836:	9004      	str	r0, [sp, #16]
 8008838:	e7be      	b.n	80087b8 <_vfiprintf_r+0x8c>
 800883a:	9a03      	ldr	r2, [sp, #12]
 800883c:	1d11      	adds	r1, r2, #4
 800883e:	6812      	ldr	r2, [r2, #0]
 8008840:	9103      	str	r1, [sp, #12]
 8008842:	2a00      	cmp	r2, #0
 8008844:	db01      	blt.n	800884a <_vfiprintf_r+0x11e>
 8008846:	9207      	str	r2, [sp, #28]
 8008848:	e004      	b.n	8008854 <_vfiprintf_r+0x128>
 800884a:	4252      	negs	r2, r2
 800884c:	f043 0302 	orr.w	r3, r3, #2
 8008850:	9207      	str	r2, [sp, #28]
 8008852:	9304      	str	r3, [sp, #16]
 8008854:	f898 3000 	ldrb.w	r3, [r8]
 8008858:	2b2e      	cmp	r3, #46	; 0x2e
 800885a:	d10e      	bne.n	800887a <_vfiprintf_r+0x14e>
 800885c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008860:	2b2a      	cmp	r3, #42	; 0x2a
 8008862:	d138      	bne.n	80088d6 <_vfiprintf_r+0x1aa>
 8008864:	9b03      	ldr	r3, [sp, #12]
 8008866:	f108 0802 	add.w	r8, r8, #2
 800886a:	1d1a      	adds	r2, r3, #4
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	9203      	str	r2, [sp, #12]
 8008870:	2b00      	cmp	r3, #0
 8008872:	bfb8      	it	lt
 8008874:	f04f 33ff 	movlt.w	r3, #4294967295
 8008878:	9305      	str	r3, [sp, #20]
 800887a:	4d33      	ldr	r5, [pc, #204]	; (8008948 <_vfiprintf_r+0x21c>)
 800887c:	2203      	movs	r2, #3
 800887e:	f898 1000 	ldrb.w	r1, [r8]
 8008882:	4628      	mov	r0, r5
 8008884:	f000 fb26 	bl	8008ed4 <memchr>
 8008888:	b140      	cbz	r0, 800889c <_vfiprintf_r+0x170>
 800888a:	2340      	movs	r3, #64	; 0x40
 800888c:	1b40      	subs	r0, r0, r5
 800888e:	fa03 f000 	lsl.w	r0, r3, r0
 8008892:	9b04      	ldr	r3, [sp, #16]
 8008894:	f108 0801 	add.w	r8, r8, #1
 8008898:	4303      	orrs	r3, r0
 800889a:	9304      	str	r3, [sp, #16]
 800889c:	f898 1000 	ldrb.w	r1, [r8]
 80088a0:	2206      	movs	r2, #6
 80088a2:	482a      	ldr	r0, [pc, #168]	; (800894c <_vfiprintf_r+0x220>)
 80088a4:	f108 0701 	add.w	r7, r8, #1
 80088a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088ac:	f000 fb12 	bl	8008ed4 <memchr>
 80088b0:	2800      	cmp	r0, #0
 80088b2:	d037      	beq.n	8008924 <_vfiprintf_r+0x1f8>
 80088b4:	4b26      	ldr	r3, [pc, #152]	; (8008950 <_vfiprintf_r+0x224>)
 80088b6:	bb1b      	cbnz	r3, 8008900 <_vfiprintf_r+0x1d4>
 80088b8:	9b03      	ldr	r3, [sp, #12]
 80088ba:	3307      	adds	r3, #7
 80088bc:	f023 0307 	bic.w	r3, r3, #7
 80088c0:	3308      	adds	r3, #8
 80088c2:	9303      	str	r3, [sp, #12]
 80088c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088c6:	444b      	add	r3, r9
 80088c8:	9309      	str	r3, [sp, #36]	; 0x24
 80088ca:	e750      	b.n	800876e <_vfiprintf_r+0x42>
 80088cc:	fb05 3202 	mla	r2, r5, r2, r3
 80088d0:	2001      	movs	r0, #1
 80088d2:	4688      	mov	r8, r1
 80088d4:	e78a      	b.n	80087ec <_vfiprintf_r+0xc0>
 80088d6:	2300      	movs	r3, #0
 80088d8:	250a      	movs	r5, #10
 80088da:	4619      	mov	r1, r3
 80088dc:	f108 0801 	add.w	r8, r8, #1
 80088e0:	9305      	str	r3, [sp, #20]
 80088e2:	4640      	mov	r0, r8
 80088e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088e8:	3a30      	subs	r2, #48	; 0x30
 80088ea:	2a09      	cmp	r2, #9
 80088ec:	d903      	bls.n	80088f6 <_vfiprintf_r+0x1ca>
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d0c3      	beq.n	800887a <_vfiprintf_r+0x14e>
 80088f2:	9105      	str	r1, [sp, #20]
 80088f4:	e7c1      	b.n	800887a <_vfiprintf_r+0x14e>
 80088f6:	fb05 2101 	mla	r1, r5, r1, r2
 80088fa:	2301      	movs	r3, #1
 80088fc:	4680      	mov	r8, r0
 80088fe:	e7f0      	b.n	80088e2 <_vfiprintf_r+0x1b6>
 8008900:	ab03      	add	r3, sp, #12
 8008902:	9300      	str	r3, [sp, #0]
 8008904:	4622      	mov	r2, r4
 8008906:	4b13      	ldr	r3, [pc, #76]	; (8008954 <_vfiprintf_r+0x228>)
 8008908:	a904      	add	r1, sp, #16
 800890a:	4630      	mov	r0, r6
 800890c:	f3af 8000 	nop.w
 8008910:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008914:	4681      	mov	r9, r0
 8008916:	d1d5      	bne.n	80088c4 <_vfiprintf_r+0x198>
 8008918:	89a3      	ldrh	r3, [r4, #12]
 800891a:	065b      	lsls	r3, r3, #25
 800891c:	f53f af7e 	bmi.w	800881c <_vfiprintf_r+0xf0>
 8008920:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008922:	e77d      	b.n	8008820 <_vfiprintf_r+0xf4>
 8008924:	ab03      	add	r3, sp, #12
 8008926:	9300      	str	r3, [sp, #0]
 8008928:	4622      	mov	r2, r4
 800892a:	4b0a      	ldr	r3, [pc, #40]	; (8008954 <_vfiprintf_r+0x228>)
 800892c:	a904      	add	r1, sp, #16
 800892e:	4630      	mov	r0, r6
 8008930:	f000 f888 	bl	8008a44 <_printf_i>
 8008934:	e7ec      	b.n	8008910 <_vfiprintf_r+0x1e4>
 8008936:	bf00      	nop
 8008938:	08009614 	.word	0x08009614
 800893c:	08009658 	.word	0x08009658
 8008940:	08009634 	.word	0x08009634
 8008944:	080095f4 	.word	0x080095f4
 8008948:	0800965e 	.word	0x0800965e
 800894c:	08009662 	.word	0x08009662
 8008950:	00000000 	.word	0x00000000
 8008954:	08008707 	.word	0x08008707

08008958 <_printf_common>:
 8008958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800895c:	4691      	mov	r9, r2
 800895e:	461f      	mov	r7, r3
 8008960:	688a      	ldr	r2, [r1, #8]
 8008962:	690b      	ldr	r3, [r1, #16]
 8008964:	4606      	mov	r6, r0
 8008966:	4293      	cmp	r3, r2
 8008968:	bfb8      	it	lt
 800896a:	4613      	movlt	r3, r2
 800896c:	f8c9 3000 	str.w	r3, [r9]
 8008970:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008974:	460c      	mov	r4, r1
 8008976:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800897a:	b112      	cbz	r2, 8008982 <_printf_common+0x2a>
 800897c:	3301      	adds	r3, #1
 800897e:	f8c9 3000 	str.w	r3, [r9]
 8008982:	6823      	ldr	r3, [r4, #0]
 8008984:	0699      	lsls	r1, r3, #26
 8008986:	bf42      	ittt	mi
 8008988:	f8d9 3000 	ldrmi.w	r3, [r9]
 800898c:	3302      	addmi	r3, #2
 800898e:	f8c9 3000 	strmi.w	r3, [r9]
 8008992:	6825      	ldr	r5, [r4, #0]
 8008994:	f015 0506 	ands.w	r5, r5, #6
 8008998:	d107      	bne.n	80089aa <_printf_common+0x52>
 800899a:	f104 0a19 	add.w	sl, r4, #25
 800899e:	68e3      	ldr	r3, [r4, #12]
 80089a0:	f8d9 2000 	ldr.w	r2, [r9]
 80089a4:	1a9b      	subs	r3, r3, r2
 80089a6:	42ab      	cmp	r3, r5
 80089a8:	dc29      	bgt.n	80089fe <_printf_common+0xa6>
 80089aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80089ae:	6822      	ldr	r2, [r4, #0]
 80089b0:	3300      	adds	r3, #0
 80089b2:	bf18      	it	ne
 80089b4:	2301      	movne	r3, #1
 80089b6:	0692      	lsls	r2, r2, #26
 80089b8:	d42e      	bmi.n	8008a18 <_printf_common+0xc0>
 80089ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089be:	4639      	mov	r1, r7
 80089c0:	4630      	mov	r0, r6
 80089c2:	47c0      	blx	r8
 80089c4:	3001      	adds	r0, #1
 80089c6:	d021      	beq.n	8008a0c <_printf_common+0xb4>
 80089c8:	6823      	ldr	r3, [r4, #0]
 80089ca:	68e5      	ldr	r5, [r4, #12]
 80089cc:	f003 0306 	and.w	r3, r3, #6
 80089d0:	2b04      	cmp	r3, #4
 80089d2:	bf18      	it	ne
 80089d4:	2500      	movne	r5, #0
 80089d6:	f8d9 2000 	ldr.w	r2, [r9]
 80089da:	f04f 0900 	mov.w	r9, #0
 80089de:	bf08      	it	eq
 80089e0:	1aad      	subeq	r5, r5, r2
 80089e2:	68a3      	ldr	r3, [r4, #8]
 80089e4:	6922      	ldr	r2, [r4, #16]
 80089e6:	bf08      	it	eq
 80089e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089ec:	4293      	cmp	r3, r2
 80089ee:	bfc4      	itt	gt
 80089f0:	1a9b      	subgt	r3, r3, r2
 80089f2:	18ed      	addgt	r5, r5, r3
 80089f4:	341a      	adds	r4, #26
 80089f6:	454d      	cmp	r5, r9
 80089f8:	d11a      	bne.n	8008a30 <_printf_common+0xd8>
 80089fa:	2000      	movs	r0, #0
 80089fc:	e008      	b.n	8008a10 <_printf_common+0xb8>
 80089fe:	2301      	movs	r3, #1
 8008a00:	4652      	mov	r2, sl
 8008a02:	4639      	mov	r1, r7
 8008a04:	4630      	mov	r0, r6
 8008a06:	47c0      	blx	r8
 8008a08:	3001      	adds	r0, #1
 8008a0a:	d103      	bne.n	8008a14 <_printf_common+0xbc>
 8008a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a14:	3501      	adds	r5, #1
 8008a16:	e7c2      	b.n	800899e <_printf_common+0x46>
 8008a18:	2030      	movs	r0, #48	; 0x30
 8008a1a:	18e1      	adds	r1, r4, r3
 8008a1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a20:	1c5a      	adds	r2, r3, #1
 8008a22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a26:	4422      	add	r2, r4
 8008a28:	3302      	adds	r3, #2
 8008a2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a2e:	e7c4      	b.n	80089ba <_printf_common+0x62>
 8008a30:	2301      	movs	r3, #1
 8008a32:	4622      	mov	r2, r4
 8008a34:	4639      	mov	r1, r7
 8008a36:	4630      	mov	r0, r6
 8008a38:	47c0      	blx	r8
 8008a3a:	3001      	adds	r0, #1
 8008a3c:	d0e6      	beq.n	8008a0c <_printf_common+0xb4>
 8008a3e:	f109 0901 	add.w	r9, r9, #1
 8008a42:	e7d8      	b.n	80089f6 <_printf_common+0x9e>

08008a44 <_printf_i>:
 8008a44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a48:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008a4c:	460c      	mov	r4, r1
 8008a4e:	7e09      	ldrb	r1, [r1, #24]
 8008a50:	b085      	sub	sp, #20
 8008a52:	296e      	cmp	r1, #110	; 0x6e
 8008a54:	4617      	mov	r7, r2
 8008a56:	4606      	mov	r6, r0
 8008a58:	4698      	mov	r8, r3
 8008a5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a5c:	f000 80b3 	beq.w	8008bc6 <_printf_i+0x182>
 8008a60:	d822      	bhi.n	8008aa8 <_printf_i+0x64>
 8008a62:	2963      	cmp	r1, #99	; 0x63
 8008a64:	d036      	beq.n	8008ad4 <_printf_i+0x90>
 8008a66:	d80a      	bhi.n	8008a7e <_printf_i+0x3a>
 8008a68:	2900      	cmp	r1, #0
 8008a6a:	f000 80b9 	beq.w	8008be0 <_printf_i+0x19c>
 8008a6e:	2958      	cmp	r1, #88	; 0x58
 8008a70:	f000 8083 	beq.w	8008b7a <_printf_i+0x136>
 8008a74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a78:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008a7c:	e032      	b.n	8008ae4 <_printf_i+0xa0>
 8008a7e:	2964      	cmp	r1, #100	; 0x64
 8008a80:	d001      	beq.n	8008a86 <_printf_i+0x42>
 8008a82:	2969      	cmp	r1, #105	; 0x69
 8008a84:	d1f6      	bne.n	8008a74 <_printf_i+0x30>
 8008a86:	6820      	ldr	r0, [r4, #0]
 8008a88:	6813      	ldr	r3, [r2, #0]
 8008a8a:	0605      	lsls	r5, r0, #24
 8008a8c:	f103 0104 	add.w	r1, r3, #4
 8008a90:	d52a      	bpl.n	8008ae8 <_printf_i+0xa4>
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	6011      	str	r1, [r2, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	da03      	bge.n	8008aa2 <_printf_i+0x5e>
 8008a9a:	222d      	movs	r2, #45	; 0x2d
 8008a9c:	425b      	negs	r3, r3
 8008a9e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008aa2:	486f      	ldr	r0, [pc, #444]	; (8008c60 <_printf_i+0x21c>)
 8008aa4:	220a      	movs	r2, #10
 8008aa6:	e039      	b.n	8008b1c <_printf_i+0xd8>
 8008aa8:	2973      	cmp	r1, #115	; 0x73
 8008aaa:	f000 809d 	beq.w	8008be8 <_printf_i+0x1a4>
 8008aae:	d808      	bhi.n	8008ac2 <_printf_i+0x7e>
 8008ab0:	296f      	cmp	r1, #111	; 0x6f
 8008ab2:	d020      	beq.n	8008af6 <_printf_i+0xb2>
 8008ab4:	2970      	cmp	r1, #112	; 0x70
 8008ab6:	d1dd      	bne.n	8008a74 <_printf_i+0x30>
 8008ab8:	6823      	ldr	r3, [r4, #0]
 8008aba:	f043 0320 	orr.w	r3, r3, #32
 8008abe:	6023      	str	r3, [r4, #0]
 8008ac0:	e003      	b.n	8008aca <_printf_i+0x86>
 8008ac2:	2975      	cmp	r1, #117	; 0x75
 8008ac4:	d017      	beq.n	8008af6 <_printf_i+0xb2>
 8008ac6:	2978      	cmp	r1, #120	; 0x78
 8008ac8:	d1d4      	bne.n	8008a74 <_printf_i+0x30>
 8008aca:	2378      	movs	r3, #120	; 0x78
 8008acc:	4865      	ldr	r0, [pc, #404]	; (8008c64 <_printf_i+0x220>)
 8008ace:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ad2:	e055      	b.n	8008b80 <_printf_i+0x13c>
 8008ad4:	6813      	ldr	r3, [r2, #0]
 8008ad6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ada:	1d19      	adds	r1, r3, #4
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	6011      	str	r1, [r2, #0]
 8008ae0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e08c      	b.n	8008c02 <_printf_i+0x1be>
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008aee:	6011      	str	r1, [r2, #0]
 8008af0:	bf18      	it	ne
 8008af2:	b21b      	sxthne	r3, r3
 8008af4:	e7cf      	b.n	8008a96 <_printf_i+0x52>
 8008af6:	6813      	ldr	r3, [r2, #0]
 8008af8:	6825      	ldr	r5, [r4, #0]
 8008afa:	1d18      	adds	r0, r3, #4
 8008afc:	6010      	str	r0, [r2, #0]
 8008afe:	0628      	lsls	r0, r5, #24
 8008b00:	d501      	bpl.n	8008b06 <_printf_i+0xc2>
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	e002      	b.n	8008b0c <_printf_i+0xc8>
 8008b06:	0668      	lsls	r0, r5, #25
 8008b08:	d5fb      	bpl.n	8008b02 <_printf_i+0xbe>
 8008b0a:	881b      	ldrh	r3, [r3, #0]
 8008b0c:	296f      	cmp	r1, #111	; 0x6f
 8008b0e:	bf14      	ite	ne
 8008b10:	220a      	movne	r2, #10
 8008b12:	2208      	moveq	r2, #8
 8008b14:	4852      	ldr	r0, [pc, #328]	; (8008c60 <_printf_i+0x21c>)
 8008b16:	2100      	movs	r1, #0
 8008b18:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b1c:	6865      	ldr	r5, [r4, #4]
 8008b1e:	2d00      	cmp	r5, #0
 8008b20:	60a5      	str	r5, [r4, #8]
 8008b22:	f2c0 8095 	blt.w	8008c50 <_printf_i+0x20c>
 8008b26:	6821      	ldr	r1, [r4, #0]
 8008b28:	f021 0104 	bic.w	r1, r1, #4
 8008b2c:	6021      	str	r1, [r4, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d13d      	bne.n	8008bae <_printf_i+0x16a>
 8008b32:	2d00      	cmp	r5, #0
 8008b34:	f040 808e 	bne.w	8008c54 <_printf_i+0x210>
 8008b38:	4665      	mov	r5, ip
 8008b3a:	2a08      	cmp	r2, #8
 8008b3c:	d10b      	bne.n	8008b56 <_printf_i+0x112>
 8008b3e:	6823      	ldr	r3, [r4, #0]
 8008b40:	07db      	lsls	r3, r3, #31
 8008b42:	d508      	bpl.n	8008b56 <_printf_i+0x112>
 8008b44:	6923      	ldr	r3, [r4, #16]
 8008b46:	6862      	ldr	r2, [r4, #4]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	bfde      	ittt	le
 8008b4c:	2330      	movle	r3, #48	; 0x30
 8008b4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b52:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008b56:	ebac 0305 	sub.w	r3, ip, r5
 8008b5a:	6123      	str	r3, [r4, #16]
 8008b5c:	f8cd 8000 	str.w	r8, [sp]
 8008b60:	463b      	mov	r3, r7
 8008b62:	aa03      	add	r2, sp, #12
 8008b64:	4621      	mov	r1, r4
 8008b66:	4630      	mov	r0, r6
 8008b68:	f7ff fef6 	bl	8008958 <_printf_common>
 8008b6c:	3001      	adds	r0, #1
 8008b6e:	d14d      	bne.n	8008c0c <_printf_i+0x1c8>
 8008b70:	f04f 30ff 	mov.w	r0, #4294967295
 8008b74:	b005      	add	sp, #20
 8008b76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b7a:	4839      	ldr	r0, [pc, #228]	; (8008c60 <_printf_i+0x21c>)
 8008b7c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008b80:	6813      	ldr	r3, [r2, #0]
 8008b82:	6821      	ldr	r1, [r4, #0]
 8008b84:	1d1d      	adds	r5, r3, #4
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	6015      	str	r5, [r2, #0]
 8008b8a:	060a      	lsls	r2, r1, #24
 8008b8c:	d50b      	bpl.n	8008ba6 <_printf_i+0x162>
 8008b8e:	07ca      	lsls	r2, r1, #31
 8008b90:	bf44      	itt	mi
 8008b92:	f041 0120 	orrmi.w	r1, r1, #32
 8008b96:	6021      	strmi	r1, [r4, #0]
 8008b98:	b91b      	cbnz	r3, 8008ba2 <_printf_i+0x15e>
 8008b9a:	6822      	ldr	r2, [r4, #0]
 8008b9c:	f022 0220 	bic.w	r2, r2, #32
 8008ba0:	6022      	str	r2, [r4, #0]
 8008ba2:	2210      	movs	r2, #16
 8008ba4:	e7b7      	b.n	8008b16 <_printf_i+0xd2>
 8008ba6:	064d      	lsls	r5, r1, #25
 8008ba8:	bf48      	it	mi
 8008baa:	b29b      	uxthmi	r3, r3
 8008bac:	e7ef      	b.n	8008b8e <_printf_i+0x14a>
 8008bae:	4665      	mov	r5, ip
 8008bb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8008bb4:	fb02 3311 	mls	r3, r2, r1, r3
 8008bb8:	5cc3      	ldrb	r3, [r0, r3]
 8008bba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	2900      	cmp	r1, #0
 8008bc2:	d1f5      	bne.n	8008bb0 <_printf_i+0x16c>
 8008bc4:	e7b9      	b.n	8008b3a <_printf_i+0xf6>
 8008bc6:	6813      	ldr	r3, [r2, #0]
 8008bc8:	6825      	ldr	r5, [r4, #0]
 8008bca:	1d18      	adds	r0, r3, #4
 8008bcc:	6961      	ldr	r1, [r4, #20]
 8008bce:	6010      	str	r0, [r2, #0]
 8008bd0:	0628      	lsls	r0, r5, #24
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	d501      	bpl.n	8008bda <_printf_i+0x196>
 8008bd6:	6019      	str	r1, [r3, #0]
 8008bd8:	e002      	b.n	8008be0 <_printf_i+0x19c>
 8008bda:	066a      	lsls	r2, r5, #25
 8008bdc:	d5fb      	bpl.n	8008bd6 <_printf_i+0x192>
 8008bde:	8019      	strh	r1, [r3, #0]
 8008be0:	2300      	movs	r3, #0
 8008be2:	4665      	mov	r5, ip
 8008be4:	6123      	str	r3, [r4, #16]
 8008be6:	e7b9      	b.n	8008b5c <_printf_i+0x118>
 8008be8:	6813      	ldr	r3, [r2, #0]
 8008bea:	1d19      	adds	r1, r3, #4
 8008bec:	6011      	str	r1, [r2, #0]
 8008bee:	681d      	ldr	r5, [r3, #0]
 8008bf0:	6862      	ldr	r2, [r4, #4]
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	4628      	mov	r0, r5
 8008bf6:	f000 f96d 	bl	8008ed4 <memchr>
 8008bfa:	b108      	cbz	r0, 8008c00 <_printf_i+0x1bc>
 8008bfc:	1b40      	subs	r0, r0, r5
 8008bfe:	6060      	str	r0, [r4, #4]
 8008c00:	6863      	ldr	r3, [r4, #4]
 8008c02:	6123      	str	r3, [r4, #16]
 8008c04:	2300      	movs	r3, #0
 8008c06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c0a:	e7a7      	b.n	8008b5c <_printf_i+0x118>
 8008c0c:	6923      	ldr	r3, [r4, #16]
 8008c0e:	462a      	mov	r2, r5
 8008c10:	4639      	mov	r1, r7
 8008c12:	4630      	mov	r0, r6
 8008c14:	47c0      	blx	r8
 8008c16:	3001      	adds	r0, #1
 8008c18:	d0aa      	beq.n	8008b70 <_printf_i+0x12c>
 8008c1a:	6823      	ldr	r3, [r4, #0]
 8008c1c:	079b      	lsls	r3, r3, #30
 8008c1e:	d413      	bmi.n	8008c48 <_printf_i+0x204>
 8008c20:	68e0      	ldr	r0, [r4, #12]
 8008c22:	9b03      	ldr	r3, [sp, #12]
 8008c24:	4298      	cmp	r0, r3
 8008c26:	bfb8      	it	lt
 8008c28:	4618      	movlt	r0, r3
 8008c2a:	e7a3      	b.n	8008b74 <_printf_i+0x130>
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	464a      	mov	r2, r9
 8008c30:	4639      	mov	r1, r7
 8008c32:	4630      	mov	r0, r6
 8008c34:	47c0      	blx	r8
 8008c36:	3001      	adds	r0, #1
 8008c38:	d09a      	beq.n	8008b70 <_printf_i+0x12c>
 8008c3a:	3501      	adds	r5, #1
 8008c3c:	68e3      	ldr	r3, [r4, #12]
 8008c3e:	9a03      	ldr	r2, [sp, #12]
 8008c40:	1a9b      	subs	r3, r3, r2
 8008c42:	42ab      	cmp	r3, r5
 8008c44:	dcf2      	bgt.n	8008c2c <_printf_i+0x1e8>
 8008c46:	e7eb      	b.n	8008c20 <_printf_i+0x1dc>
 8008c48:	2500      	movs	r5, #0
 8008c4a:	f104 0919 	add.w	r9, r4, #25
 8008c4e:	e7f5      	b.n	8008c3c <_printf_i+0x1f8>
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d1ac      	bne.n	8008bae <_printf_i+0x16a>
 8008c54:	7803      	ldrb	r3, [r0, #0]
 8008c56:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c5e:	e76c      	b.n	8008b3a <_printf_i+0xf6>
 8008c60:	08009669 	.word	0x08009669
 8008c64:	0800967a 	.word	0x0800967a

08008c68 <_read_r>:
 8008c68:	b538      	push	{r3, r4, r5, lr}
 8008c6a:	4605      	mov	r5, r0
 8008c6c:	4608      	mov	r0, r1
 8008c6e:	4611      	mov	r1, r2
 8008c70:	2200      	movs	r2, #0
 8008c72:	4c05      	ldr	r4, [pc, #20]	; (8008c88 <_read_r+0x20>)
 8008c74:	6022      	str	r2, [r4, #0]
 8008c76:	461a      	mov	r2, r3
 8008c78:	f7f8 fc1c 	bl	80014b4 <_read>
 8008c7c:	1c43      	adds	r3, r0, #1
 8008c7e:	d102      	bne.n	8008c86 <_read_r+0x1e>
 8008c80:	6823      	ldr	r3, [r4, #0]
 8008c82:	b103      	cbz	r3, 8008c86 <_read_r+0x1e>
 8008c84:	602b      	str	r3, [r5, #0]
 8008c86:	bd38      	pop	{r3, r4, r5, pc}
 8008c88:	2000491c 	.word	0x2000491c

08008c8c <__swbuf_r>:
 8008c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8e:	460e      	mov	r6, r1
 8008c90:	4614      	mov	r4, r2
 8008c92:	4605      	mov	r5, r0
 8008c94:	b118      	cbz	r0, 8008c9e <__swbuf_r+0x12>
 8008c96:	6983      	ldr	r3, [r0, #24]
 8008c98:	b90b      	cbnz	r3, 8008c9e <__swbuf_r+0x12>
 8008c9a:	f7ff f9af 	bl	8007ffc <__sinit>
 8008c9e:	4b21      	ldr	r3, [pc, #132]	; (8008d24 <__swbuf_r+0x98>)
 8008ca0:	429c      	cmp	r4, r3
 8008ca2:	d12a      	bne.n	8008cfa <__swbuf_r+0x6e>
 8008ca4:	686c      	ldr	r4, [r5, #4]
 8008ca6:	69a3      	ldr	r3, [r4, #24]
 8008ca8:	60a3      	str	r3, [r4, #8]
 8008caa:	89a3      	ldrh	r3, [r4, #12]
 8008cac:	071a      	lsls	r2, r3, #28
 8008cae:	d52e      	bpl.n	8008d0e <__swbuf_r+0x82>
 8008cb0:	6923      	ldr	r3, [r4, #16]
 8008cb2:	b363      	cbz	r3, 8008d0e <__swbuf_r+0x82>
 8008cb4:	6923      	ldr	r3, [r4, #16]
 8008cb6:	6820      	ldr	r0, [r4, #0]
 8008cb8:	b2f6      	uxtb	r6, r6
 8008cba:	1ac0      	subs	r0, r0, r3
 8008cbc:	6963      	ldr	r3, [r4, #20]
 8008cbe:	4637      	mov	r7, r6
 8008cc0:	4283      	cmp	r3, r0
 8008cc2:	dc04      	bgt.n	8008cce <__swbuf_r+0x42>
 8008cc4:	4621      	mov	r1, r4
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	f7ff f91c 	bl	8007f04 <_fflush_r>
 8008ccc:	bb28      	cbnz	r0, 8008d1a <__swbuf_r+0x8e>
 8008cce:	68a3      	ldr	r3, [r4, #8]
 8008cd0:	3001      	adds	r0, #1
 8008cd2:	3b01      	subs	r3, #1
 8008cd4:	60a3      	str	r3, [r4, #8]
 8008cd6:	6823      	ldr	r3, [r4, #0]
 8008cd8:	1c5a      	adds	r2, r3, #1
 8008cda:	6022      	str	r2, [r4, #0]
 8008cdc:	701e      	strb	r6, [r3, #0]
 8008cde:	6963      	ldr	r3, [r4, #20]
 8008ce0:	4283      	cmp	r3, r0
 8008ce2:	d004      	beq.n	8008cee <__swbuf_r+0x62>
 8008ce4:	89a3      	ldrh	r3, [r4, #12]
 8008ce6:	07db      	lsls	r3, r3, #31
 8008ce8:	d519      	bpl.n	8008d1e <__swbuf_r+0x92>
 8008cea:	2e0a      	cmp	r6, #10
 8008cec:	d117      	bne.n	8008d1e <__swbuf_r+0x92>
 8008cee:	4621      	mov	r1, r4
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	f7ff f907 	bl	8007f04 <_fflush_r>
 8008cf6:	b190      	cbz	r0, 8008d1e <__swbuf_r+0x92>
 8008cf8:	e00f      	b.n	8008d1a <__swbuf_r+0x8e>
 8008cfa:	4b0b      	ldr	r3, [pc, #44]	; (8008d28 <__swbuf_r+0x9c>)
 8008cfc:	429c      	cmp	r4, r3
 8008cfe:	d101      	bne.n	8008d04 <__swbuf_r+0x78>
 8008d00:	68ac      	ldr	r4, [r5, #8]
 8008d02:	e7d0      	b.n	8008ca6 <__swbuf_r+0x1a>
 8008d04:	4b09      	ldr	r3, [pc, #36]	; (8008d2c <__swbuf_r+0xa0>)
 8008d06:	429c      	cmp	r4, r3
 8008d08:	bf08      	it	eq
 8008d0a:	68ec      	ldreq	r4, [r5, #12]
 8008d0c:	e7cb      	b.n	8008ca6 <__swbuf_r+0x1a>
 8008d0e:	4621      	mov	r1, r4
 8008d10:	4628      	mov	r0, r5
 8008d12:	f000 f80d 	bl	8008d30 <__swsetup_r>
 8008d16:	2800      	cmp	r0, #0
 8008d18:	d0cc      	beq.n	8008cb4 <__swbuf_r+0x28>
 8008d1a:	f04f 37ff 	mov.w	r7, #4294967295
 8008d1e:	4638      	mov	r0, r7
 8008d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d22:	bf00      	nop
 8008d24:	08009614 	.word	0x08009614
 8008d28:	08009634 	.word	0x08009634
 8008d2c:	080095f4 	.word	0x080095f4

08008d30 <__swsetup_r>:
 8008d30:	4b32      	ldr	r3, [pc, #200]	; (8008dfc <__swsetup_r+0xcc>)
 8008d32:	b570      	push	{r4, r5, r6, lr}
 8008d34:	681d      	ldr	r5, [r3, #0]
 8008d36:	4606      	mov	r6, r0
 8008d38:	460c      	mov	r4, r1
 8008d3a:	b125      	cbz	r5, 8008d46 <__swsetup_r+0x16>
 8008d3c:	69ab      	ldr	r3, [r5, #24]
 8008d3e:	b913      	cbnz	r3, 8008d46 <__swsetup_r+0x16>
 8008d40:	4628      	mov	r0, r5
 8008d42:	f7ff f95b 	bl	8007ffc <__sinit>
 8008d46:	4b2e      	ldr	r3, [pc, #184]	; (8008e00 <__swsetup_r+0xd0>)
 8008d48:	429c      	cmp	r4, r3
 8008d4a:	d10f      	bne.n	8008d6c <__swsetup_r+0x3c>
 8008d4c:	686c      	ldr	r4, [r5, #4]
 8008d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	0715      	lsls	r5, r2, #28
 8008d56:	d42c      	bmi.n	8008db2 <__swsetup_r+0x82>
 8008d58:	06d0      	lsls	r0, r2, #27
 8008d5a:	d411      	bmi.n	8008d80 <__swsetup_r+0x50>
 8008d5c:	2209      	movs	r2, #9
 8008d5e:	6032      	str	r2, [r6, #0]
 8008d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d64:	81a3      	strh	r3, [r4, #12]
 8008d66:	f04f 30ff 	mov.w	r0, #4294967295
 8008d6a:	e03e      	b.n	8008dea <__swsetup_r+0xba>
 8008d6c:	4b25      	ldr	r3, [pc, #148]	; (8008e04 <__swsetup_r+0xd4>)
 8008d6e:	429c      	cmp	r4, r3
 8008d70:	d101      	bne.n	8008d76 <__swsetup_r+0x46>
 8008d72:	68ac      	ldr	r4, [r5, #8]
 8008d74:	e7eb      	b.n	8008d4e <__swsetup_r+0x1e>
 8008d76:	4b24      	ldr	r3, [pc, #144]	; (8008e08 <__swsetup_r+0xd8>)
 8008d78:	429c      	cmp	r4, r3
 8008d7a:	bf08      	it	eq
 8008d7c:	68ec      	ldreq	r4, [r5, #12]
 8008d7e:	e7e6      	b.n	8008d4e <__swsetup_r+0x1e>
 8008d80:	0751      	lsls	r1, r2, #29
 8008d82:	d512      	bpl.n	8008daa <__swsetup_r+0x7a>
 8008d84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d86:	b141      	cbz	r1, 8008d9a <__swsetup_r+0x6a>
 8008d88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d8c:	4299      	cmp	r1, r3
 8008d8e:	d002      	beq.n	8008d96 <__swsetup_r+0x66>
 8008d90:	4630      	mov	r0, r6
 8008d92:	f7ff f9e9 	bl	8008168 <_free_r>
 8008d96:	2300      	movs	r3, #0
 8008d98:	6363      	str	r3, [r4, #52]	; 0x34
 8008d9a:	89a3      	ldrh	r3, [r4, #12]
 8008d9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008da0:	81a3      	strh	r3, [r4, #12]
 8008da2:	2300      	movs	r3, #0
 8008da4:	6063      	str	r3, [r4, #4]
 8008da6:	6923      	ldr	r3, [r4, #16]
 8008da8:	6023      	str	r3, [r4, #0]
 8008daa:	89a3      	ldrh	r3, [r4, #12]
 8008dac:	f043 0308 	orr.w	r3, r3, #8
 8008db0:	81a3      	strh	r3, [r4, #12]
 8008db2:	6923      	ldr	r3, [r4, #16]
 8008db4:	b94b      	cbnz	r3, 8008dca <__swsetup_r+0x9a>
 8008db6:	89a3      	ldrh	r3, [r4, #12]
 8008db8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dc0:	d003      	beq.n	8008dca <__swsetup_r+0x9a>
 8008dc2:	4621      	mov	r1, r4
 8008dc4:	4630      	mov	r0, r6
 8008dc6:	f000 f845 	bl	8008e54 <__smakebuf_r>
 8008dca:	89a2      	ldrh	r2, [r4, #12]
 8008dcc:	f012 0301 	ands.w	r3, r2, #1
 8008dd0:	d00c      	beq.n	8008dec <__swsetup_r+0xbc>
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	60a3      	str	r3, [r4, #8]
 8008dd6:	6963      	ldr	r3, [r4, #20]
 8008dd8:	425b      	negs	r3, r3
 8008dda:	61a3      	str	r3, [r4, #24]
 8008ddc:	6923      	ldr	r3, [r4, #16]
 8008dde:	b953      	cbnz	r3, 8008df6 <__swsetup_r+0xc6>
 8008de0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008de4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008de8:	d1ba      	bne.n	8008d60 <__swsetup_r+0x30>
 8008dea:	bd70      	pop	{r4, r5, r6, pc}
 8008dec:	0792      	lsls	r2, r2, #30
 8008dee:	bf58      	it	pl
 8008df0:	6963      	ldrpl	r3, [r4, #20]
 8008df2:	60a3      	str	r3, [r4, #8]
 8008df4:	e7f2      	b.n	8008ddc <__swsetup_r+0xac>
 8008df6:	2000      	movs	r0, #0
 8008df8:	e7f7      	b.n	8008dea <__swsetup_r+0xba>
 8008dfa:	bf00      	nop
 8008dfc:	20000024 	.word	0x20000024
 8008e00:	08009614 	.word	0x08009614
 8008e04:	08009634 	.word	0x08009634
 8008e08:	080095f4 	.word	0x080095f4

08008e0c <__swhatbuf_r>:
 8008e0c:	b570      	push	{r4, r5, r6, lr}
 8008e0e:	460e      	mov	r6, r1
 8008e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e14:	b096      	sub	sp, #88	; 0x58
 8008e16:	2900      	cmp	r1, #0
 8008e18:	4614      	mov	r4, r2
 8008e1a:	461d      	mov	r5, r3
 8008e1c:	da07      	bge.n	8008e2e <__swhatbuf_r+0x22>
 8008e1e:	2300      	movs	r3, #0
 8008e20:	602b      	str	r3, [r5, #0]
 8008e22:	89b3      	ldrh	r3, [r6, #12]
 8008e24:	061a      	lsls	r2, r3, #24
 8008e26:	d410      	bmi.n	8008e4a <__swhatbuf_r+0x3e>
 8008e28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e2c:	e00e      	b.n	8008e4c <__swhatbuf_r+0x40>
 8008e2e:	466a      	mov	r2, sp
 8008e30:	f000 f8a8 	bl	8008f84 <_fstat_r>
 8008e34:	2800      	cmp	r0, #0
 8008e36:	dbf2      	blt.n	8008e1e <__swhatbuf_r+0x12>
 8008e38:	9a01      	ldr	r2, [sp, #4]
 8008e3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e42:	425a      	negs	r2, r3
 8008e44:	415a      	adcs	r2, r3
 8008e46:	602a      	str	r2, [r5, #0]
 8008e48:	e7ee      	b.n	8008e28 <__swhatbuf_r+0x1c>
 8008e4a:	2340      	movs	r3, #64	; 0x40
 8008e4c:	2000      	movs	r0, #0
 8008e4e:	6023      	str	r3, [r4, #0]
 8008e50:	b016      	add	sp, #88	; 0x58
 8008e52:	bd70      	pop	{r4, r5, r6, pc}

08008e54 <__smakebuf_r>:
 8008e54:	898b      	ldrh	r3, [r1, #12]
 8008e56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e58:	079d      	lsls	r5, r3, #30
 8008e5a:	4606      	mov	r6, r0
 8008e5c:	460c      	mov	r4, r1
 8008e5e:	d507      	bpl.n	8008e70 <__smakebuf_r+0x1c>
 8008e60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e64:	6023      	str	r3, [r4, #0]
 8008e66:	6123      	str	r3, [r4, #16]
 8008e68:	2301      	movs	r3, #1
 8008e6a:	6163      	str	r3, [r4, #20]
 8008e6c:	b002      	add	sp, #8
 8008e6e:	bd70      	pop	{r4, r5, r6, pc}
 8008e70:	ab01      	add	r3, sp, #4
 8008e72:	466a      	mov	r2, sp
 8008e74:	f7ff ffca 	bl	8008e0c <__swhatbuf_r>
 8008e78:	9900      	ldr	r1, [sp, #0]
 8008e7a:	4605      	mov	r5, r0
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	f7ff f9bf 	bl	8008200 <_malloc_r>
 8008e82:	b948      	cbnz	r0, 8008e98 <__smakebuf_r+0x44>
 8008e84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e88:	059a      	lsls	r2, r3, #22
 8008e8a:	d4ef      	bmi.n	8008e6c <__smakebuf_r+0x18>
 8008e8c:	f023 0303 	bic.w	r3, r3, #3
 8008e90:	f043 0302 	orr.w	r3, r3, #2
 8008e94:	81a3      	strh	r3, [r4, #12]
 8008e96:	e7e3      	b.n	8008e60 <__smakebuf_r+0xc>
 8008e98:	4b0d      	ldr	r3, [pc, #52]	; (8008ed0 <__smakebuf_r+0x7c>)
 8008e9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008e9c:	89a3      	ldrh	r3, [r4, #12]
 8008e9e:	6020      	str	r0, [r4, #0]
 8008ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ea4:	81a3      	strh	r3, [r4, #12]
 8008ea6:	9b00      	ldr	r3, [sp, #0]
 8008ea8:	6120      	str	r0, [r4, #16]
 8008eaa:	6163      	str	r3, [r4, #20]
 8008eac:	9b01      	ldr	r3, [sp, #4]
 8008eae:	b15b      	cbz	r3, 8008ec8 <__smakebuf_r+0x74>
 8008eb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	f000 f877 	bl	8008fa8 <_isatty_r>
 8008eba:	b128      	cbz	r0, 8008ec8 <__smakebuf_r+0x74>
 8008ebc:	89a3      	ldrh	r3, [r4, #12]
 8008ebe:	f023 0303 	bic.w	r3, r3, #3
 8008ec2:	f043 0301 	orr.w	r3, r3, #1
 8008ec6:	81a3      	strh	r3, [r4, #12]
 8008ec8:	89a3      	ldrh	r3, [r4, #12]
 8008eca:	431d      	orrs	r5, r3
 8008ecc:	81a5      	strh	r5, [r4, #12]
 8008ece:	e7cd      	b.n	8008e6c <__smakebuf_r+0x18>
 8008ed0:	08007fc5 	.word	0x08007fc5

08008ed4 <memchr>:
 8008ed4:	b510      	push	{r4, lr}
 8008ed6:	b2c9      	uxtb	r1, r1
 8008ed8:	4402      	add	r2, r0
 8008eda:	4290      	cmp	r0, r2
 8008edc:	4603      	mov	r3, r0
 8008ede:	d101      	bne.n	8008ee4 <memchr+0x10>
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	e003      	b.n	8008eec <memchr+0x18>
 8008ee4:	781c      	ldrb	r4, [r3, #0]
 8008ee6:	3001      	adds	r0, #1
 8008ee8:	428c      	cmp	r4, r1
 8008eea:	d1f6      	bne.n	8008eda <memchr+0x6>
 8008eec:	4618      	mov	r0, r3
 8008eee:	bd10      	pop	{r4, pc}

08008ef0 <memcpy>:
 8008ef0:	b510      	push	{r4, lr}
 8008ef2:	1e43      	subs	r3, r0, #1
 8008ef4:	440a      	add	r2, r1
 8008ef6:	4291      	cmp	r1, r2
 8008ef8:	d100      	bne.n	8008efc <memcpy+0xc>
 8008efa:	bd10      	pop	{r4, pc}
 8008efc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f04:	e7f7      	b.n	8008ef6 <memcpy+0x6>

08008f06 <memmove>:
 8008f06:	4288      	cmp	r0, r1
 8008f08:	b510      	push	{r4, lr}
 8008f0a:	eb01 0302 	add.w	r3, r1, r2
 8008f0e:	d807      	bhi.n	8008f20 <memmove+0x1a>
 8008f10:	1e42      	subs	r2, r0, #1
 8008f12:	4299      	cmp	r1, r3
 8008f14:	d00a      	beq.n	8008f2c <memmove+0x26>
 8008f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f1a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008f1e:	e7f8      	b.n	8008f12 <memmove+0xc>
 8008f20:	4283      	cmp	r3, r0
 8008f22:	d9f5      	bls.n	8008f10 <memmove+0xa>
 8008f24:	1881      	adds	r1, r0, r2
 8008f26:	1ad2      	subs	r2, r2, r3
 8008f28:	42d3      	cmn	r3, r2
 8008f2a:	d100      	bne.n	8008f2e <memmove+0x28>
 8008f2c:	bd10      	pop	{r4, pc}
 8008f2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f32:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008f36:	e7f7      	b.n	8008f28 <memmove+0x22>

08008f38 <_realloc_r>:
 8008f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f3a:	4607      	mov	r7, r0
 8008f3c:	4614      	mov	r4, r2
 8008f3e:	460e      	mov	r6, r1
 8008f40:	b921      	cbnz	r1, 8008f4c <_realloc_r+0x14>
 8008f42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008f46:	4611      	mov	r1, r2
 8008f48:	f7ff b95a 	b.w	8008200 <_malloc_r>
 8008f4c:	b922      	cbnz	r2, 8008f58 <_realloc_r+0x20>
 8008f4e:	f7ff f90b 	bl	8008168 <_free_r>
 8008f52:	4625      	mov	r5, r4
 8008f54:	4628      	mov	r0, r5
 8008f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f58:	f000 f836 	bl	8008fc8 <_malloc_usable_size_r>
 8008f5c:	42a0      	cmp	r0, r4
 8008f5e:	d20f      	bcs.n	8008f80 <_realloc_r+0x48>
 8008f60:	4621      	mov	r1, r4
 8008f62:	4638      	mov	r0, r7
 8008f64:	f7ff f94c 	bl	8008200 <_malloc_r>
 8008f68:	4605      	mov	r5, r0
 8008f6a:	2800      	cmp	r0, #0
 8008f6c:	d0f2      	beq.n	8008f54 <_realloc_r+0x1c>
 8008f6e:	4631      	mov	r1, r6
 8008f70:	4622      	mov	r2, r4
 8008f72:	f7ff ffbd 	bl	8008ef0 <memcpy>
 8008f76:	4631      	mov	r1, r6
 8008f78:	4638      	mov	r0, r7
 8008f7a:	f7ff f8f5 	bl	8008168 <_free_r>
 8008f7e:	e7e9      	b.n	8008f54 <_realloc_r+0x1c>
 8008f80:	4635      	mov	r5, r6
 8008f82:	e7e7      	b.n	8008f54 <_realloc_r+0x1c>

08008f84 <_fstat_r>:
 8008f84:	b538      	push	{r3, r4, r5, lr}
 8008f86:	2300      	movs	r3, #0
 8008f88:	4c06      	ldr	r4, [pc, #24]	; (8008fa4 <_fstat_r+0x20>)
 8008f8a:	4605      	mov	r5, r0
 8008f8c:	4608      	mov	r0, r1
 8008f8e:	4611      	mov	r1, r2
 8008f90:	6023      	str	r3, [r4, #0]
 8008f92:	f7f8 fad3 	bl	800153c <_fstat>
 8008f96:	1c43      	adds	r3, r0, #1
 8008f98:	d102      	bne.n	8008fa0 <_fstat_r+0x1c>
 8008f9a:	6823      	ldr	r3, [r4, #0]
 8008f9c:	b103      	cbz	r3, 8008fa0 <_fstat_r+0x1c>
 8008f9e:	602b      	str	r3, [r5, #0]
 8008fa0:	bd38      	pop	{r3, r4, r5, pc}
 8008fa2:	bf00      	nop
 8008fa4:	2000491c 	.word	0x2000491c

08008fa8 <_isatty_r>:
 8008fa8:	b538      	push	{r3, r4, r5, lr}
 8008faa:	2300      	movs	r3, #0
 8008fac:	4c05      	ldr	r4, [pc, #20]	; (8008fc4 <_isatty_r+0x1c>)
 8008fae:	4605      	mov	r5, r0
 8008fb0:	4608      	mov	r0, r1
 8008fb2:	6023      	str	r3, [r4, #0]
 8008fb4:	f7f8 fad1 	bl	800155a <_isatty>
 8008fb8:	1c43      	adds	r3, r0, #1
 8008fba:	d102      	bne.n	8008fc2 <_isatty_r+0x1a>
 8008fbc:	6823      	ldr	r3, [r4, #0]
 8008fbe:	b103      	cbz	r3, 8008fc2 <_isatty_r+0x1a>
 8008fc0:	602b      	str	r3, [r5, #0]
 8008fc2:	bd38      	pop	{r3, r4, r5, pc}
 8008fc4:	2000491c 	.word	0x2000491c

08008fc8 <_malloc_usable_size_r>:
 8008fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fcc:	1f18      	subs	r0, r3, #4
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	bfbc      	itt	lt
 8008fd2:	580b      	ldrlt	r3, [r1, r0]
 8008fd4:	18c0      	addlt	r0, r0, r3
 8008fd6:	4770      	bx	lr

08008fd8 <_init>:
 8008fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fda:	bf00      	nop
 8008fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fde:	bc08      	pop	{r3}
 8008fe0:	469e      	mov	lr, r3
 8008fe2:	4770      	bx	lr

08008fe4 <_fini>:
 8008fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe6:	bf00      	nop
 8008fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fea:	bc08      	pop	{r3}
 8008fec:	469e      	mov	lr, r3
 8008fee:	4770      	bx	lr
